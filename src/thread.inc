/**
 * This file was generated by "tools/inst.py src/insts.def" automatically.
 * DO NOT TOUCH!!
 */

#line 6 "src/thread.inc"
    case OP(PUSH_CONST):
        {
            Yog_assert(env, PC < YogByteArray_size(env, CODE->insts), "");
            uint8_t index = *((uint8_t*)&CODE->insts->items[PC]);
            PC += sizeof(uint8_t);
            YogVal val = YogVal_nil();
#line 18 "src/insts.def"
            val = CONSTS(index);

#line 15 "src/thread.inc"
            PUSH(val);
            break;
        }
#line 19 "src/thread.inc"
    case OP(CALL_METHOD):
        {
            Yog_assert(env, PC < YogByteArray_size(env, CODE->insts), "");
            ID method = *((ID*)&CODE->insts->items[PC]);
            PC += sizeof(ID);
            Yog_assert(env, PC < YogByteArray_size(env, CODE->insts), "");
            uint8_t argc = *((uint8_t*)&CODE->insts->items[PC]);
            PC += sizeof(uint8_t);
#line 26 "src/insts.def"
            YogVal args[argc];
            unsigned int i = 0;
            for (i = 0; i < argc; i++) {
                args[i] = POP();
            }
            YogVal receiver = POP();
            YogVal ret = YogThread_call_method_id(ENV, receiver, method, argc, args);
            PUSH(ret);

#line 37 "src/thread.inc"
            break;
        }
#line 40 "src/thread.inc"
    case OP(STORE_PKG):
        {
            Yog_assert(env, PC < YogByteArray_size(env, CODE->insts), "");
            ID id = *((ID*)&CODE->insts->items[PC]);
            PC += sizeof(ID);
            Yog_assert(env, 0 < YogValArray_size(env, STACK), "");
            YogVal val = POP();
#line 41 "src/insts.def"
            YogVal key = YogVal_symbol(id);
            YogTable_insert(ENV, PKG_VARS(FRAME), key, val);

#line 51 "src/thread.inc"
            break;
        }
#line 54 "src/thread.inc"
    case OP(CALL_COMMAND):
        {
            Yog_assert(env, PC < YogByteArray_size(env, CODE->insts), "");
            ID command = *((ID*)&CODE->insts->items[PC]);
            PC += sizeof(ID);
            Yog_assert(env, PC < YogByteArray_size(env, CODE->insts), "");
            uint8_t argc = *((uint8_t*)&CODE->insts->items[PC]);
            PC += sizeof(uint8_t);
#line 50 "src/insts.def"
            YogVal args[argc];
            unsigned int i = 0;
            for (i = 0; i < argc; i++) {
                args[i] = POP();
            }
            YogThread_call_command(ENV, command, argc, args);

#line 70 "src/thread.inc"
            break;
        }
#line 73 "src/thread.inc"
    case OP(MAKE_FUNC):
        {
            Yog_assert(env, 0 < YogValArray_size(env, STACK), "");
            YogVal code = POP();
            YogVal func = YogVal_nil();
#line 63 "src/insts.def"
            YogGCObj* gcobj = YOGVAL_GCOBJ(code);
            Yog_assert(ENV, gcobj->type == GCOBJ_CODE, "Object isn't YogCode.");
            YogCode* c = (YogCode*)gcobj;
        
            YogFunc* f = YogFunc_new(ENV);
            f->code = c;
            func = YogVal_gcobj(YOGGCOBJ(f));

#line 87 "src/thread.inc"
            PUSH(func);
            break;
        }
#line 91 "src/thread.inc"
    case OP(CALL_FUNC):
        {
            Yog_assert(env, PC < YogByteArray_size(env, CODE->insts), "");
            uint8_t argc = *((uint8_t*)&CODE->insts->items[PC]);
            PC += sizeof(uint8_t);
#line 77 "src/insts.def"
            YogVal args[argc];
            unsigned int i = 0;
            for (i = 0; i < argc; i++) {
                args[i] = POP();
            }
        
            YogVal callee = POP();
            YogGCObj* gcobj = YOGVAL_GCOBJ(callee);
            Yog_assert(ENV, gcobj->type == GCOBJ_FUNC, "Callee isn't function.");
            YogFunc* func = (YogFunc*)gcobj;
            YogCode* new_code = func->code;
            YogFrame* new_frame = YogFrame_new(ENV);
            LOCAL_VARS(new_frame) = YogValArray_new(ENV, new_code->local_vars_count);
            new_frame->stack = YogValArray_new(ENV, new_code->stack_size);
            FRAME = new_frame;
            PC = 0;
            CODE = new_code;

#line 115 "src/thread.inc"
            break;
        }
#line 118 "src/thread.inc"
    case OP(LOAD_PKG):
        {
            Yog_assert(env, PC < YogByteArray_size(env, CODE->insts), "");
            ID id = *((ID*)&CODE->insts->items[PC]);
            PC += sizeof(ID);
            YogVal val = YogVal_nil();
#line 101 "src/insts.def"
            YogVal key = YogVal_symbol(id);
            if (!YogTable_lookup(ENV, PKG_VARS(FRAME), key, &val)) {
                Yog_assert(ENV, FALSE, "Can't find package var.");
            }

#line 130 "src/thread.inc"
            PUSH(val);
            break;
        }
/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=c
 */
