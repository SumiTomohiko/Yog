
def make_dirs(path)
  parent = dirname(path)
  if (parent != ".") && (parent != "/")
    make_dirs(parent)
  end
  try
    mkdir(path)
  except EEXIST
  end
end

def dirname(path)
  if path == ""
    return "."
  end
  if path == PATH_SEPARATOR
    return PATH_SEPARATOR
  end
  if path[-1] == PATH_SEPARATOR
    return dirname(path.slice(0, path.size - 1))
  end
  if (path.get(0, "") == PATH_SEPARATOR) && (path.get(1, "") == PATH_SEPARATOR)
    return dirname(path.slice(1))
  end
  if (pos = path.rfind(PATH_SEPARATOR)) < 0
    return "."
  end
  return path.slice(0, pos)
end

def loop(&block)
  n = 0
  while true
    block(n)
    n += 1
  end
end

def partial(f, *args, **kw, &block=nil)
  def g(*v, **k, &b=nil)
    p = args + v
    q = kw + k
    if b != nil
      return f(*p, **q, &b)
    elif block != nil
      return f(*p, **q, &block)
    else
      return f(*p, **q)
    end
  end

  return g
end

def include(mod)
  def f(clazz)
    return include_module(clazz, mod)
  end

  return f
end

def bind(obj)
  def f(g)
    return g.descr_get(obj)
  end

  return f
end

def __recurse__(obj, f, g)
  stack = get_current_thread().__recursive_stack__
  if stack.include?(obj)
    return f(obj)
  end

  stack.push(obj)
  try
    retval = g(obj)
  finally
    stack.pop()
  end

  return retval
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
