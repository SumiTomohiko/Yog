
def loop(&block)
  n = 0
  while true
    block(n)
    n += 1
  end
end

def partial(f, *args, **kw)
  def g(*v, **k)
    return f(*(args + v), **(kw + k))
  end

  return g
end

def include(mod)
  def f(clazz)
    return include_module(clazz, mod)
  end

  return f
end

def bind(obj)
  def f(g)
    return g.descr_get(obj)
  end

  return f
end

def __recurse__(obj, f, g)
  stack = get_current_thread().__recursive_stack__
  if stack.include?(obj)
    return f(obj)
  end

  stack.push(obj)
  try
    retval = g(obj)
  finally
    stack.pop()
  end

  return retval
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
