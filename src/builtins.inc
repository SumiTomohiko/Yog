"\n"
"def partial(f, *args, **kw)\n"
"  def g(*v, **k)\n"
"    return f(*(args + v), **(kw + k))\n"
"  end\n"
"\n"
"  return g\n"
"end\n"
"\n"
"def include(mod)\n"
"  def f(clazz)\n"
"    return include_module(clazz, mod)\n"
"  end\n"
"\n"
"  return f\n"
"end\n"
"\n"
"def bind(obj)\n"
"  def f(g)\n"
"    return g.descr_get(obj)\n"
"  end\n"
"\n"
"  return f\n"
"end\n"
"\n"
"def __recurse__(obj, f, g)\n"
"  stack = get_current_thread().__recursive_stack__\n"
"  if stack.include?(obj)\n"
"    return f(obj)\n"
"  end\n"
"\n"
"  stack.push(obj)\n"
"  try\n"
"    retval = g(obj)\n"
"  finally\n"
"    stack.pop()\n"
"  end\n"
"\n"
"  return retval\n"
"end\n"
"\n"
