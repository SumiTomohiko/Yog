
from os.path import splitext

def define_rules_for_yog():
    targets = "yog"
    sources = glob("*.c") + [
            "gc/generational.c",
            "gc/copying.c",
            "gc/mark-sweep-compact.c"]
    corgi_dir = "{top_dir}/corgi"
    libffi_dir = "{top_dir}/libffi"
    BigDigits_dir = "{top_dir}/BigDigits"
    includes = [
            "{top_dir}/include",
            corgi_dir + "/include",
            libffi_dir + "/include",
            BigDigits_dir]
    cflags = ["-Wall", "-Werror", "-O2", "-g"]
    lib = ["m", "pthread"]
    linkflags = "-export-dynamic"
    stlib = ["corgi", "ffi", "BigDigits"]
    stlibpath = [
            corgi_dir + "/src/.libs",
            libffi_dir + "/.libs",
            BigDigits_dir + "/build"]
    program(**locals())

def define_rules_for_builtin_script():
    for source in glob("*.yog"):
        base, ext = splitext(source)
        if base == "yog2inc":
            continue
        command(
                commands="yog yog2inc.yog {sources} {targets}",
                targets=base + ".inc",
                sources=source)

def define_rules_for_parser():
    header = "{top_dir}/include/yog/token.h"
    fmt ="{{top_dir}}/tools/lemon/lemon header={header} parser.y"
    command(
            commands=fmt.format(**locals()),
            targets=[header, "parser.c"],
            sources=["parser.y", "parser.lt"])

def define_rules_for_errno():
    script = "{top_dir}/tools/make_errno.yog"
    source = "errno"
    command(
            commands="yog {script} {source} {{targets}}".format(**locals()),
            targets=source + ".inc",
            sources=[script, source])

def build():
    define_rules_for_yog()
    define_rules_for_builtin_script()
    define_rules_for_parser()
    define_rules_for_errno()

# vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=python
