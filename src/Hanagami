
from os.path import join, splitext

def define_rules_for_yog():
    target = "yog"
    sources = glob("*.c") + [
            "gc/generational.c",
            "gc/copying.c",
            "gc/mark-sweep-compact.c"]
    if "parser.c" not in sources:
        # FIXME: This is a dirty way.
        sources += ["parser.c"]
    corgi_dir = "{top_dir}/corgi"
    libffi_dir = "{top_dir}/libffi"
    BigDigits_dir = "{top_dir}/BigDigits"
    includes = [
            join("{top_dir}", "include"),
            join(corgi_dir, "include"),
            join(libffi_dir, "include"),
            BigDigits_dir]
    cflags = ["-Wall", "-Werror", "-O2", "-g"]
    lib = ["m", "pthread"]
    linkflags = "-export-dynamic"
    stlib = ["corgi", "ffi", "BigDigits"]
    stlibpath = [
            join(corgi_dir, "src/.libs"),
            join(libffi_dir, ".libs"),
            BigDigits_dir]
    program(**locals())

def define_rules_for_builtin_script():
    for source in glob("*.yog"):
        base, ext = splitext(source)
        if base == "yog2inc":
            continue
        command(
                commands="yog yog2inc.yog {sources} {targets}",
                targets=base + ".inc",
                sources=source)

def define_rules_for_parser():
    header = "{top_dir}/include/yog/token.h"
    fmt ="{{tools_dir}}/lemon/lemon header={header} parser.y"
    command(
            commands=fmt.format(**locals()),
            targets=[header, "parser.c"],
            sources=["parser.y", "parser.lt"])

def define_rules_for_errno():
    script = "{tools_dir}/make_errno.yog"
    source = "errno"
    fmt = "yog {script} {source} {{targets}}"
    command(
            commands=fmt.format(**locals()),
            targets=source + ".inc",
            sources=[script, source])

def define_rules_for_insts():
    defs = "insts.def"
    script = "{tools_dir}/inst.py"
    commands = "python {script} {defs} {{top_dir}}".format(**locals())
    sources = [defs, script]
    command(
            commands=commands,
            targets="eval.inc",
            sources=sources)
    for target in [
            "code.inc",
            "compile.inc",
            "inst.c",
            "{top_dir}/include/yog/inst.h",
            "{top_dir}/include/yog/opcodes.h"]:
        command(
                commands=commands,
                targets=target,
                sources=sources + [target + ".tmpl"])

def define_rules_for_charset(script, targets, source):
    command(
            commands="python {script}".format(**locals()),
            targets=targets,
            sources=[script, source])

def define_rules_for_shift_jis():
    script = "{tools_dir}/make_shift_jis_tables.py"
    targets= [
            "shift_jis2yog_hankaku.inc",
            "shift_jis2yog_zenkaku.inc",
            "yog2shift_jis1.inc",
            "yog2shift_jis2.inc",
            "yog2shift_jis3.inc"]
    define_rules_for_charset(script, targets, "sjis-0213-2004-std.txt")

def define_rules_for_euc_jp():
    script = "{tools_dir}/make_euc_jp_tables.py"
    targets = [
            "euc_jp2yog_zenkaku.inc",
            "euc_jp2yog_hankaku.inc",
            "euc_jp2yog_3bytes.inc",
            "yog2euc_jp1.inc",
            "yog2euc_jp2.inc",
            "yog2euc_jp3.inc"]
    define_rules_for_charset(script, targets, "euc-jis-2004-std.txt")

def define_rules_for_keywords():
    source = "keywords"
    command(
            commands="gperf {sources} > {targets}",
            targets=source + ".inc",
            sources=source)

def build():
    define_rules_for_yog()
    define_rules_for_builtin_script()
    define_rules_for_parser()
    define_rules_for_errno()
    define_rules_for_insts()
    define_rules_for_shift_jis()
    define_rules_for_euc_jp()
    define_rules_for_keywords()

# vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=python
