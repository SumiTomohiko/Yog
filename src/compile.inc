/**
 * This file was generated by "tools/inst.py src/insts.def" automatically.
 * DO NOT TOUCH!!
 */


static void 
CompileData_append_load_special(YogEnv* env, CompileData* data, ID id)
{
    YogInst* inst = inst_new(env);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(LOAD_SPECIAL);

    LOAD_SPECIAL_ID(inst) = id;

    append_inst(data, inst);

    data->pc += Yog_get_inst_size(INST_OPCODE(inst));
}

static void 
CompileData_append_pop(YogEnv* env, CompileData* data)
{
    YogInst* inst = inst_new(env);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(POP);


    append_inst(data, inst);

    data->pc += Yog_get_inst_size(INST_OPCODE(inst));
}

static void 
CompileData_append_push_const(YogEnv* env, CompileData* data, uint8_t index)
{
    YogInst* inst = inst_new(env);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(PUSH_CONST);

    PUSH_CONST_INDEX(inst) = index;

    append_inst(data, inst);

    data->pc += Yog_get_inst_size(INST_OPCODE(inst));
}

static void 
CompileData_append_call_method(YogEnv* env, CompileData* data, ID method, uint8_t argc, uint8_t kwargc, uint8_t blockargc, uint8_t varargc, uint8_t varkwargc)
{
    YogInst* inst = inst_new(env);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(CALL_METHOD);

    CALL_METHOD_METHOD(inst) = method;
    CALL_METHOD_ARGC(inst) = argc;
    CALL_METHOD_KWARGC(inst) = kwargc;
    CALL_METHOD_BLOCKARGC(inst) = blockargc;
    CALL_METHOD_VARARGC(inst) = varargc;
    CALL_METHOD_VARKWARGC(inst) = varkwargc;

    append_inst(data, inst);

    data->pc += Yog_get_inst_size(INST_OPCODE(inst));
}

static void 
CompileData_append_store_pkg(YogEnv* env, CompileData* data, ID id)
{
    YogInst* inst = inst_new(env);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(STORE_PKG);

    STORE_PKG_ID(inst) = id;

    append_inst(data, inst);

    data->pc += Yog_get_inst_size(INST_OPCODE(inst));
}

static void 
CompileData_append_store_local(YogEnv* env, CompileData* data, uint8_t index)
{
    YogInst* inst = inst_new(env);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(STORE_LOCAL);

    STORE_LOCAL_INDEX(inst) = index;

    append_inst(data, inst);

    data->pc += Yog_get_inst_size(INST_OPCODE(inst));
}

static void 
CompileData_append_call_command(YogEnv* env, CompileData* data, ID command, uint8_t argc, uint8_t kwargc, uint8_t blockargc, uint8_t varargc, uint8_t varkwargc)
{
    YogInst* inst = inst_new(env);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(CALL_COMMAND);

    CALL_COMMAND_COMMAND(inst) = command;
    CALL_COMMAND_ARGC(inst) = argc;
    CALL_COMMAND_KWARGC(inst) = kwargc;
    CALL_COMMAND_BLOCKARGC(inst) = blockargc;
    CALL_COMMAND_VARARGC(inst) = varargc;
    CALL_COMMAND_VARKWARGC(inst) = varkwargc;

    append_inst(data, inst);

    data->pc += Yog_get_inst_size(INST_OPCODE(inst));
}

static void 
CompileData_append_make_package_method(YogEnv* env, CompileData* data)
{
    YogInst* inst = inst_new(env);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(MAKE_PACKAGE_METHOD);


    append_inst(data, inst);

    data->pc += Yog_get_inst_size(INST_OPCODE(inst));
}

static void 
CompileData_append_call_function(YogEnv* env, CompileData* data, uint8_t argc, uint8_t kwargc, uint8_t blockargc, uint8_t varargc, uint8_t varkwargc)
{
    YogInst* inst = inst_new(env);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(CALL_FUNCTION);

    CALL_FUNCTION_ARGC(inst) = argc;
    CALL_FUNCTION_KWARGC(inst) = kwargc;
    CALL_FUNCTION_BLOCKARGC(inst) = blockargc;
    CALL_FUNCTION_VARARGC(inst) = varargc;
    CALL_FUNCTION_VARKWARGC(inst) = varkwargc;

    append_inst(data, inst);

    data->pc += Yog_get_inst_size(INST_OPCODE(inst));
}

static void 
CompileData_append_load_pkg(YogEnv* env, CompileData* data, ID id)
{
    YogInst* inst = inst_new(env);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(LOAD_PKG);

    LOAD_PKG_ID(inst) = id;

    append_inst(data, inst);

    data->pc += Yog_get_inst_size(INST_OPCODE(inst));
}

static void 
CompileData_append_load_local(YogEnv* env, CompileData* data, uint8_t index)
{
    YogInst* inst = inst_new(env);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(LOAD_LOCAL);

    LOAD_LOCAL_INDEX(inst) = index;

    append_inst(data, inst);

    data->pc += Yog_get_inst_size(INST_OPCODE(inst));
}

static void 
CompileData_append_jump(YogEnv* env, CompileData* data, struct YogInst* dest)
{
    YogInst* inst = inst_new(env);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(JUMP);

    JUMP_DEST(inst) = dest;

    append_inst(data, inst);

    data->pc += Yog_get_inst_size(INST_OPCODE(inst));
}

static void 
CompileData_append_jump_if_false(YogEnv* env, CompileData* data, struct YogInst* dest)
{
    YogInst* inst = inst_new(env);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(JUMP_IF_FALSE);

    JUMP_IF_FALSE_DEST(inst) = dest;

    append_inst(data, inst);

    data->pc += Yog_get_inst_size(INST_OPCODE(inst));
}

static void 
CompileData_append_dup(YogEnv* env, CompileData* data)
{
    YogInst* inst = inst_new(env);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(DUP);


    append_inst(data, inst);

    data->pc += Yog_get_inst_size(INST_OPCODE(inst));
}

static void 
CompileData_append_make_package_block(YogEnv* env, CompileData* data)
{
    YogInst* inst = inst_new(env);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(MAKE_PACKAGE_BLOCK);


    append_inst(data, inst);

    data->pc += Yog_get_inst_size(INST_OPCODE(inst));
}

static void 
CompileData_append_make_klass(YogEnv* env, CompileData* data)
{
    YogInst* inst = inst_new(env);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(MAKE_KLASS);


    append_inst(data, inst);

    data->pc += Yog_get_inst_size(INST_OPCODE(inst));
}

static void 
CompileData_append_make_method(YogEnv* env, CompileData* data)
{
    YogInst* inst = inst_new(env);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(MAKE_METHOD);


    append_inst(data, inst);

    data->pc += Yog_get_inst_size(INST_OPCODE(inst));
}


static YogBinary* 
insts2bin(YogEnv* env, YogInst* inst) 
{
#define INIT_BIN_SIZE   (0)
    YogBinary* code = YogBinary_new(env, INIT_BIN_SIZE);
#undef INIT_BIN_SIZE

    while (inst != NULL) {
        if (inst->type == INST_OP) {
            switch (INST_OPCODE(inst)) {

            case OP(LOAD_SPECIAL):
                {
                    YogBinary_push_uint8(env, code, OP(LOAD_SPECIAL));
                    YogBinary_push_id(env, code, LOAD_SPECIAL_ID(inst));
                    break;
                }
            case OP(POP):
                {
                    YogBinary_push_uint8(env, code, OP(POP));
                    break;
                }
            case OP(PUSH_CONST):
                {
                    YogBinary_push_uint8(env, code, OP(PUSH_CONST));
                    YogBinary_push_uint8(env, code, PUSH_CONST_INDEX(inst));
                    break;
                }
            case OP(CALL_METHOD):
                {
                    YogBinary_push_uint8(env, code, OP(CALL_METHOD));
                    YogBinary_push_id(env, code, CALL_METHOD_METHOD(inst));
                    YogBinary_push_uint8(env, code, CALL_METHOD_ARGC(inst));
                    YogBinary_push_uint8(env, code, CALL_METHOD_KWARGC(inst));
                    YogBinary_push_uint8(env, code, CALL_METHOD_BLOCKARGC(inst));
                    YogBinary_push_uint8(env, code, CALL_METHOD_VARARGC(inst));
                    YogBinary_push_uint8(env, code, CALL_METHOD_VARKWARGC(inst));
                    break;
                }
            case OP(STORE_PKG):
                {
                    YogBinary_push_uint8(env, code, OP(STORE_PKG));
                    YogBinary_push_id(env, code, STORE_PKG_ID(inst));
                    break;
                }
            case OP(STORE_LOCAL):
                {
                    YogBinary_push_uint8(env, code, OP(STORE_LOCAL));
                    YogBinary_push_uint8(env, code, STORE_LOCAL_INDEX(inst));
                    break;
                }
            case OP(CALL_COMMAND):
                {
                    YogBinary_push_uint8(env, code, OP(CALL_COMMAND));
                    YogBinary_push_id(env, code, CALL_COMMAND_COMMAND(inst));
                    YogBinary_push_uint8(env, code, CALL_COMMAND_ARGC(inst));
                    YogBinary_push_uint8(env, code, CALL_COMMAND_KWARGC(inst));
                    YogBinary_push_uint8(env, code, CALL_COMMAND_BLOCKARGC(inst));
                    YogBinary_push_uint8(env, code, CALL_COMMAND_VARARGC(inst));
                    YogBinary_push_uint8(env, code, CALL_COMMAND_VARKWARGC(inst));
                    break;
                }
            case OP(MAKE_PACKAGE_METHOD):
                {
                    YogBinary_push_uint8(env, code, OP(MAKE_PACKAGE_METHOD));
                    break;
                }
            case OP(CALL_FUNCTION):
                {
                    YogBinary_push_uint8(env, code, OP(CALL_FUNCTION));
                    YogBinary_push_uint8(env, code, CALL_FUNCTION_ARGC(inst));
                    YogBinary_push_uint8(env, code, CALL_FUNCTION_KWARGC(inst));
                    YogBinary_push_uint8(env, code, CALL_FUNCTION_BLOCKARGC(inst));
                    YogBinary_push_uint8(env, code, CALL_FUNCTION_VARARGC(inst));
                    YogBinary_push_uint8(env, code, CALL_FUNCTION_VARKWARGC(inst));
                    break;
                }
            case OP(LOAD_PKG):
                {
                    YogBinary_push_uint8(env, code, OP(LOAD_PKG));
                    YogBinary_push_id(env, code, LOAD_PKG_ID(inst));
                    break;
                }
            case OP(LOAD_LOCAL):
                {
                    YogBinary_push_uint8(env, code, OP(LOAD_LOCAL));
                    YogBinary_push_uint8(env, code, LOAD_LOCAL_INDEX(inst));
                    break;
                }
            case OP(JUMP):
                {
                    YogBinary_push_uint8(env, code, OP(JUMP));
                    YogBinary_push_pc(env, code, LABEL_POS(JUMP_DEST(inst)));
                    break;
                }
            case OP(JUMP_IF_FALSE):
                {
                    YogBinary_push_uint8(env, code, OP(JUMP_IF_FALSE));
                    YogBinary_push_pc(env, code, LABEL_POS(JUMP_IF_FALSE_DEST(inst)));
                    break;
                }
            case OP(DUP):
                {
                    YogBinary_push_uint8(env, code, OP(DUP));
                    break;
                }
            case OP(MAKE_PACKAGE_BLOCK):
                {
                    YogBinary_push_uint8(env, code, OP(MAKE_PACKAGE_BLOCK));
                    break;
                }
            case OP(MAKE_KLASS):
                {
                    YogBinary_push_uint8(env, code, OP(MAKE_KLASS));
                    break;
                }
            case OP(MAKE_METHOD):
                {
                    YogBinary_push_uint8(env, code, OP(MAKE_METHOD));
                    break;
                }
            default:
                Yog_assert(env, FALSE, "Unkown instruction.");
                break;
            }
        }

        inst = inst->next;
    }

    return code;
}

/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=c
 */
