/**
 * This file was generated by "tools/inst.py src/insts.def" automatically.
 * DO NOT TOUCH!!
 */


static void 
CompileData_add_load_special(YogEnv* env, CompileData* data, unsigned int lineno, ID id)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(LOAD_SPECIAL);

    LOAD_SPECIAL_ID(inst) = id;

    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_pop(YogEnv* env, CompileData* data, unsigned int lineno)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(POP);


    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_push_const(YogEnv* env, CompileData* data, unsigned int lineno, uint8_t index)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(PUSH_CONST);

    PUSH_CONST_INDEX(inst) = index;

    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_make_string(YogEnv* env, CompileData* data, unsigned int lineno, uint8_t index)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(MAKE_STRING);

    MAKE_STRING_INDEX(inst) = index;

    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_call_method(YogEnv* env, CompileData* data, unsigned int lineno, ID method, uint8_t argc, uint8_t kwargc, uint8_t blockargc, uint8_t varargc, uint8_t varkwargc)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(CALL_METHOD);

    CALL_METHOD_METHOD(inst) = method;
    CALL_METHOD_ARGC(inst) = argc;
    CALL_METHOD_KWARGC(inst) = kwargc;
    CALL_METHOD_BLOCKARGC(inst) = blockargc;
    CALL_METHOD_VARARGC(inst) = varargc;
    CALL_METHOD_VARKWARGC(inst) = varkwargc;

    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_store_name(YogEnv* env, CompileData* data, unsigned int lineno, ID id)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(STORE_NAME);

    STORE_NAME_ID(inst) = id;

    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_store_local(YogEnv* env, CompileData* data, unsigned int lineno, uint8_t index)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(STORE_LOCAL);

    STORE_LOCAL_INDEX(inst) = index;

    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_call_command(YogEnv* env, CompileData* data, unsigned int lineno, ID command, uint8_t argc, uint8_t kwargc, uint8_t blockargc, uint8_t varargc, uint8_t varkwargc)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(CALL_COMMAND);

    CALL_COMMAND_COMMAND(inst) = command;
    CALL_COMMAND_ARGC(inst) = argc;
    CALL_COMMAND_KWARGC(inst) = kwargc;
    CALL_COMMAND_BLOCKARGC(inst) = blockargc;
    CALL_COMMAND_VARARGC(inst) = varargc;
    CALL_COMMAND_VARKWARGC(inst) = varkwargc;

    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_make_package_method(YogEnv* env, CompileData* data, unsigned int lineno)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(MAKE_PACKAGE_METHOD);


    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_call_function(YogEnv* env, CompileData* data, unsigned int lineno, uint8_t argc, uint8_t kwargc, uint8_t blockargc, uint8_t varargc, uint8_t varkwargc)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(CALL_FUNCTION);

    CALL_FUNCTION_ARGC(inst) = argc;
    CALL_FUNCTION_KWARGC(inst) = kwargc;
    CALL_FUNCTION_BLOCKARGC(inst) = blockargc;
    CALL_FUNCTION_VARARGC(inst) = varargc;
    CALL_FUNCTION_VARKWARGC(inst) = varkwargc;

    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_load_global(YogEnv* env, CompileData* data, unsigned int lineno, ID id)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(LOAD_GLOBAL);

    LOAD_GLOBAL_ID(inst) = id;

    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_load_name(YogEnv* env, CompileData* data, unsigned int lineno, ID id)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(LOAD_NAME);

    LOAD_NAME_ID(inst) = id;

    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_load_local(YogEnv* env, CompileData* data, unsigned int lineno, uint8_t index)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(LOAD_LOCAL);

    LOAD_LOCAL_INDEX(inst) = index;

    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_jump(YogEnv* env, CompileData* data, unsigned int lineno, struct YogInst* dest)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(JUMP);

    JUMP_DEST(inst) = dest;

    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_jump_if_false(YogEnv* env, CompileData* data, unsigned int lineno, struct YogInst* dest)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(JUMP_IF_FALSE);

    JUMP_IF_FALSE_DEST(inst) = dest;

    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_dup(YogEnv* env, CompileData* data, unsigned int lineno)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(DUP);


    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_make_package_block(YogEnv* env, CompileData* data, unsigned int lineno)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(MAKE_PACKAGE_BLOCK);


    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_make_klass(YogEnv* env, CompileData* data, unsigned int lineno)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(MAKE_KLASS);


    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_make_method(YogEnv* env, CompileData* data, unsigned int lineno)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(MAKE_METHOD);


    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_push_self_name(YogEnv* env, CompileData* data, unsigned int lineno)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(PUSH_SELF_NAME);


    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}

static void 
CompileData_add_ret(YogEnv* env, CompileData* data, unsigned int lineno)
{
    FRAME_DECL_LOCAL(env, data_idx, PTR2VAL(data));

    YogInst* inst = Inst_new(env, lineno);
    inst->type = INST_OP;
    INST_OPCODE(inst) = OP(RET);


    FRAME_LOCAL_PTR(env, data, data_idx);
    add_inst(data, inst);
}


static YogBinary* 
insts2bin(YogEnv* env, YogInst* inst) 
{
    FRAME_DECL_LOCAL(env, inst_idx, PTR2VAL(inst));

#define INIT_BIN_SIZE   (0)
    YogBinary* code = YogBinary_new(env, INIT_BIN_SIZE);
#undef INIT_BIN_SIZE

    FRAME_LOCAL_PTR(env, inst, inst_idx);
    while (inst != NULL) {
        switch (inst->type) {
        case INST_OP:
            {
                switch (INST_OPCODE(inst)) {

                case OP(LOAD_SPECIAL):
                    {
                        YogBinary_push_uint8(env, code, OP(LOAD_SPECIAL));
                        YogBinary_push_id(env, code, LOAD_SPECIAL_ID(inst));
                        break;
                    }
                case OP(POP):
                    {
                        YogBinary_push_uint8(env, code, OP(POP));
                        break;
                    }
                case OP(PUSH_CONST):
                    {
                        YogBinary_push_uint8(env, code, OP(PUSH_CONST));
                        YogBinary_push_uint8(env, code, PUSH_CONST_INDEX(inst));
                        break;
                    }
                case OP(MAKE_STRING):
                    {
                        YogBinary_push_uint8(env, code, OP(MAKE_STRING));
                        YogBinary_push_uint8(env, code, MAKE_STRING_INDEX(inst));
                        break;
                    }
                case OP(CALL_METHOD):
                    {
                        YogBinary_push_uint8(env, code, OP(CALL_METHOD));
                        YogBinary_push_id(env, code, CALL_METHOD_METHOD(inst));
                        YogBinary_push_uint8(env, code, CALL_METHOD_ARGC(inst));
                        YogBinary_push_uint8(env, code, CALL_METHOD_KWARGC(inst));
                        YogBinary_push_uint8(env, code, CALL_METHOD_BLOCKARGC(inst));
                        YogBinary_push_uint8(env, code, CALL_METHOD_VARARGC(inst));
                        YogBinary_push_uint8(env, code, CALL_METHOD_VARKWARGC(inst));
                        break;
                    }
                case OP(STORE_NAME):
                    {
                        YogBinary_push_uint8(env, code, OP(STORE_NAME));
                        YogBinary_push_id(env, code, STORE_NAME_ID(inst));
                        break;
                    }
                case OP(STORE_LOCAL):
                    {
                        YogBinary_push_uint8(env, code, OP(STORE_LOCAL));
                        YogBinary_push_uint8(env, code, STORE_LOCAL_INDEX(inst));
                        break;
                    }
                case OP(CALL_COMMAND):
                    {
                        YogBinary_push_uint8(env, code, OP(CALL_COMMAND));
                        YogBinary_push_id(env, code, CALL_COMMAND_COMMAND(inst));
                        YogBinary_push_uint8(env, code, CALL_COMMAND_ARGC(inst));
                        YogBinary_push_uint8(env, code, CALL_COMMAND_KWARGC(inst));
                        YogBinary_push_uint8(env, code, CALL_COMMAND_BLOCKARGC(inst));
                        YogBinary_push_uint8(env, code, CALL_COMMAND_VARARGC(inst));
                        YogBinary_push_uint8(env, code, CALL_COMMAND_VARKWARGC(inst));
                        break;
                    }
                case OP(MAKE_PACKAGE_METHOD):
                    {
                        YogBinary_push_uint8(env, code, OP(MAKE_PACKAGE_METHOD));
                        break;
                    }
                case OP(CALL_FUNCTION):
                    {
                        YogBinary_push_uint8(env, code, OP(CALL_FUNCTION));
                        YogBinary_push_uint8(env, code, CALL_FUNCTION_ARGC(inst));
                        YogBinary_push_uint8(env, code, CALL_FUNCTION_KWARGC(inst));
                        YogBinary_push_uint8(env, code, CALL_FUNCTION_BLOCKARGC(inst));
                        YogBinary_push_uint8(env, code, CALL_FUNCTION_VARARGC(inst));
                        YogBinary_push_uint8(env, code, CALL_FUNCTION_VARKWARGC(inst));
                        break;
                    }
                case OP(LOAD_GLOBAL):
                    {
                        YogBinary_push_uint8(env, code, OP(LOAD_GLOBAL));
                        YogBinary_push_id(env, code, LOAD_GLOBAL_ID(inst));
                        break;
                    }
                case OP(LOAD_NAME):
                    {
                        YogBinary_push_uint8(env, code, OP(LOAD_NAME));
                        YogBinary_push_id(env, code, LOAD_NAME_ID(inst));
                        break;
                    }
                case OP(LOAD_LOCAL):
                    {
                        YogBinary_push_uint8(env, code, OP(LOAD_LOCAL));
                        YogBinary_push_uint8(env, code, LOAD_LOCAL_INDEX(inst));
                        break;
                    }
                case OP(JUMP):
                    {
                        YogBinary_push_uint8(env, code, OP(JUMP));
                        YogBinary_push_pc(env, code, JUMP_DEST(inst)->pc);
                        break;
                    }
                case OP(JUMP_IF_FALSE):
                    {
                        YogBinary_push_uint8(env, code, OP(JUMP_IF_FALSE));
                        YogBinary_push_pc(env, code, JUMP_IF_FALSE_DEST(inst)->pc);
                        break;
                    }
                case OP(DUP):
                    {
                        YogBinary_push_uint8(env, code, OP(DUP));
                        break;
                    }
                case OP(MAKE_PACKAGE_BLOCK):
                    {
                        YogBinary_push_uint8(env, code, OP(MAKE_PACKAGE_BLOCK));
                        break;
                    }
                case OP(MAKE_KLASS):
                    {
                        YogBinary_push_uint8(env, code, OP(MAKE_KLASS));
                        break;
                    }
                case OP(MAKE_METHOD):
                    {
                        YogBinary_push_uint8(env, code, OP(MAKE_METHOD));
                        break;
                    }
                case OP(PUSH_SELF_NAME):
                    {
                        YogBinary_push_uint8(env, code, OP(PUSH_SELF_NAME));
                        break;
                    }
                case OP(RET):
                    {
                        YogBinary_push_uint8(env, code, OP(RET));
                        break;
                    }
                default:
                    {
                        YOG_ASSERT(env, FALSE, "Unkown instruction.");
                        break;
                    }
                }
                break;
            }
        case INST_ANCHOR:
        case INST_LABEL:
            break;
        default:
            YOG_ASSERT(env, FALSE, "Unknown inst type.");
            break;
        }

        inst = inst->next;
    }

    return code;
}

static int
count_stack_size(YogEnv* env, YogInst* inst) 
{
    int max = 0;
    int size = 0;

    while (inst != NULL) {
        switch (inst->type) {
        case INST_OP:
            {
                int pop_size = 0;
                int push_size = 0;
                switch (INST_OPCODE(inst)) {

                case OP(LOAD_SPECIAL):
                    {
                        pop_size = 0;
                        push_size = 1;
                        break;
                    }
                case OP(POP):
                    {
                        pop_size = 1;
                        push_size = 0;
                        break;
                    }
                case OP(PUSH_CONST):
                    {
                        pop_size = 0;
                        push_size = 1;
                        break;
                    }
                case OP(MAKE_STRING):
                    {
                        pop_size = 0;
                        push_size = 1;
                        break;
                    }
                case OP(CALL_METHOD):
                    {
                        pop_size = CALL_METHOD_ARGC(inst) + 2 * CALL_METHOD_KWARGC(inst) + CALL_METHOD_BLOCKARGC(inst) + CALL_METHOD_VARARGC(inst) + CALL_METHOD_VARKWARGC(inst);
                        push_size = 1;
                        break;
                    }
                case OP(STORE_NAME):
                    {
                        pop_size = 1;
                        push_size = 0;
                        break;
                    }
                case OP(STORE_LOCAL):
                    {
                        pop_size = 1;
                        push_size = 0;
                        break;
                    }
                case OP(CALL_COMMAND):
                    {
                        pop_size = CALL_COMMAND_ARGC(inst) + 2 * CALL_COMMAND_KWARGC(inst) + CALL_COMMAND_BLOCKARGC(inst) + CALL_COMMAND_VARARGC(inst) + CALL_COMMAND_VARKWARGC(inst);
                        push_size = 1;
                        break;
                    }
                case OP(MAKE_PACKAGE_METHOD):
                    {
                        pop_size = 1;
                        push_size = 1;
                        break;
                    }
                case OP(CALL_FUNCTION):
                    {
                        pop_size = CALL_FUNCTION_ARGC(inst) + 2 * CALL_FUNCTION_KWARGC(inst) + CALL_FUNCTION_BLOCKARGC(inst) + CALL_FUNCTION_VARARGC(inst) + CALL_FUNCTION_VARKWARGC(inst);
                        push_size = 1;
                        break;
                    }
                case OP(LOAD_GLOBAL):
                    {
                        pop_size = 0;
                        push_size = 1;
                        break;
                    }
                case OP(LOAD_NAME):
                    {
                        pop_size = 0;
                        push_size = 1;
                        break;
                    }
                case OP(LOAD_LOCAL):
                    {
                        pop_size = 0;
                        push_size = 1;
                        break;
                    }
                case OP(JUMP):
                    {
                        pop_size = 0;
                        push_size = 0;
                        break;
                    }
                case OP(JUMP_IF_FALSE):
                    {
                        pop_size = 1;
                        push_size = 0;
                        break;
                    }
                case OP(DUP):
                    {
                        pop_size = 1;
                        push_size = 2;
                        break;
                    }
                case OP(MAKE_PACKAGE_BLOCK):
                    {
                        pop_size = 1;
                        push_size = 1;
                        break;
                    }
                case OP(MAKE_KLASS):
                    {
                        pop_size = 3;
                        push_size = 1;
                        break;
                    }
                case OP(MAKE_METHOD):
                    {
                        pop_size = 1;
                        push_size = 1;
                        break;
                    }
                case OP(PUSH_SELF_NAME):
                    {
                        pop_size = 0;
                        push_size = 1;
                        break;
                    }
                case OP(RET):
                    {
                        pop_size = 1;
                        push_size = 1;
                        break;
                    }
                default:
                    {
                        YOG_ASSERT(env, FALSE, "Unkown instruction.");
                        break;
                    }
                }
                size += push_size - pop_size;
                YOG_ASSERT(env, 0 <= size, "Too many pops.");
                if (max < size) {
                    max = size;
                }
                break;
            }
        case INST_ANCHOR:
        case INST_LABEL:
            break;
        default:
            YOG_ASSERT(env, FALSE, "Unknown inst type.");
            break;
        }

        inst = inst->next;
    }

    return max;
}

/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=c
 */
