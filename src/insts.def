/**
 * inst <name>
 * (operand_type operand_name, ...)
 * (pop_value, ...)
 * <- top bottom ->
 * (push_value, ...)
 * <- top bottom ->
 * {
 *      C code.
 * }
 */

inst load_special
(ID id) 
()
(val) 
{
}

inst pop
()
(val)
()
{
}

inst push_const
(uint8_t index)
()
(val)
{
    val = CONSTS(index);
}

inst make_string 
(uint8_t index)
()
(val) 
{
    YogVal c = CONSTS(index);
    val = YogString_clone(ENV, c);
}

inst store_name
(ID id) 
(val) 
()
{
    YogVal key = ID2VAL(id);
    YogVal vars = NAME_VARS(CUR_FRAME);
    YogTable_insert(ENV, vars, key, val);
}

inst store_local
(uint8_t index)
(val)
()
{
    YogVal vars = LOCAL_VARS(CUR_FRAME);
    PTR_AS(YogValArray, vars)->items[index] = val;
}

inst make_function
()
(code)
(f)
{
    f = YogFunction_new(ENV);
    setup_script_function(ENV, f, code);
}

inst call_function
(uint8_t argc, uint8_t kwargc, uint8_t blockargc, uint8_t varargc, uint8_t varkwargc)
(...) depth: argc + 2 * kwargc + blockargc + varargc + varkwargc
(...) depth: 1
{
    POP_ARGS(args, kwargs, blockarg, vararg, varkwarg);
    YogVal callee = POP();

    YogVal klass = YogVal_get_klass(env, callee);
    YOG_ASSERT(env, PTR_AS(YogKlass, klass)->exec, "uncallable");
    PTR_AS(YogKlass, klass)->exec(env, callee, argc, args, blockarg, kwargc, kwargs, vararg, varkwarg);

    POP_LOCALS(ENV);
    POP_LOCALS(ENV);
    POP_LOCALS(ENV);
}

inst load_global
(ID id)
()
(val) 
{
    YogVal globals = SCRIPT_FRAME(CUR_FRAME)->globals;
    if (!YogTable_lookup(ENV, globals, ID2VAL(id), &val)) {
        val = lookup_builtins(ENV, id);
    }
    if (IS_UNDEF(val)) {
        const char* name = YogVM_id2name(ENV, ENV->vm, id);
        YogError_raise_NameError(env, "name '%s' is not defined", name);
    }
}

inst load_name
(ID id) 
()
(val)
{
    YogVal key = ID2VAL(id);
    if (!YogTable_lookup(ENV, NAME_VARS(CUR_FRAME), key, &val)) {
        val = lookup_builtins(ENV, id);
    }
    if (IS_UNDEF(val)) {
        const char* name = YogVM_id2name(ENV, ENV->vm, id);
        YogError_raise_NameError(env, "name '%s' is not defined", name);
    }
}

inst load_local
(uint8_t index) 
()
(val)
{
    YogVal vars = LOCAL_VARS(CUR_FRAME);
    val = PTR_AS(YogValArray, vars)->items[index];
}

inst jump
(pc_t dest)
()
()
{
    JUMP(dest);
}

inst jump_if_false
(pc_t dest)
(val)
()
{
    if (IS_NIL(val) || IS_FALSE(val)) {
        JUMP(dest);
    }
}

inst dup 
()
(val)
(val, val)
{
}

inst make_klass
()
(code, super, name)
(...) depth: 1
{
    YogVal kls = YUNDEF;
    YogVal frame = YUNDEF;
    YogVal attrs = YUNDEF;
    PUSH_LOCALS3(ENV, kls, frame, attrs);

    kls = YogKlass_new(ENV, NULL, super);
    PTR_AS(YogKlass, kls)->name = VAL2ID(name);
    PTR_AS(YogObj, kls)->attrs = YUNDEF;
    attrs = YogTable_new_symbol_table(ENV);
    PTR_AS(YogObj, kls)->attrs = attrs;

    frame = YogKlassFrame_new(ENV);
    setup_script_frame(ENV, frame, code);
    PTR_AS(YogNameFrame, frame)->self = kls;
    PTR_AS(YogNameFrame, frame)->vars = attrs;
    PTR_AS(YogScriptFrame, frame)->globals = PTR_AS(YogScriptFrame, CUR_FRAME)->globals;

    PUSH_FRAME(frame);

    POP_LOCALS(ENV);
}

inst push_self_name
()
()
(self)
{
    self = PTR_AS(YogNameFrame, CUR_FRAME)->self;
}

inst ret
()
(val)
(val)
{
    POP_FRAME();
    PC = SCRIPT_FRAME(CUR_FRAME)->pc;
}

inst store_nonlocal
(uint8_t level, uint8_t index) 
(val)
() 
{
    YogVal* ptr = get_outer_vars_ptr(ENV, level, index);
    *ptr = val;
}

inst load_nonlocal 
(uint8_t level, uint8_t index) 
()
(val)
{
    YogVal* ptr = get_outer_vars_ptr(ENV, level, index);
    val = *ptr;
}

inst store_global 
(ID name) 
(val) 
()
{
    YogVal globals = SCRIPT_FRAME(CUR_FRAME)->globals;
    YogTable_insert(ENV, globals, ID2VAL(name), val);
}

inst load_attr
(ID name)
(val)
(retval)
{
    retval = YogVal_get_attr(ENV, val, name);
}

inst make_array
(uint8_t size)
(...) depth: size
(array)
{
    array = YogArray_of_size(ENV, size);
    uint_t i;
    for (i = 0; i < size; i++) {
        YogVal body = PTR_AS(YogArray, array)->body;
        PTR_AS(YogValArray, body)->items[size - i - 1] = POP();
    }
    PTR_AS(YogArray, array)->size = size;
}

inst finish
()
(val)
()
{
    POP_BUF();
    POP_FRAME();
    RETURN(ENV, val);
}

inst print_top
()
(val)
()
{
    YogVal s = YogEval_call_method(ENV, val, "to_s", 0, NULL);
    YOG_ASSERT(ENV, IS_OBJ_OF(ENV, s, cString), "object isn't string");
    printf("=> %s\n", STRING_CSTR(s));
}

inst store_attr
(ID name)
(obj, val)
()
{
    YogVal_set_attr(ENV, obj, name, val);
}

/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=c
 */
