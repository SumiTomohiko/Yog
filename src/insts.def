/**
 * inst <name>
 * (operand_type operand_name, ...)
 * (pop_value, ...)
 * <- top bottom ->
 * (push_value, ...)
 * <- top bottom ->
 * {
 *      C code.
 * }
 */

inst push_const
(uint8_t index)
()
(val)
{
    val = CONSTS(index);
}

inst call_method
(ID method, uint8_t argc)
(...)
(...)
{
    YogVal args[argc];
    unsigned int i = 0;
    for (i = 0; i < argc; i++) {
        args[i] = POP();
    }
    YogVal receiver = POP();
    YogVal ret = YogThread_call_method_id(ENV, receiver, method, argc, args);
    PUSH(ret);
}

inst store_pkg
(ID id) 
(val) 
()
{
    YogVal key = YogVal_symbol(id);
    YogTable_insert(ENV, PKG_VARS(FRAME), key, val);
}

inst call_command 
(ID command, uint8_t argc) 
()
()
{
    YogVal args[argc];
    unsigned int i = 0;
    for (i = 0; i < argc; i++) {
        args[i] = POP();
    }
    YogThread_call_command(ENV, command, argc, args);
}

inst make_func
()
(code)
(func)
{
    YogGCObj* gcobj = YOGVAL_GCOBJ(code);
    Yog_assert(ENV, gcobj->type == GCOBJ_CODE, "Object isn't YogCode.");
    YogCode* c = (YogCode*)gcobj;

    YogFunc* f = YogFunc_new(ENV);
    f->code = c;
    func = YogVal_gcobj(YOGGCOBJ(f));
}

inst call_func
(uint8_t argc) 
(...)
(...)
{
    YogVal args[argc];
    unsigned int i = 0;
    for (i = 0; i < argc; i++) {
        args[i] = POP();
    }

    YogVal callee = POP();
    YogGCObj* gcobj = YOGVAL_GCOBJ(callee);
    Yog_assert(ENV, gcobj->type == GCOBJ_FUNC, "Callee isn't function.");
    YogFunc* func = (YogFunc*)gcobj;
    YogCode* new_code = func->code;
    Yog_assert(ENV, new_code->argc == argc, "Arguments count miss match.");

    YogFrame* new_frame = YogFrame_new(ENV);
    LOCAL_VARS(new_frame) = YogValArray_new(ENV, new_code->local_vars_count);
    for (i = 0; i < argc; i++) {
        LOCAL_VARS(new_frame)->items[i] = args[i];
    }
    new_frame->stack = YogValArray_new(ENV, new_code->stack_size);
    FRAME = new_frame;
    PC = 0;
    CODE = new_code;
}

inst load_pkg
(ID id) 
()
(val)
{
    YogVal key = YogVal_symbol(id);
    if (!YogTable_lookup(ENV, PKG_VARS(FRAME), key, &val)) {
        Yog_assert(ENV, FALSE, "Can't find package var.");
    }
}

inst load_local
(uint8_t index) 
()
(val)
{
    val = LOCAL_VARS(FRAME)->items[index];
}

/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=c
 */
