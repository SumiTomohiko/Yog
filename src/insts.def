/**
 * inst <name>
 * (operand_type operand_name, ...)
 * (pop_value, ...)
 * <- top bottom ->
 * (push_value, ...)
 * <- top bottom ->
 * {
 *      C code.
 * }
 */

inst load_special
(ID id)
()
(val)
{
}

inst pop
()
(val)
()
{
}

inst push_const
(uint8_t index)
()
(val)
{
    val = CONSTS(index);
}

inst make_string
(uint8_t index)
()
(val)
{
    YogVal c = CONSTS(index);
    val = YogString_clone(env, c);
}

inst store_name
(ID id)
(val)
()
{
    YogVal key = ID2VAL(id);
    YogVal vars = NAME_VARS(CUR_FRAME);
    YogTable_insert(env, vars, key, val);
}

inst store_local
(uint8_t index)
(val)
()
{
    YogVal vars = LOCAL_VARS(CUR_FRAME);
    PTR_AS(YogValArray, vars)->items[index] = val;
}

inst make_function
()
(code)
(f)
{
    f = YogFunction_new(env);
    setup_script_function(env, f, code);
}

inst call_function
(uint8_t argc, uint8_t kwargc, uint8_t blockargc, uint8_t varargc, uint8_t varkwargc)
(...) depth: argc + 2 * kwargc + blockargc + varargc + varkwargc
(...) depth: 1
{
    POP_ARGS(args, kwargs, blockarg, vararg, varkwarg);
    YogVal callee = POP();

    YogVal klass = YogVal_get_klass(env, callee);
    YOG_ASSERT(env, PTR_AS(YogKlass, klass)->exec, "uncallable");
    PTR_AS(YogKlass, klass)->exec(env, callee, argc, args, blockarg, kwargc, kwargs, vararg, varkwarg);

    POP_LOCALS(env);
    POP_LOCALS(env);
    POP_LOCALS(env);
}

inst load_global
(ID id)
()
(val)
{
    YogVal globals = SCRIPT_FRAME(CUR_FRAME)->globals;
    if (!YogTable_lookup(env, globals, ID2VAL(id), &val)) {
        val = lookup_builtins(env, id);
    }
    if (IS_UNDEF(val)) {
        const char* name = YogVM_id2name(env, env->vm, id);
        YogError_raise_NameError(env, "name '%s' is not defined", name);
    }
}

inst load_name
(ID id)
()
(val)
{
    YogVal key = ID2VAL(id);
    if (!YogTable_lookup(env, NAME_VARS(CUR_FRAME), key, &val)) {
        val = lookup_builtins(env, id);
    }
    if (IS_UNDEF(val)) {
        const char* name = YogVM_id2name(env, env->vm, id);
        YogError_raise_NameError(env, "name '%s' is not defined", name);
    }
}

inst load_local
(uint8_t index)
()
(val)
{
    YogVal vars = LOCAL_VARS(CUR_FRAME);
    val = PTR_AS(YogValArray, vars)->items[index];
}

inst jump
(pc_t dest)
()
()
{
    JUMP(dest);
}

inst jump_if_true
(pc_t dest)
(val)
()
{
    if (YOG_TEST(val)) {
        JUMP(dest);
    }
}

inst jump_if_false
(pc_t dest)
(val)
()
{
    if (!YOG_TEST(val)) {
        JUMP(dest);
    }
}

inst dup
()
(val)
(val, val)
{
}

inst make_module
(ID name)
(code)
(...) depth: 2
{
    YogVal module = YUNDEF;
    YogVal frame = YUNDEF;
    PUSH_LOCALS2(env, module, frame);

    module = YogModule_new(env);
    PTR_AS(YogModule, module)->name = name;
    PUSH(module);

    frame = YogNameFrame_new(env);
    setup_script_frame(env, frame, code);
    PTR_AS(YogNameFrame, frame)->vars = PTR_AS(YogObj, module)->attrs;
    PTR_AS(YogScriptFrame, frame)->globals = PTR_AS(YogScriptFrame, CUR_FRAME)->globals;

    PUSH_FRAME(frame);

    POP_LOCALS(env);
}

inst make_klass
()
(code, super, name)
(...) depth: 1
{
    YogVal kls = YUNDEF;
    YogVal frame = YUNDEF;
    YogVal attrs = YUNDEF;
    PUSH_LOCALS3(env, kls, frame, attrs);

    kls = YogKlass_new(env, NULL, super);
    PTR_AS(YogKlass, kls)->name = VAL2ID(name);
    PTR_AS(YogObj, kls)->attrs = YUNDEF;
    attrs = YogTable_new_symbol_table(env);
    PTR_AS(YogObj, kls)->attrs = attrs;

    frame = YogKlassFrame_new(env);
    setup_script_frame(env, frame, code);
    PTR_AS(YogNameFrame, frame)->self = kls;
    PTR_AS(YogNameFrame, frame)->vars = attrs;
    PTR_AS(YogScriptFrame, frame)->globals = PTR_AS(YogScriptFrame, CUR_FRAME)->globals;

    PUSH_FRAME(frame);

    POP_LOCALS(env);
}

inst push_self_name
()
()
(self)
{
    self = PTR_AS(YogNameFrame, CUR_FRAME)->self;
}

inst ret
()
(val)
(val)
{
    POP_FRAME();
    PC = SCRIPT_FRAME(CUR_FRAME)->pc;
}

inst store_nonlocal
(uint8_t level, uint8_t index)
(val)
()
{
    YogVal* ptr = get_outer_vars_ptr(env, level, index);
    *ptr = val;
}

inst load_nonlocal
(uint8_t level, uint8_t index)
()
(val)
{
    YogVal* ptr = get_outer_vars_ptr(env, level, index);
    val = *ptr;
}

inst store_global
(ID name)
(val)
()
{
    YogVal globals = SCRIPT_FRAME(CUR_FRAME)->globals;
    YogTable_insert(env, globals, ID2VAL(name), val);
}

inst load_attr
(ID name)
(obj)
(...) depth: 1
{
    YogVal klass = YUNDEF;
    PUSH_LOCAL(env, klass);

    klass = YogVal_get_klass(env, obj);
    GetAttrExecutor exec = PTR_AS(YogKlass, klass)->exec_get_attr;
    if (exec == NULL) {
        exec = exec_get_attr;
    }

    exec(env, obj, name);

    POP_LOCALS(env);
}

inst make_array
(uint8_t size)
(...) depth: size
(array)
{
    array = YogArray_of_size(env, size);
    uint_t i;
    for (i = 0; i < size; i++) {
        YogVal body = PTR_AS(YogArray, array)->body;
        PTR_AS(YogValArray, body)->items[size - i - 1] = POP();
    }
    PTR_AS(YogArray, array)->size = size;
}

inst make_dict
(uint8_t size)
(...) depth: 2 * size
(dict)
{
    YogVal key = YUNDEF;
    YogVal value = YUNDEF;
    PUSH_LOCALS2(env, key, value);

    dict = YogDict_new(env);
    uint_t i;
    for (i = 0; i < size; i++) {
        value = POP();
        key = POP();
        YogDict_set(env, dict, key, value);
    }

    POP_LOCALS(env);
}

inst finish
()
(val)
()
{
    POP_BUF();
    POP_FRAME();
    RETURN(env, val);
}

inst print_top
()
(val)
()
{
    YogVal s = YogEval_call_method(env, val, "to_s", 0, NULL);
    YOG_ASSERT(env, IS_OBJ_OF(env, s, cString), "object isn't string");
    printf("=> %s\n", STRING_CSTR(s));
}

inst store_attr
(ID name)
(obj, val)
()
{
    YogVal attr = YUNDEF;
    YogVal klass_of_obj = YUNDEF;
    YogVal klass_of_attr = YUNDEF;
    PUSH_LOCALS3(env, attr, klass_of_obj, klass_of_attr);

    klass_of_obj = YogVal_get_klass(env, obj);
    BOOL has_attrs;
    if (IS_PTR(obj) && ((PTR_AS(YogBasicObj, obj)->flags & HAS_ATTRS) != 0)) {
        has_attrs = TRUE;
    }
    else {
        has_attrs = FALSE;
    }

    if (has_attrs) {
        attr = YogObj_get_attr(env, obj, name);
    }
    if (IS_UNDEF(attr)) {
        attr = YogObj_get_attr(env, klass_of_obj, name);
    }
    if (!IS_UNDEF(attr)) {
        klass_of_attr = YogVal_get_klass(env, attr);
        void (*exec)(YogEnv*, YogVal, YogVal, YogVal) = PTR_AS(YogKlass, klass_of_attr)->exec_set_descr;
        if (exec != NULL) {
            exec(env, attr, obj, val);
        }
        else if (has_attrs) {
            YogObj_set_attr_id(env, obj, name, val);
        }
        else {
            ID id = PTR_AS(YogKlass, klass_of_obj)->name;
            const char* klass_name = YogVM_id2name(env, env->vm, id);
            YogError_raise_AttributeError(env, "can't set attribute to '%s' object", klass_name);
        }
    }
    else if (has_attrs) {
        YogObj_set_attr_id(env, obj, name, val);
    }
    else {
        ID id = PTR_AS(YogKlass, klass_of_obj)->name;
        YogVM* vm = env->vm;
        const char* klass_name = YogVM_id2name(env, vm, id);
        const char* attr_name = YogVM_id2name(env, vm, name);
        YogError_raise_AttributeError(env, "%s object has no attribute '%s'", klass_name, attr_name);
    }

    POP_LOCALS(env);
}

inst not
()
(val)
(b)
{
    if (YOG_TEST(val)) {
        b = YFALSE;
    }
    else {
        b = YTRUE;
    }
}

/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=c
 */
