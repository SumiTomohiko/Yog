/**
 * inst <name>
 * (operand_type operand_name, ...)
 * (pop_value, ...)
 * <- top bottom ->
 * (push_value, ...)
 * <- top bottom ->
 * {
 *      C code.
 * }
 */

inst load_special
(ID id) 
()
(val) 
{
}

inst pop
()
(val)
()
{
}

inst push_const
(uint8_t index)
()
(val)
{
    val = CONSTS(index);
}

inst make_string 
(uint8_t index)
()
(val) 
{
    YogVal c = CONSTS(index);
    val = YogString_clone(ENV, c);
}

inst call_method
(ID method, uint8_t argc, uint8_t kwargc, uint8_t blockargc, uint8_t varargc, uint8_t varkwargc)
(...) depth: argc + 2 * kwargc + blockargc + varargc + varkwargc
(...) depth: 1
{
    POP_ARGS(args, kwargs, blockarg, vararg, varkwarg);

    YogVal receiver = POP();
    YogVal attr = YogVal_get_attr(ENV, receiver, method);
    call_method(ENV, THREAD, receiver, attr, argc, args, blockarg, kwargc, kwargs, vararg, varkwarg);
}

inst store_name
(ID id) 
(val) 
()
{
    YogVal key = ID2VAL(id);
    YogTable_insert(ENV, NAME_VARS(CUR_FRAME), key, val);
}

inst store_local
(uint8_t index)
(val)
()
{
    LOCAL_VARS(CUR_FRAME)->items[index] = val;
}

inst call_command 
(ID command, uint8_t argc, uint8_t kwargc, uint8_t blockargc, uint8_t varargc, uint8_t varkwargc)
(...) depth: argc + 2 * kwargc + blockargc + varargc + varkwargc
(...) depth: 1
{
    POP_ARGS(args, kwargs, blockarg, vararg, varkwarg);

    YogVal callee = YUNDEF;
    if (!lookup_frame_vars(ENV, CUR_FRAME, command, &callee)) {
        callee = lookup_builtins(ENV, command);
    }

    YogVal unbound_self = YUNDEF;
    call_method(ENV, THREAD, unbound_self, callee, argc, args, blockarg, kwargc, kwargs, vararg, varkwarg);
}

inst make_package_method
()
(code)
(method)
{
    method = YogBoundMethod_new(ENV);
    setup_script_method(ENV, OBJ_AS(YogScriptMethod, method), VAL2PTR(code));
    OBJ_AS(YogBoundMethod, method)->self = NAME_FRAME(CUR_FRAME)->self;
}

inst call_function
(uint8_t argc, uint8_t kwargc, uint8_t blockargc, uint8_t varargc, uint8_t varkwargc)
(...) depth: argc + 2 * kwargc + blockargc + varargc + varkwargc
(...) depth: 1
{
    POP_ARGS(args, kwargs, blockarg, vararg, varkwarg);

    YogVal callee = POP();
    YogVal unbound_self = YUNDEF;
    call_method(ENV, THREAD, unbound_self, callee, argc, args, blockarg, kwargc, kwargs, vararg, varkwarg);
}

inst load_global
(ID id)
()
(val) 
{
    YogTable* globals = SCRIPT_FRAME(CUR_FRAME)->globals;
    if (!YogTable_lookup(ENV, globals, ID2VAL(id), &val)) {
        val = lookup_builtins(ENV, id);
    }
    YOG_ASSERT(ENV, !IS_UNDEF(val), "can't find global variable");
}

inst load_name
(ID id) 
()
(val)
{
    YogVal key = ID2VAL(id);
    if (!YogTable_lookup(ENV, NAME_VARS(CUR_FRAME), key, &val)) {
        val = lookup_builtins(ENV, id);
        YOG_ASSERT(ENV, !IS_UNDEF(val), "Can't find package var.");
    }
}

inst load_local
(uint8_t index) 
()
(val)
{
    val = LOCAL_VARS(CUR_FRAME)->items[index];
}

inst jump
(pc_t dest)
()
()
{
    JUMP(dest);
}

inst jump_if_false
(pc_t dest)
(val)
()
{
    YogValType type = VAL_TYPE(val);
    if ((type == VAL_NIL) || ((type == VAL_BOOL) && !VAL2BOOL(val))) {
        JUMP(dest);
    }
}

inst dup 
()
(val)
(val, val)
{
}

inst make_package_block
()
(code)
(block)
{
    block = YogPackageBlock_new(env);
    YogCode* c = VAL2PTR(code);
    OBJ_AS(YogBasicBlock, block)->code = c;
    OBJ_AS(YogPackageBlock, block)->self = NAME_FRAME(CUR_FRAME)->self;
    OBJ_AS(YogPackageBlock, block)->vars = NAME_FRAME(CUR_FRAME)->vars;
}

inst make_block
()
(code)
(block) 
{
    block = YogBlock_new(ENV);
    OBJ_AS(YogBasicBlock, block)->code = VAL2PTR(code);
    OBJ_AS(YogBlock, block)->locals = METHOD_FRAME(CUR_FRAME)->vars;
    OBJ_AS(YogBlock, block)->outer_vars = SCRIPT_FRAME(CUR_FRAME)->outer_vars;
    OBJ_AS(YogBlock, block)->globals = SCRIPT_FRAME(CUR_FRAME)->globals;
}

inst make_klass
()
(code, super, name)
(...) depth: 1
{
    YogVal kls = YogKlass_new(ENV, NULL, super);
    OBJ_AS(YogKlass, kls)->name = VAL2ID(name);
    YogTable* attrs = OBJ_AS(YogObj, kls)->attrs = YogTable_new_symbol_table(ENV);
    YogCode* c = VAL2PTR(code);

    YogKlassFrame* frame = YogKlassFrame_new(ENV);
    setup_script_frame(ENV, SCRIPT_FRAME(frame), c);
    NAME_FRAME(frame)->self = kls;
    NAME_FRAME(frame)->vars = attrs;

    PUSH_FRAME(FRAME(frame));
}

inst make_method
()
(code)
(method)
{
    method = YogUnboundMethod_new(ENV);
    setup_script_method(ENV, OBJ_AS(YogScriptMethod, method), VAL2PTR(code));
}

inst push_self_name
()
()
(self)
{
    self = NAME_FRAME(CUR_FRAME)->self;
}

inst ret
()
(val)
(val)
{
    POP_FRAME();
    if (CUR_FRAME->type == FRAME_C) {
        return val;
    }

    PC = SCRIPT_FRAME(CUR_FRAME)->pc;
}

inst store_nonlocal
(uint8_t level, uint8_t index) 
()
(val) 
{
    /* TODO */
}

inst load_nonlocal 
(uint8_t level, uint8_t index) 
(val)
()
{
    /* TODO */
}

inst store_global 
(ID name) 
(val) 
()
{
    YogTable* globals = SCRIPT_FRAME(CUR_FRAME)->globals;
    YogTable_insert(ENV, globals, ID2VAL(name), val);
}

/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=c
 */
