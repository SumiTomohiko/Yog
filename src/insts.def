/**
 * inst <name>
 * (operand_type operand_name, ...)
 * (pop_value, ...)
 * <- top bottom ->
 * (push_value, ...)
 * <- top bottom ->
 * {
 *      C code.
 * }
 */

inst pop
()
(val)
()
{
}

inst push_const
(uint_t index)
()
(val)
{
    val = CONSTS(index);
}

inst make_string
(uint_t index)
()
(val)
{
    YogVal c = CONSTS(index);
    val = YogString_clone(env, c);
}

inst store_local_name
(ID id)
(val)
()
{
    YogTable_insert(env, SCRIPT_FRAME_LOCALS(CUR_FRAME)[0], ID2VAL(id), val);
}

inst store_local_index
(uint8_t index)
(val)
()
{
    YogGC_UPDATE_PTR(env, SCRIPT_FRAME(CUR_FRAME), locals_etc[SCRIPT_FRAME(CUR_FRAME)->stack_capacity + index], val);
}

inst make_block
()
(code)
(f)
{
    YogHandle* h_code = YogHandle_REGISTER(env, code);
    f = YogFunction_new(env);
    setup_script_function(env, f, h_code->val);
    YogGC_UPDATE_PTR(env, PTR_AS(YogFunction, f), frame_to_long_return, PTR_AS(YogScriptFrame, CUR_FRAME)->frame_to_long_return);
    YogGC_UPDATE_PTR(env, PTR_AS(YogFunction, f), frame_to_long_break, CUR_FRAME);
    PTR_AS(YogFunction, f)->needs_self = FALSE;
}

inst make_function
(ID name)
(code)
(f)
{
    YogHandle* h_code = YogHandle_REGISTER(env, code);
    f = YogFunction_new(env);
    setup_script_function(env, f, h_code->val);
    PTR_AS(YogFunction, f)->name = name;
}

inst call_function
(uint8_t argc, uint8_t kwargc, uint8_t varargc, uint8_t varkwargc, uint8_t blockargc, uint8_t left, uint8_t middle, uint8_t right)
(...) depth: argc + 2 * kwargc + varargc + varkwargc + blockargc
(...) depth: left + middle + right
{
    YogHandle* callee = YogHandle_REGISTER(env, pop(env));
    YogHandle* args[argc];
    uint_t i;
    for (i = 0; i < argc; i++) {
        args[i] = YogHandle_REGISTER(env, pop(env));
    }
    YogHandle* kwargs[2 * kwargc];
    for (i = 0; i < kwargc; i++) {
        kwargs[2 * i] = YogHandle_REGISTER(env, pop(env));
        kwargs[2 * i + 1] = YogHandle_REGISTER(env, pop(env));
    }
    YogHandle* vararg = YogHandle_REGISTER(env, varargc == 1 ? pop(env) : YUNDEF);
    YogHandle* varkwarg = YogHandle_REGISTER(env, varkwargc == 1 ? pop(env) : YUNDEF);
    YogHandle* blockarg = YogHandle_REGISTER(env, blockargc == 1 ? pop(env) : YUNDEF);

    exec_call(env, callee, left, middle, right, argc, args, kwargc, kwargs, vararg, varkwarg, blockarg);
}

inst load_global
(ID id)
()
(val)
{
    YogVal globals = SCRIPT_FRAME(CUR_FRAME)->globals;
    if (!YogTable_lookup(env, globals, ID2VAL(id), &val)) {
        val = lookup_builtins(env, id);
    }
    if (IS_UNDEF(val)) {
        YogError_raise_NameError(env, id);
    }
}

inst load_local_name
(ID id)
()
(val)
{
    YogVal key = ID2VAL(id);
    if (!YogTable_lookup(env, SCRIPT_FRAME_LOCALS(CUR_FRAME)[0], key, &val)) {
        val = lookup_builtins(env, id);
    }
    if (IS_UNDEF(val)) {
        YogError_raise_NameError(env, id);
    }
}

inst load_local_index
(uint8_t index)
()
(val)
{
    val = SCRIPT_FRAME_LOCALS(CUR_FRAME)[index];
    if (IS_UNDEF(val)) {
        ID name = CODE->local_vars_names[index];
        YogError_raise_UnboundLocalError(env, "Local variable \"%I\" referenced before assignment", name);
        /* NOTREACHED */
    }
}

inst load_super
()
()
(val)
{
    YogVal frame = env->frame;
    if (PTR_AS(YogFrame, frame)->type == FRAME_SCRIPT) {
        YogVal klass = PTR_AS(YogScriptFrame, frame)->klass;
        YogVal super = PTR_AS(YogClass, klass)->super;
        ID name = PTR_AS(YogScriptFrame, frame)->name;
        YogVal attr = YogClass_get_attr(env, super, name);
        if (IS_UNDEF(attr)) {
            YogError_raise_AttributeError(env, "super not found");
        }
        YogVal self = SCRIPT_FRAME_LOCALS(frame)[0];
        YogVal c = YogVal_get_class(env, self);
        val = YogVal_get_descr(env, attr, self, c);
    }
}

inst jump
(pc_t dest)
()
()
{
    JUMP(dest);
}

inst jump_if_true
(pc_t dest)
(val)
()
{
    if (YOG_TEST(val)) {
        JUMP(dest);
    }
}

inst jump_if_false
(pc_t dest)
(val)
()
{
    if (!YOG_TEST(val)) {
        JUMP(dest);
    }
}

inst jump_if_defined
(uint8_t index, pc_t dest)
()
()
{
    YogVal val = SCRIPT_FRAME_LOCALS(env->frame)[index];
    if (!IS_UNDEF(val)) {
        JUMP(dest);
    }
}

inst dup
()
(val)
(val, val)
{
}

inst make_module
(ID name)
(code)
(...) depth: 2
{
    YogHandle* h_code = YogHandle_REGISTER(env, code);
    YogVal module = YogModule_new(env, name);
    push(env, module);

    set_lhs_composition(env, 1, 0, 0);
    YogVal frame = create_frame_for_names(env, h_code->val, PTR_AS(YogObj, module)->attrs);
    YogGC_UPDATE_PTR(env, PTR_AS(YogScriptFrame, frame), globals, PTR_AS(YogScriptFrame, CUR_FRAME)->globals);
    YogEval_push_frame(env, frame);
}

inst make_class
()
(code, super, name)
(...) depth: 2
{
    YogHandle* h_code = YogHandle_REGISTER(env, code);
    YogHandle* kls = YogHandle_REGISTER(env, YogClass_new(env, NULL, super));
    PTR_AS(YogClass, kls->val)->name = VAL2ID(name);
    PTR_AS(YogObj, kls->val)->attrs = YUNDEF;
    YogVal attrs = YogTable_create_symbol_table(env);
    YogGC_UPDATE_PTR(env, PTR_AS(YogObj, kls->val), attrs, attrs);
    push(env, kls->val);

    set_lhs_composition(env, 1, 0, 0);
    YogVal frame = create_frame_for_names(env, h_code->val, attrs);
    YogGC_UPDATE_PTR(env, PTR_AS(YogScriptFrame, frame), globals, PTR_AS(YogScriptFrame, CUR_FRAME)->globals);
    YogEval_push_frame(env, frame);
}

inst ret
(uint8_t n)
(...) depth: n
()
{
    move_returned_value(env, n);

    YogVal frame = env->frame;
    YogEval_pop_frame(env);
    if (!PTR_AS(YogScriptFrame, frame)->used_by_func) {
        YogScriptFrame_cleanup(env, frame);
        YogThread_put_script_frame(env, env->thread, frame);
    }
    PC = SCRIPT_FRAME(CUR_FRAME)->pc;
}

inst store_nonlocal_index
(uint8_t level, uint8_t index)
(val)
()
{
    YogVal frame = get_outer_frame(env, level);
    YogGC_UPDATE_PTR(env, PTR_AS(YogScriptFrame, frame), locals_etc[PTR_AS(YogScriptFrame, frame)->stack_capacity + index], val);
}

inst load_nonlocal_index
(uint8_t level, uint8_t index)
()
(val)
{
    YogVal frame = get_outer_frame(env, level);
    val = SCRIPT_FRAME_LOCALS(frame)[index];
    if (IS_UNDEF(val)) {
        YogError_raise_UnboundLocalError(env, "Nonlocal variable referenced before assignment");
        /* NOTREACHED */
    }
}

inst store_nonlocal_name
(uint8_t level, ID name)
(val)
()
{
    YogVal frame = get_outer_frame(env, level);
    YogVal vars = SCRIPT_FRAME_LOCALS(frame)[0];
    YogTable_insert(env, vars, ID2VAL(name), val);
}

inst load_nonlocal_name
(uint8_t level, ID name)
()
(val)
{
    YogVal frame = get_outer_frame(env, level);
    YogVal vars = SCRIPT_FRAME_LOCALS(frame)[0];
    if (!YogTable_lookup(env, vars, ID2VAL(name), &val)) {
        YogError_raise_NameError(env, name);
    }
}

inst store_global
(ID name)
(val)
()
{
    YogVal globals = SCRIPT_FRAME(CUR_FRAME)->globals;
    YogTable_insert(env, globals, ID2VAL(name), val);
}

inst load_attr
(ID name)
(obj)
(...) depth: 1
{
    YogVal klass = YogVal_get_class(env, obj);
    GetAttrExecutor exec = PTR_AS(YogClass, klass)->exec_get_attr;
    if (exec == NULL) {
        exec = exec_get_attr;
    }

    set_lhs_composition(env, 1, 0, 0);
    exec(env, obj, name);
}

inst make_array
(uint_t size)
(...) depth: size
(array)
{
    array = YogArray_of_size(env, size);
    uint_t i;
    for (i = 0; i < size; i++) {
        YogVal body = PTR_AS(YogArray, array)->body;
        uint_t pos = size - i - 1;
        YogVal v = pop(env);
        YogGC_UPDATE_PTR(env, PTR_AS(YogValArray, body), items[pos], v);
    }
    PTR_AS(YogArray, array)->size = size;
}

inst make_dict
(uint8_t size)
(...) depth: 2 * size
(dict)
{
    YogHandle* h_dict = YogHandle_REGISTER(env, YogDict_new(env));
    uint_t i;
    for (i = 0; i < size; i++) {
        YogVal value = pop(env);
        YogVal key = pop(env);
        YogDict_set(env, h_dict->val, key, value);
    }
    dict = h_dict->val;
}

inst make_set
(uint8_t size)
(...) depth: size
(set)
{
    YogHandle* h_set = YogHandle_REGISTER(env, YogSet_new(env));
    uint_t i;
    for (i = 0; i < size; i++) {
        YogVal elem = pop(env);
        YogSet_add(env, h_set->val, elem);
    }
    set = h_set->val;
}

inst finish
()
(val)
()
{
    POP_JMPBUF(env);
    YogVal frame = env->frame;
    YogEval_pop_frame(env);
    YogFinishFrame_clean(env, frame);
    YogThread_put_finish_frame(env, env->thread, frame);
    YogHandleScope_close(env);
    YogHandleScope_close(env);
    return val;
}

inst print_top
()
(val)
()
{
    YogVal s = YogEval_call_method(env, val, "to_s", 0, NULL);
    YOG_ASSERT(env, IS_PTR(s) && (BASIC_OBJ_TYPE(s) == TYPE_STRING), "object isn't string");
    YogHandle* h = YogHandle_REGISTER(env, s);
    YogVal bin = YogString_to_bin_in_default_encoding(env, h);
    printf("=> %s\n", BINARY_CSTR(bin));
}

inst print_top_multi_value
()
(val)
()
{
    printf("=>");

    YOG_ASSERT(env, IS_PTR(val), "invalid operand (0x%08x)", val);
    YOG_ASSERT(env, BASIC_OBJ_TYPE(val) == TYPE_ARRAY, "invalid operand type (0x%08x)", BASIC_OBJ_TYPE(val));
    uint_t size = YogArray_size(env, val);
    YogHandle* h_val = YogHandle_REGISTER(env, val);
    uint_t i;
    for (i = 0; i < size; i++) {
        YogVal obj = YogArray_at(env, h_val->val, i);
        YogVal s = YogEval_call_method(env, obj, "to_s", 0, NULL);
        YOG_ASSERT(env, IS_PTR(s), "invalid string (0x%08x)", s);
        YOG_ASSERT(env, BASIC_OBJ_TYPE(s) == TYPE_STRING, "invalid string type (0x%08x)", BASIC_OBJ_TYPE(s));
        YogHandle* h = YogHandle_REGISTER(env, s);
        YogVal bin = YogString_to_bin_in_default_encoding(env, h);
        printf(" %s", BINARY_CSTR(bin));
    }
    printf("\n");
}

inst store_attr
(ID name)
(obj, val)
()
{
    YogVal class_of_obj = YogVal_get_class(env, obj);
    BOOL has_attrs;
    if (IS_PTR(obj) && ((PTR_AS(YogBasicObj, obj)->flags & HAS_ATTRS) != 0)) {
        has_attrs = TRUE;
    }
    else {
        has_attrs = FALSE;
    }
    YogHandle* h_class_of_obj = YogHandle_REGISTER(env, class_of_obj);
    YogHandle* h_obj = YogHandle_REGISTER(env, obj);
    YogHandle* h_val = YogHandle_REGISTER(env, val);

    YogVal attr = YUNDEF;
    if (has_attrs) {
        attr = YogObj_get_attr(env, obj, name);
    }
    if (IS_UNDEF(attr)) {
        attr = YogObj_get_attr(env, h_class_of_obj->val, name);
    }
    if (!IS_UNDEF(attr)) {
        YogVal class_of_attr = YogVal_get_class(env, attr);
        void (*exec)(YogEnv*, YogVal, YogVal, YogVal) = PTR_AS(YogClass, class_of_attr)->exec_set_descr;
        if (exec != NULL) {
            set_lhs_composition(env, 0, 0, 0);
            exec(env, attr, h_obj->val, h_val->val);
        }
        else if (has_attrs) {
            YogObj_set_attr_id(env, h_obj->val, name, h_val->val);
        }
        else {
            YogError_raise_AttributeError(env, "can't set attribute to %C object", h_obj->val);
        }
    }
    else if (has_attrs) {
        YogObj_set_attr_id(env, h_obj->val, name, h_val->val);
    }
    else {
        YogVal attr_name = YogVM_id2name(env, env->vm, name);
        YogError_raise_AttributeError(env, "%C object has no attribute \"%S\"", h_obj->val, attr_name);
    }
}

inst not
()
(val)
(b)
{
    b = YOG_TEST(val) ? YFALSE : YTRUE;
}

inst long_return
(uint8_t n)
(...) depth: n
()
{
    YogVal target_frame = SCRIPT_FRAME(CUR_FRAME)->frame_to_long_return;
    long_jump(env, n, JMP_RETURN, target_frame);
}

inst long_break
(uint8_t n)
(...) depth: n
()
{
    YogVal target_frame = SCRIPT_FRAME(CUR_FRAME)->frame_to_long_break;
    long_jump(env, n, JMP_BREAK, target_frame);
}

inst load_exception
()
()
(exc)
{
    exc = PTR_AS(YogThread, env->thread)->jmp_val;
}

inst match_exception
()
(klass, exc)
(b)
{
    b = YogVal_is_subclass_of(env, exc, klass) ? YTRUE : YFALSE;
}

inst add
()
(right, left)
(...) depth: 1
{
    if (IS_FIXNUM(left)) {
        YogHandle* h = YogHandle_REGISTER(env, right);
        push(env, YogFixnum_binop_add(env, left, h));
    }
    else if (IS_PTR(left)) {
        if (BASIC_OBJ_TYPE(left) == TYPE_STRING) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogString_binop_add(env, x, y));
        }
        else if (BASIC_OBJ_TYPE(left) == TYPE_BIGNUM) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogBignum_binop_add(env, x, y));
        }
        else if (BASIC_OBJ_TYPE(left) == TYPE_FLOAT) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogFloat_binop_add(env, x, y));
        }
        else {
            exec_add(env, left, right);
        }
    }
    else {
        exec_add(env, left, right);
    }
}

inst subtract
()
(right, left)
(...) depth: 1
{
    if (IS_FIXNUM(left)) {
        YogHandle* h = YogHandle_REGISTER(env, right);
        push(env, YogFixnum_binop_subtract(env, left, h));
    }
    else if (IS_PTR(left)) {
        if (BASIC_OBJ_TYPE(left) == TYPE_BIGNUM) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogBignum_binop_subtract(env, x, y));
        }
        else if (BASIC_OBJ_TYPE(left) == TYPE_FLOAT) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogFloat_binop_subtract(env, x, y));
        }
        else {
            exec_subtract(env, left, right);
        }
    }
    else {
        exec_subtract(env, left, right);
    }
}

inst multiply
()
(right, left)
(...) depth: 1
{
    if (IS_FIXNUM(left)) {
        YogHandle* h = YogHandle_REGISTER(env, right);
        push(env, YogFixnum_binop_multiply(env, left, h));
    }
    else if (IS_PTR(left)) {
        YogHandle* x = YogHandle_REGISTER(env, left);
        if (BASIC_OBJ_TYPE(left) == TYPE_STRING) {
            push(env, YogString_binop_multiply(env, x, right));
        }
        else {
            YogHandle* y = YogHandle_REGISTER(env, right);
            if (BASIC_OBJ_TYPE(left) == TYPE_BIGNUM) {
                push(env, YogBignum_binop_multiply(env, x, y));
            }
            else if (BASIC_OBJ_TYPE(left) == TYPE_FLOAT) {
                push(env, YogFloat_binop_multiply(env, x, y));
            }
            else {
                exec_multiply(env, left, right);
            }
        }
    }
    else {
        exec_multiply(env, left, right);
    }
}

inst divide
()
(right, left)
(...) depth: 1
{
    if (IS_FIXNUM(left)) {
        YogHandle* h = YogHandle_REGISTER(env, right);
        push(env, YogFixnum_binop_divide(env, left, h));
    }
    else if (IS_PTR(left)) {
        if (BASIC_OBJ_TYPE(left) == TYPE_BIGNUM) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogBignum_binop_divide(env, x, y));
        }
        else if (BASIC_OBJ_TYPE(left) == TYPE_FLOAT) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogFloat_binop_divide(env, x, y));
        }
        else {
            exec_divide(env, left, right);
        }
    }
    else {
        exec_divide(env, left, right);
    }
}

inst floor_divide
()
(right, left)
(...) depth: 1
{
    if (IS_FIXNUM(left)) {
        YogHandle* h = YogHandle_REGISTER(env, right);
        push(env, YogFixnum_binop_floor_divide(env, left, h));
    }
    else if (IS_PTR(left)) {
        if (BASIC_OBJ_TYPE(left) == TYPE_BIGNUM) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogBignum_binop_floor_divide(env, x, y));
        }
        else if (BASIC_OBJ_TYPE(left) == TYPE_FLOAT) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogFloat_binop_floor_divide(env, x, y));
        }
        else {
            exec_floor_divide(env, left, right);
        }
    }
    else {
        exec_floor_divide(env, left, right);
    }
}

inst modulo
()
(right, left)
(...) depth: 1
{
    if (IS_FIXNUM(left)) {
        YogHandle* h = YogHandle_REGISTER(env, right);
        push(env, YogFixnum_binop_modulo(env, left, h));
    }
    else if (IS_PTR(left)) {
        if (BASIC_OBJ_TYPE(left) == TYPE_BIGNUM) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogBignum_binop_modulo(env, x, y));
        }
        else {
            exec_modulo(env, left, right);
        }
    }
    else {
        exec_modulo(env, left, right);
    }
}

inst power
()
(right, left)
(...) depth: 1
{
    if (IS_FIXNUM(left)) {
        YogHandle* h = YogHandle_REGISTER(env, right);
        push(env, YogFixnum_binop_power(env, left, h));
    }
    else if (IS_PTR(left)) {
        if (BASIC_OBJ_TYPE(left) == TYPE_BIGNUM) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogBignum_binop_power(env, x, y));
        }
        else if (BASIC_OBJ_TYPE(left) == TYPE_FLOAT) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogFloat_binop_power(env, x, y));
        }
        else {
            exec_power(env, left, right);
        }
    }
    else {
        exec_power(env, left, right);
    }
}

inst lshift
()
(right, left)
(...) depth: 1
{
    if (IS_FIXNUM(left)) {
        YogHandle* h = YogHandle_REGISTER(env, right);
        push(env, YogFixnum_binop_lshift(env, left, h));
    }
    else if (IS_PTR(left)) {
        if (BASIC_OBJ_TYPE(left) == TYPE_STRING) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogString_binop_lshift(env, x, y));
        }
        else if (BASIC_OBJ_TYPE(left) == TYPE_BIGNUM) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogBignum_binop_lshift(env, x, y));
        }
        else {
            exec_lshift(env, left, right);
        }
    }
    else {
        exec_lshift(env, left, right);
    }
}

inst rshift
()
(right, left)
(...) depth: 1
{
    if (IS_FIXNUM(left)) {
        YogHandle* h = YogHandle_REGISTER(env, right);
        push(env, YogFixnum_binop_rshift(env, left, h));
    }
    else if (IS_PTR(left)) {
        if (BASIC_OBJ_TYPE(left) == TYPE_BIGNUM) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogBignum_binop_rshift(env, x, y));
        }
        else {
            exec_rshift(env, left, right);
        }
    }
    else {
        exec_rshift(env, left, right);
    }
}

inst and
()
(right, left)
(...) depth: 1
{
    if (IS_FIXNUM(left)) {
        YogHandle* h = YogHandle_REGISTER(env, right);
        push(env, YogFixnum_binop_and(env, left, h));
    }
    else if (IS_PTR(left)) {
        if (BASIC_OBJ_TYPE(left) == TYPE_BIGNUM) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogBignum_binop_and(env, x, y));
        }
        else {
            exec_and(env, left, right);
        }
    }
    else {
        exec_and(env, left, right);
    }
}

inst or
()
(right, left)
(...) depth: 1
{
    if (IS_FIXNUM(left)) {
        YogHandle* h = YogHandle_REGISTER(env, right);
        push(env, YogFixnum_binop_or(env, left, h));
    }
    else if (IS_PTR(left)) {
        if (BASIC_OBJ_TYPE(left) == TYPE_BIGNUM) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogBignum_binop_or(env, x, y));
        }
        else {
            exec_or(env, left, right);
        }
    }
    else {
        exec_or(env, left, right);
    }
}

inst xor
()
(right, left)
(...) depth: 1
{
    if (IS_FIXNUM(left)) {
        YogHandle* h = YogHandle_REGISTER(env, right);
        push(env, YogFixnum_binop_xor(env, left, h));
    }
    else if (IS_PTR(left)) {
        if (BASIC_OBJ_TYPE(left) == TYPE_BIGNUM) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogBignum_binop_xor(env, x, y));
        }
        else {
            exec_xor(env, left, right);
        }
    }
    else {
        exec_xor(env, left, right);
    }
}

inst search
()
(right, left)
(...) depth: 1
{
    if (IS_PTR(left)) {
        if (BASIC_OBJ_TYPE(left) == TYPE_STRING) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogString_binop_search(env, x, y));
        }
        else if (BASIC_OBJ_TYPE(left) == TYPE_REGEXP) {
            YogHandle* x = YogHandle_REGISTER(env, left);
            YogHandle* y = YogHandle_REGISTER(env, right);
            push(env, YogRegexp_binop_search(env, x, y));
        }
        else {
            exec_search(env, left, right);
        }
    }
    else {
        exec_search(env, left, right);
    }
}

inst less
()
(right, left)
(...) depth: 1
{
    CMP_BODY(do_less, exec_less);
}

inst greater
()
(right, left)
(...) depth: 1
{
    CMP_BODY(do_greater, exec_greater);
}

inst less_equal
()
(right, left)
(...) depth: 1
{
    CMP_BODY(do_less_equal, exec_less_equal);
}

inst greater_equal
()
(right, left)
(...) depth: 1
{
    CMP_BODY(do_greater_equal, exec_greater_equal);
}

inst equal
()
(right, left)
(...) depth: 1
{
    EQUAL_BODY(do_equal, exec_equal);
}

inst not_equal
()
(right, left)
(...) depth: 1
{
    EQUAL_BODY(do_not_equal, exec_not_equal);
}

inst ufo
()
(right, left)
(...) depth: 1
{
    if (IS_FIXNUM(left)) {
        push(env, YogFixnum_binop_ufo(env, left, right));
    }
    else if (IS_PTR(left)) {
        if (BASIC_OBJ_TYPE(left) == TYPE_BIGNUM) {
            push(env, YogBignum_binop_ufo(env, left, right));
        }
        else if (BASIC_OBJ_TYPE(left) == TYPE_STRING) {
            push(env, YogString_binop_ufo(env, left, right));
        }
        else if (BASIC_OBJ_TYPE(left) == TYPE_FLOAT) {
            push(env, YogFloat_binop_ufo(env, left, right));
        }
        else {
            exec_ufo(env, left, right);
        }
    }
    else {
        exec_ufo(env, left, right);
    }
}

inst subscript
()
(index, prefix)
(...) depth: 1
{
    if (IS_PTR(prefix)) {
        if (BASIC_OBJ_TYPE(prefix) == TYPE_ARRAY) {
            push(env, YogArray_subscript(env, prefix, index));
        }
        else if (BASIC_OBJ_TYPE(prefix) == TYPE_STRING) {
            push(env, YogString_subscript(env, prefix, index));
        }
        else if (BASIC_OBJ_TYPE(prefix) == TYPE_DICT) {
            push(env, YogDict_subscript(env, prefix, index));
        }
        else {
            exec_subscript(env, prefix, index);
        }
    }
    else {
        exec_subscript(env, prefix, index);
    }
}

/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=c
 */
