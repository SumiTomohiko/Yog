
def take(n)
  i = 0
  return self.take_while() do
    i += 1
    next i <= n
  end
end

def drop(n)
  i = 0
  return self.drop_while() do
    i += 1
    next i <= n
  end
end

def take_while(&block)
  retval = []
  self.each() do |elem|
    if !block(elem)
      break
    end
    retval << elem
  end
  return retval
end

def take_until(&block)
  return self.take_while() do |elem|
    next !block(elem)
  end
end

def drop_while(&block)
  retval = []
  found? = false
  self.each() do |elem|
    if !found? && !block(elem)
      found? = true
    end
    if found?
      retval << elem
    end
  end
  return retval
end

def drop_until(&block)
  return self.drop_while() do |elem|
    next !block(elem)
  end
end

def divide(size)
  a = [self.class.new()]
  i = 0
  self.each() do |elem|
    if i < size
      a[-1] << elem
      i += 1
      next
    end
    a << (self.class.new() << elem)
    i = 1
  end
  return a
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
