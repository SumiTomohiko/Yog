
def normalize()
  names = self.split(/\/+/).reduce([]) do |names, entry|
    if entry == ""
      next names.empty? ? [entry] : names
    end
    if entry == "."
      next names
    end
    if entry == ".."
      next names.slice(0, names.size - 1)
    end
    next names + [entry]
  end
  return (names.size == 1) && (names[0] == "") ? "/" : names.join("/").to_path()
end

def abs()
  return (self.starts_with?("/") ? self : (Path.getcwd() / self)).normalize()
end

def walk(&block)
  Dir.open(self) do |dir|
    block(self)
    dir.each() do |name|
      if (name == ".") || (name == "..")
        next
      end

      path = self / name
      if path.dir?
        path.walk(&block)
        next
      end
      block(path)
    end
  end
end

def get_dir()
  try
    st = self.lstat()
  except SystemError
    return false
  end
  return st.dir?
end
dir? = property(get_dir)

def get_symlink()
  try
    st = self.lstat()
  except SystemError
    return false
  end
  return st.symlink?
end
symlink? = property(get_symlink)

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
