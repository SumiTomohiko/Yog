
def get_attr(name)
  if !name.kind_of?(Symbol)
    return get_attr(name.to_sym())
  end

  def f(o)
    return o.get_attr(name)
  end

  return f
end

def abs(x)
  return 0 < x ? x : -x
end

def nop(*args, **kw, &block=nil)
  return nil
end

def max(*args)
  if args.empty?
    return nil
  end
  return args.slice(1).reduce(args[0]) do |init, elem|
    next elem < init ? init : elem
  end
end

def min(*args)
  if args.empty?
    return nil
  end
  return args.slice(1).reduce(args[0]) do |init, elem|
    next init < elem ? init : elem
  end
end

def run_command(*cmd, &block=nil)
  proc = Process.new(cmd)
  proc.run()
  if block != nil
    block(proc.stdin)
  end
  proc.stdin.close()
  stdout = ""
  stderr = ""
  while (status = proc.poll()) == nil
    stdout << proc.stdout.read()
    stderr << proc.stderr.read()
  end
  stdout << proc.stdout.read()
  stderr << proc.stderr.read()
  return status, stdout, stderr
end

def copy_file(src, dest)
  File.open(src, "r") do |in|
    File.open(dest, "w") do |out|
      out.write(in.read_binary())
    end
  end
end

def make_dirs(path)
  parent = dirname(path)
  if (parent != ".") && (parent != "/") && !(parent =~ /\A[A-Za-z]:\z/)
    make_dirs(parent)
  end
  try
    mkdir(path)
  except SystemError as e
    if e.errno != EEXIST
      raise e
    end
  end
end

def dirname(path)
  if path == ""
    return "."
  end
  if root_dir?(path)
    return path
  end
  if path[-1] == PATH_SEPARATOR
    return dirname(path.slice(0, path.size - 1))
  end
  if (path.get(0, "") == PATH_SEPARATOR) && (path.get(1, "") == PATH_SEPARATOR)
    return dirname(path.slice(1))
  end
  if (pos = path.rfind(PATH_SEPARATOR)) < 0
    return "."
  end
  return path.slice(0, pos)
end

def loop(&block)
  n = 0
  while true
    block(n)
    n += 1
  end
end

def include(mod)
  def f(clazz)
    return include_module(clazz, mod)
  end

  return f
end

def bind(obj)
  def f(g)
    return g.descr_get(obj)
  end

  return f
end

def __recurse__(obj, f, g)
  stack = get_current_thread().__recursive_stack__
  if stack.include?(obj)
    return f(obj)
  end

  stack.push(obj)
  try
    retval = g(obj)
  finally
    stack.pop()
  end

  return retval
end

def find_lib(head)
  name = "lib" + head + ".so"
  dirs = ENV.get("LD_LIBRARY_PATH", "").split(":") + ["/usr/local/lib", "/usr/lib", "/lib"]
  dirs.each() do |dir|
    try
      return load_lib(join_path(dir, name))
    except ImportError
    end
  end
  raise ImportError.new("Library not found - {0}".format(name))
end

def root_dir?(path)
  return path == PATH_SEPARATOR
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
