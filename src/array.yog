
def any?(&block)
  self.each() do |elem|
    if block(elem)
      return true
    end
  end
  return false
end

def reduce(init, &block)
  if self.empty?
    return init
  end
  return self.slice(1).reduce(block(init, self[0]), &block)
end

def sort(&block=nil)
  if block == nil
    return self.sort() do |x, y|
      next x <=> y
    end
  end

  if self.empty?
    return []
  end
  pibot = self[0]
  rest = self.slice(1)
  a = rest.select() do |elem|
    next block(elem, pibot) <= 0
  end
  b = rest.select() do |elem|
    next 0 < block(elem, pibot)
  end
  return a.sort(&block) + [pibot] + b.sort(&block)
end

def to_set()
  set = Set.new()
  self.each(&set.<<)
  return set
end

def map(&block)
  a = Array.new(self.size)
  self.each_with_index() do |index, elem|
    a[index] = block(elem)
  end
  return a
end

def slice(pos, len=nil)
  # TODO: This code is almost same as String#slice.
  if self.size <= pos
    return []
  end

  if pos < 0
    pos = self.size + pos
  end
  max_len = self.size - pos
  if (len == nil) || (max_len < len)
    len = max_len
  elif len < 0
    return []
  end

  a = []
  len.times() do |i|
    a << self[pos + i]
  end
  return a
end

def each_with_index(&block)
  i = 0
  self.each() do |elem|
    block(i, elem)
    i += 1
  end
end

def join(sep)
  s = ""
  i = 0
  self.each() do |elem|
    if 0 < i
      s << sep
    end
    s << elem.to_s()
    i += 1
  end

  return s
end

def extend(a)
  a.each() do |elem|
    self << elem
  end
  return self
end

def include?(obj)
  self.each() do |elem|
    # TODO: need to compare classes?
    if (elem.class == obj.class) && (elem == obj)
      return true
    end
  end

  return false
end

def zip(a)
  ret = []
  if self.size < a.size
    a.each_with_index() do |index, elem|
      ret << [self.get(index), elem]
    end
    return ret
  end
  self.each_with_index() do |index, elem|
    ret << [elem, a.get(index)]
  end
  return ret
end

def to_s()
  def f(obj)
    return "[...]"
  end

  def g(obj)
    a = []
    obj.each() do |elem|
      a.push(elem.inspect())
    end
    return "[" + a.join(", ") + "]"
  end

  return __recurse__(self, f, g)
end

def split(max=nil, &block)
  if max == nil
    return self.split(self.size, &block)
  end

  retval = [[]]
  n = 0
  self.each() do |elem|
    if (n < max) && block(elem)
      retval << []
      n += 1
      next
    end
    retval[-1] << elem
  end
  return retval
end

def reverse()
  a = Array.new(self.size)
  self.each_with_index() do |index, elem|
    a[- (index + 1)] = elem
  end
  return a
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
