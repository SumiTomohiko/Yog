
def /(s)
  if (m = /\/+\Z/.search(self)) != nil
    return self.slice(0, m.start(0)) / s
  end
  return (self + "/" + s).to_path()
end

def get_empty?()
  return self == ""
end

empty? = property(get_empty?)

def starts_with?(s)
  return self.slice(0, s.size) == s
end

def ends_with?(s)
  return self.slice(- s.size) == s
end

def inspect()
  s = "\""
  self.each() do |c|
    if c == "\\"
      s << "\\\\"
    elif c == "\t"
      s << "\\t"
    elif c == "\n"
      s << "\\n"
    elif c == "\""
      s << "\\\""
    else
      s << c
    end
  end
  return s + "\""
end

def dup()
  return self.slice(0, self.size)
end

def rtrim()
  m = (self =~ /[ \t\n\r]*\Z/)
  return self.slice(0, m.start(0))
end

def ltrim()
  m = (self =~ /\A[ \t\n\r]*/)
  return self.slice(m.end(0))
end

def trim()
  return self.ltrim().rtrim()
end

def rfind(substr, start_pos=nil)
  NOT_FOUND = -1

  if start_pos == nil
    return self.rfind(substr, self.size - 1)
  end
  if start_pos < - self.size
    return NOT_FOUND
  end
  if start_pos < 0
    return self.rfind(substr, self.size + start_pos)
  end
  if start_pos < substr.size
    return NOT_FOUND
  end

  i = start_pos - substr.size + 1
  while 0 < i
    if self.slice(i, substr.size) == substr
      return i
    end
    i -= 1
  end

  return NOT_FOUND
end

def find(substr, start_pos=0)
  if start_pos < 0
    start_pos = self.size + start_pos
    if start_pos < 0
      start_pos = 0
    end
  end

  NOT_FOUND = -1
  if self.size < substr.size
    return NOT_FOUND
  end

  i = start_pos
  while i <= self.size - substr.size
    j = 0
    while j < substr.size
      if self[i + j] != substr[j]
        break
      end
      j += 1
    end
    if j == substr.size
      return i
    end

    i += 1
  end

  return NOT_FOUND
end

def format(*args, **kw)
  s = ""
  i = 0
  while i < self.size
    c1 = self[i]
    if (c1 == "}")
      i += 1
      c2 = self[i]
      if (c2 == "}")
        i += 1
        s << c2
        next
      end
      raise ValueError.new("Single \"}\" encountered in format string")
    end
    if (c1 != "{")
      s << c1
      i += 1
      next
    end
    i += 1
    c2 = self[i]
    if (c2 == "{")
      s << c2
      i += 1
      next
    end
    t = c2
    i += 1
    while self[i] != "}"
      t << self[i]
      i += 1
    end
    colon_pos = t.find(":")
    if colon_pos < 0
      s << args[t.to_i()].to_s()
      i += 1
      next
    end
    field_name = t.slice(0, colon_pos)
    val = args[field_name.to_i()].to_s()
    format_spec = t.slice(colon_pos + 1)
    padding_char = format_spec[0] == "0" ? "0" : " "
    width = format_spec.to_i()
    s << (width < val.size ? val : padding_char * (width - val.size) + val)
    i += 1
  end

  return s
end

def match(regexp, pos=0)
  return regexp.match(self, pos)
end

def search(regexp, pos=0)
  return regexp.search(self, pos)
end

def split(splitter=/\s+/, max=nil)
  def split_char(s)
    a = []
    s.each() do |c|
      a << c
    end
    return a
  end

  if splitter.kind_of?(Regexp)
    a = []
    from_ = 0
    count = 0
    while (m = self.search(splitter, from_)) && ((max == nil) || (count < max))
      if m.start() == m.end()
        return split_char(self)
      end
      a << self.slice(from_, m.start() - from_)
      from_ = m.end()
      count += 1
    end
    a << self.slice(from_)
    return a
  end

  if !splitter.kind_of?(String)
    raise TypeError.new("splitter must be String")
  end
  if splitter.size == 0
    return split_char(self)
  end

  a = []
  from_ = 0
  count = 0
  while (from_ <= self.size - splitter.size) && ((max == nil) || (count < max))
    to = self.find(splitter, from_)
    if to < 0
      break
    end
    a << self.slice(from_, to - from_)
    from_ = to + splitter.size
    count += 1
  end
  a << self.slice(from_)
  return a
end

def as_bin()
  return self.to_i(2)
end

def as_oct()
  return self.to_i(8)
end

def as_dec()
  return self.to_i(10)
end

def as_hex()
  return self.to_i(16)
end

UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
LOWER = "abcdefghijklmnopqrstuvwxyz"

def to_upper()
  s = ""
  self.each() do |c|
    s << ((pos = LOWER.find(c)) != -1 ? UPPER[pos] : c)
  end
  return s
end

def to_lower()
  s = ""
  self.each() do |c|
    s << ((pos = UPPER.find(c)) != -1 ? LOWER[pos] : c)
  end
  return s
end

def to_camel_case(first)
  head = self.get(0, "")
  s = first ? head.to_upper() : head.to_lower()
  a = self.split("")
  SPECIALS = ["_", " "]
  a.slice(0, a.size - 1).zip(a.slice(1, a.size - 1)).each() do |pair|
    c = pair[1]
    if SPECIALS.include?(c)
      next
    end
    s << (SPECIALS.include?(pair[0]) ? c.to_upper() : c.to_lower())
  end
  return s
end

def to_lower_camel_case()
  return self.to_camel_case(false)
end

def to_upper_camel_case()
  return self.to_camel_case(true)
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
