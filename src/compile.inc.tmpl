
${compile_data}

static YogBinary* 
insts2bin(YogEnv* env, YogInst* inst) 
{
    FRAME_DECL_LOCAL(env, inst_idx, PTR2VAL(inst));

#define INIT_BIN_SIZE   (0)
    YogBinary* code = YogBinary_new(env, INIT_BIN_SIZE);
#undef INIT_BIN_SIZE
    FRAME_DECL_LOCAL(env, code_idx, OBJ2VAL(code));

#define UPDATE_CODE     FRAME_LOCAL_OBJ(env, code, YogBinary, code_idx)
#define UPDATE_INST     FRAME_LOCAL_PTR(env, inst, inst_idx)
    UPDATE_INST;
    while (inst != NULL) {
        FRAME_DECL_LOCAL(env, inst_idx, PTR2VAL(inst));

        UPDATE_INST;
        switch (inst->type) {
        case INST_OP:
            {
                switch (INST_OPCODE(inst)) {
${insts2bin}
                default:
                    {
                        YOG_ASSERT(env, FALSE, "Unkown instruction.");
                        break;
                    }
                }
                break;
            }
        case INST_ANCHOR:
        case INST_LABEL:
            break;
        default:
            YOG_ASSERT(env, FALSE, "Unknown inst type.");
            break;
        }

        UPDATE_INST;
        inst = inst->next;
    }
#undef UPDATE_INST

    UPDATE_CODE;
    return code;
#undef UPDATE_CODE
}

static int
count_stack_size(YogEnv* env, YogInst* inst) 
{
    int max = 0;
    int size = 0;

    while (inst != NULL) {
        switch (inst->type) {
        case INST_OP:
            {
                int pop_size = 0;
                int push_size = 0;
                switch (INST_OPCODE(inst)) {
${count_stack_size}
                default:
                    {
                        YOG_ASSERT(env, FALSE, "Unkown instruction.");
                        break;
                    }
                }
                size += push_size - pop_size;
                YOG_ASSERT(env, 0 <= size, "Too many pops.");
                if (max < size) {
                    max = size;
                }
                break;
            }
        case INST_ANCHOR:
        case INST_LABEL:
            break;
        default:
            YOG_ASSERT(env, FALSE, "Unknown inst type.");
            break;
        }

        inst = inst->next;
    }

    return max;
}

/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=c
 */
