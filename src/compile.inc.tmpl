
${compile_data}

static YogVal 
insts2bin(YogEnv* env, YogVal inst) 
{
    SAVE_ARG(env, inst);

#define INIT_BIN_SIZE   (0)
    YogVal code = YogBinary_of_size(env, INIT_BIN_SIZE);
#undef INIT_BIN_SIZE
    PUSH_LOCAL(env, code);

    while (IS_PTR(inst)) {
        switch (INST(inst)->type) {
        case INST_OP:
            {
                switch (INST(inst)->opcode) {
${insts2bin}
                default:
                    {
                        YOG_ASSERT(env, FALSE, "Unkown instruction.");
                        break;
                    }
                }
            }
        case INST_ANCHOR:
        case INST_LABEL:
            break;
        default:
            YOG_ASSERT(env, FALSE, "Unknown inst type.");
            break;
        }

        inst = INST(inst)->next;
    }

    RETURN(env, code);
}

static int_t
count_stack_size(YogEnv* env, YogVal inst) 
{
    int_t max = 0;
    int_t size = 0;

    while (IS_PTR(inst)) {
        switch (INST(inst)->type) {
        case INST_OP:
            {
                int_t pop_size = 0;
                int_t push_size = 0;
                switch (INST(inst)->opcode) {
${count_stack_size}
                default:
                    {
                        YOG_ASSERT(env, FALSE, "Unkown instruction.");
                        break;
                    }
                }
                size += push_size - pop_size;
                YOG_ASSERT(env, 0 <= size, "Too many pops.");
                if (max < size) {
                    max = size;
                }
                break;
            }
        case INST_ANCHOR:
        case INST_LABEL:
            break;
        default:
            YOG_ASSERT(env, FALSE, "Unknown inst type.");
            break;
        }

        inst = INST(inst)->next;
    }

    return max;
}

/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=c
 */
