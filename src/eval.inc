/**
 * This file was generated by "../tools/inst.py insts.def .." automatically.
 * DO NOT TOUCH!!
 */

#line 6 "../src/eval.inc"
    case OP(LOAD_SPECIAL):
        {
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            ID id = *((ID*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(ID);
            YogVal val = YUNDEF;
            PUSH_LOCAL(ENV, val);
#line 18 "insts.def"

#line 15 "../src/eval.inc"
            PUSH(val);
            POP_LOCALS(ENV);
            break;
        }
#line 20 "../src/eval.inc"
    case OP(POP):
        {
            POP();
#line 25 "insts.def"

#line 25 "../src/eval.inc"
            break;
        }
#line 28 "../src/eval.inc"
    case OP(PUSH_CONST):
        {
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t index = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YogVal val = YUNDEF;
            PUSH_LOCAL(ENV, val);
#line 32 "insts.def"
            val = CONSTS(index);

#line 38 "../src/eval.inc"
            PUSH(val);
            POP_LOCALS(ENV);
            break;
        }
#line 43 "../src/eval.inc"
    case OP(MAKE_STRING):
        {
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t index = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YogVal val = YUNDEF;
            PUSH_LOCAL(ENV, val);
#line 40 "insts.def"
            YogVal c = CONSTS(index);
            val = YogString_clone(ENV, c);

#line 54 "../src/eval.inc"
            PUSH(val);
            POP_LOCALS(ENV);
            break;
        }
#line 59 "../src/eval.inc"
    case OP(CALL_METHOD):
        {
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            ID method = *((ID*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(ID);
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t argc = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t kwargc = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t blockargc = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t varargc = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t varkwargc = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
#line 49 "insts.def"
            POP_ARGS(args, kwargs, blockarg, vararg, varkwarg);
        
            YogVal receiver = POP();
            YogVal attr = YogVal_get_attr(ENV, receiver, method);
            call_method(ENV, receiver, attr, argc, args, blockarg, kwargc, kwargs, vararg, varkwarg);
        
            POP_LOCALS(ENV);
            POP_LOCALS(ENV);
            POP_LOCALS(ENV);

#line 90 "../src/eval.inc"
            break;
        }
#line 93 "../src/eval.inc"
    case OP(STORE_NAME):
        {
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            ID id = *((ID*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(ID);
            YogVal val = YUNDEF;
            PUSH_LOCAL(ENV, val);
            val = POP();
#line 65 "insts.def"
            YogVal key = ID2VAL(id);
            YogVal vars = NAME_VARS(CUR_FRAME);
            YogTable_insert(ENV, vars, key, val);

#line 106 "../src/eval.inc"
            POP_LOCALS(ENV);
            break;
        }
#line 110 "../src/eval.inc"
    case OP(STORE_LOCAL):
        {
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t index = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YogVal val = YUNDEF;
            PUSH_LOCAL(ENV, val);
            val = POP();
#line 75 "insts.def"
            YogVal vars = LOCAL_VARS(CUR_FRAME);
            MODIFY(ENV, PTR_AS(YogValArray, vars)->items[index], val);

#line 122 "../src/eval.inc"
            POP_LOCALS(ENV);
            break;
        }
#line 126 "../src/eval.inc"
    case OP(CALL_COMMAND):
        {
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            ID command = *((ID*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(ID);
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t argc = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t kwargc = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t blockargc = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t varargc = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t varkwargc = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
#line 84 "insts.def"
            POP_ARGS(args, kwargs, blockarg, vararg, varkwarg);
        
            YogVal callee = YUNDEF;
            if (!lookup_frame_vars(ENV, CUR_FRAME, command, &callee)) {
                callee = lookup_builtins(ENV, command);
            }
        
            YogVal unbound_self = YUNDEF;
            call_method(ENV, unbound_self, callee, argc, args, blockarg, kwargc, kwargs, vararg, varkwarg);
        
            POP_LOCALS(ENV);
            POP_LOCALS(ENV);
            POP_LOCALS(ENV);

#line 161 "../src/eval.inc"
            break;
        }
#line 164 "../src/eval.inc"
    case OP(MAKE_PACKAGE_METHOD):
        {
            YogVal code = YUNDEF;
            YogVal method = YUNDEF;
            PUSH_LOCALS2(ENV, code, method);
            code = POP();
#line 104 "insts.def"
            method = YogBoundMethod_new(ENV);
            setup_script_method(ENV, method, code);
            YogVal self = PTR_AS(YogNameFrame, CUR_FRAME)->self;
            MODIFY(env, PTR_AS(YogBoundMethod, method)->self, self);

#line 176 "../src/eval.inc"
            PUSH(method);
            POP_LOCALS(ENV);
            break;
        }
#line 181 "../src/eval.inc"
    case OP(CALL_FUNCTION):
        {
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t argc = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t kwargc = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t blockargc = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t varargc = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t varkwargc = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
#line 115 "insts.def"
            POP_ARGS(args, kwargs, blockarg, vararg, varkwarg);
        
            YogVal callee = POP();
            YogVal unbound_self = YUNDEF;
            call_method(ENV, unbound_self, callee, argc, args, blockarg, kwargc, kwargs, vararg, varkwarg);
        
            POP_LOCALS(ENV);
            POP_LOCALS(ENV);
            POP_LOCALS(ENV);

#line 209 "../src/eval.inc"
            break;
        }
#line 212 "../src/eval.inc"
    case OP(LOAD_GLOBAL):
        {
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            ID id = *((ID*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(ID);
            YogVal val = YUNDEF;
            PUSH_LOCAL(ENV, val);
#line 131 "insts.def"
            YogVal globals = SCRIPT_FRAME(CUR_FRAME)->globals;
            if (!YogTable_lookup(ENV, globals, ID2VAL(id), &val)) {
                val = lookup_builtins(ENV, id);
            }
            YOG_ASSERT(ENV, !IS_UNDEF(val), "can't find global variable");

#line 226 "../src/eval.inc"
            PUSH(val);
            POP_LOCALS(ENV);
            break;
        }
#line 231 "../src/eval.inc"
    case OP(LOAD_NAME):
        {
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            ID id = *((ID*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(ID);
            YogVal val = YUNDEF;
            PUSH_LOCAL(ENV, val);
#line 143 "insts.def"
            YogVal key = ID2VAL(id);
            if (!YogTable_lookup(ENV, NAME_VARS(CUR_FRAME), key, &val)) {
                val = lookup_builtins(ENV, id);
                YOG_ASSERT(ENV, !IS_UNDEF(val), "Can't find package var.");
            }

#line 245 "../src/eval.inc"
            PUSH(val);
            POP_LOCALS(ENV);
            break;
        }
#line 250 "../src/eval.inc"
    case OP(LOAD_LOCAL):
        {
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t index = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YogVal val = YUNDEF;
            PUSH_LOCAL(ENV, val);
#line 155 "insts.def"
            YogVal vars = LOCAL_VARS(CUR_FRAME);
            val = PTR_AS(YogValArray, vars)->items[index];

#line 261 "../src/eval.inc"
            PUSH(val);
            POP_LOCALS(ENV);
            break;
        }
#line 266 "../src/eval.inc"
    case OP(JUMP):
        {
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            pc_t dest = *((pc_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(pc_t);
#line 164 "insts.def"
            JUMP(dest);

#line 274 "../src/eval.inc"
            break;
        }
#line 277 "../src/eval.inc"
    case OP(JUMP_IF_FALSE):
        {
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            pc_t dest = *((pc_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(pc_t);
            YogVal val = YUNDEF;
            PUSH_LOCAL(ENV, val);
            val = POP();
#line 172 "insts.def"
            if (IS_NIL(val) || IS_FALSE(val)) {
                JUMP(dest);
            }

#line 290 "../src/eval.inc"
            POP_LOCALS(ENV);
            break;
        }
#line 294 "../src/eval.inc"
    case OP(DUP):
        {
            YogVal val = YUNDEF;
            PUSH_LOCAL(ENV, val);
            val = POP();
#line 182 "insts.def"

#line 301 "../src/eval.inc"
            PUSH(val);
            PUSH(val);
            POP_LOCALS(ENV);
            break;
        }
#line 307 "../src/eval.inc"
    case OP(MAKE_BLOCK):
        {
            YogVal code = YUNDEF;
            YogVal block = YUNDEF;
            PUSH_LOCALS2(ENV, code, block);
            code = POP();
#line 189 "insts.def"
            block = YogBlock_new(ENV);
            MODIFY(env, PTR_AS(YogBasicBlock, block)->code, code);
            MODIFY(env, PTR_AS(YogBlock, block)->locals, PTR_AS(YogMethodFrame, CUR_FRAME)->vars);
            MODIFY(env, PTR_AS(YogBlock, block)->outer_vars, SCRIPT_FRAME(CUR_FRAME)->outer_vars);
            MODIFY(env, PTR_AS(YogBlock, block)->globals, SCRIPT_FRAME(CUR_FRAME)->globals);

#line 320 "../src/eval.inc"
            PUSH(block);
            POP_LOCALS(ENV);
            break;
        }
#line 325 "../src/eval.inc"
    case OP(MAKE_KLASS):
        {
            YogVal code = YUNDEF;
            YogVal super = YUNDEF;
            YogVal name = YUNDEF;
            PUSH_LOCALS3(ENV, code, super, name);
            code = POP();
            super = POP();
            name = POP();
#line 201 "insts.def"
            YogVal kls = YUNDEF;
            YogVal frame = YUNDEF;
            YogVal attrs = YUNDEF;
            PUSH_LOCALS3(ENV, kls, frame, attrs);
        
            kls = YogKlass_new(ENV, NULL, super);
            PTR_AS(YogKlass, kls)->name = VAL2ID(name);
            PTR_AS(YogObj, kls)->attrs = YUNDEF;
            attrs = YogTable_new_symbol_table(ENV);
            MODIFY(env, PTR_AS(YogObj, kls)->attrs, attrs);
        
            frame = YogKlassFrame_new(ENV);
            setup_script_frame(ENV, frame, code);
            MODIFY(env, PTR_AS(YogNameFrame, frame)->self, kls);
            MODIFY(env, PTR_AS(YogNameFrame, frame)->vars, attrs);
        
            PUSH_FRAME(frame);
        
            POP_LOCALS(ENV);

#line 355 "../src/eval.inc"
            POP_LOCALS(ENV);
            break;
        }
#line 359 "../src/eval.inc"
    case OP(MAKE_METHOD):
        {
            YogVal code = YUNDEF;
            YogVal method = YUNDEF;
            PUSH_LOCALS2(ENV, code, method);
            code = POP();
#line 227 "insts.def"
            method = YogUnboundMethod_new(ENV);
            setup_script_method(ENV, method, code);

#line 369 "../src/eval.inc"
            PUSH(method);
            POP_LOCALS(ENV);
            break;
        }
#line 374 "../src/eval.inc"
    case OP(PUSH_SELF_NAME):
        {
            YogVal self = YUNDEF;
            PUSH_LOCAL(ENV, self);
#line 236 "insts.def"
            self = PTR_AS(YogNameFrame, CUR_FRAME)->self;

#line 381 "../src/eval.inc"
            PUSH(self);
            POP_LOCALS(ENV);
            break;
        }
#line 386 "../src/eval.inc"
    case OP(RET):
        {
            YogVal val = YUNDEF;
            PUSH_LOCAL(ENV, val);
            val = POP();
#line 244 "insts.def"
            POP_FRAME();
            if (!IS_PTR(CUR_FRAME) || PTR_AS(YogFrame, CUR_FRAME)->type == FRAME_C) {
                return val;
            }
        
            PC = SCRIPT_FRAME(CUR_FRAME)->pc;

#line 399 "../src/eval.inc"
            PUSH(val);
            POP_LOCALS(ENV);
            break;
        }
#line 404 "../src/eval.inc"
    case OP(STORE_NONLOCAL):
        {
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t level = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t index = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YogVal val = YUNDEF;
            PUSH_LOCAL(ENV, val);
#line 257 "insts.def"
            /* TODO */

#line 417 "../src/eval.inc"
            PUSH(val);
            POP_LOCALS(ENV);
            break;
        }
#line 422 "../src/eval.inc"
    case OP(LOAD_NONLOCAL):
        {
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t level = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            uint8_t index = *((uint8_t*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(uint8_t);
            YogVal val = YUNDEF;
            PUSH_LOCAL(ENV, val);
            val = POP();
#line 265 "insts.def"
            /* TODO */

#line 436 "../src/eval.inc"
            POP_LOCALS(ENV);
            break;
        }
#line 440 "../src/eval.inc"
    case OP(STORE_GLOBAL):
        {
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            ID name = *((ID*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(ID);
            YogVal val = YUNDEF;
            PUSH_LOCAL(ENV, val);
            val = POP();
#line 273 "insts.def"
            YogVal globals = SCRIPT_FRAME(CUR_FRAME)->globals;
            YogTable_insert(ENV, globals, ID2VAL(name), val);

#line 452 "../src/eval.inc"
            POP_LOCALS(ENV);
            break;
        }
#line 456 "../src/eval.inc"
    case OP(LOAD_ATTR):
        {
            YOG_ASSERT(env, PC < YogByteArray_size(env, CODE->insts), "pc is over code length.");
            ID name = *((ID*)&PTR_AS(YogByteArray, CODE->insts)->items[PC]);
            PC += sizeof(ID);
            YogVal val = YUNDEF;
            YogVal retval = YUNDEF;
            PUSH_LOCALS2(ENV, val, retval);
            val = POP();
#line 282 "insts.def"
            retval = YogVal_get_attr(ENV, val, name);

#line 468 "../src/eval.inc"
            PUSH(retval);
            POP_LOCALS(ENV);
            break;
        }
/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=c
 */
