# -*- coding: utf-8 -*-

from os import listdir
from os.path import join, splitext

def add_rules_for_builtin_script(ctx):
    # FIXME: waf runs these always. Why?
    for src in listdir("src"):
        base, ext = splitext(src)
        if (base == "yog2inc") or (ext != ".yog"):
            continue
        rule = "yog {top_dir}/src/yog2inc.yog ${{SRC}} ${{TGT}}"
        ctx(
                rule=rule.format(top_dir=ctx.top_dir),
                target=base + ".inc",
                source=src)

def add_rule_for_yog(ctx):
    target = "yog"
    source = ctx.path.ant_glob("*.c") + [
            "gc/generational.c",
            "gc/copying.c",
            "gc/mark-sweep-compact.c"]
    corgi_dir = "../corgi"
    libffi_dir = "../libffi"
    BigDigits_dir = "../BigDigits"
    includes = [
            "../include",
            corgi_dir + "/include",
            libffi_dir + "/include",
            BigDigits_dir]
    cflags = ["-Wall", "-Werror", "-O2", "-g"]
    lib = ["m", "pthread"]
    linkflags = "-export-dynamic"
    stlib = ["corgi", "ffi", "BigDigits"]
    stlibpath = [
            corgi_dir + "/src/.libs",
            libffi_dir + "/.libs",
            BigDigits_dir + "/build"]
    ctx.program(**locals())

def add_rules_for_parser(ctx):
    header = join("include", "yog", "token.h")
    lemon_dir = join("tools", "lemon")
    lemon = join(lemon_dir, "lemon")
    top_dir = ctx.top_dir
    rule="../{lemon} header={top_dir}/{header} ../src/parser.y"
    ctx(
            rule=rule.format(**locals()),
            source=["parser.y", "parser.lt", "../{lemon}".format(**locals())],
            target=["../{header}".format(**locals()), "parser.c"])
    ctx(
            rule="cd {top_dir}/{lemon_dir} && make".format(**locals()),
            target="../{lemon}".format(**locals()),
            source="../{lemon_dir}/lemon.c".format(**locals()))

def build(ctx):
    add_rules_for_builtin_script(ctx)
    add_rules_for_parser(ctx)
    add_rule_for_yog(ctx)

# vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=python
