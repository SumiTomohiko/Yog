#if !defined(YOG_CLASS_H_INCLUDED)
#define YOG_CLASS_H_INCLUDED

#if defined(HAVE_STDINT_H)
#   include <stdint.h>
#endif
#include "yog/object.h"
#include "yog/yog.h"

typedef void (*GetAttrExecutor)(YogEnv*, YogVal, ID);
typedef YogVal (*GetAttrCaller)(YogEnv*, YogVal, ID);
typedef void (*Executor)(YogEnv*, YogHandle*, uint8_t, YogHandle**, uint8_t, YogHandle**, YogHandle*, YogHandle*, YogHandle*);
typedef YogVal (*Caller)(YogEnv*, YogHandle*, uint8_t, YogHandle**, uint8_t, YogHandle**, YogHandle*, YogHandle*, YogHandle*);

struct YogClass {
    YOGOBJ_HEAD;
    YogVal super;
    Allocator allocator;
    ID name;
    GetAttrExecutor exec_get_attr;
    GetAttrCaller call_get_attr;
    void (*exec_get_descr)(YogEnv*, YogVal, YogVal, YogVal);
    YogVal (*call_get_descr)(YogEnv*, YogVal, YogVal, YogVal);
    void (*exec_set_descr)(YogEnv*, YogVal, YogVal, YogVal);
    Executor exec;
    Caller call;
};

typedef struct YogClass YogClass;

#define TYPE_CLASS TO_TYPE(YogClass_new)

/* PROTOTYPE_START */

/**
 * DON'T EDIT THIS AREA. HERE IS GENERATED BY update_prototype.py.
 */
/* src/class.c */
YogVal YogClass_alloc(YogEnv*, YogVal);
void YogClass_boot(YogEnv*, YogVal, YogVal);
void YogClass_class_init(YogEnv*, YogVal, YogVal);
void YogClass_define_allocator(YogEnv*, YogVal, Allocator);
void YogClass_define_caller(YogEnv*, YogVal, Caller);
void YogClass_define_class_method(YogEnv*, YogVal, YogVal, const char*, YogAPI);
void YogClass_define_class_method2(YogEnv*, YogHandle*, YogHandle*, const char*, void*, ...);
void YogClass_define_descr_get_caller(YogEnv*, YogVal, YogVal (*)(YogEnv*, YogVal, YogVal, YogVal));
void YogClass_define_descr_get_executor(YogEnv*, YogVal, void (*)(YogEnv*, YogVal, YogVal, YogVal));
void YogClass_define_descr_set_executor(YogEnv*, YogVal, void (*)(YogEnv*, YogVal, YogVal, YogVal));
void YogClass_define_executor(YogEnv*, YogVal, Executor);
void YogClass_define_get_attr_caller(YogEnv*, YogVal, GetAttrCaller);
void YogClass_define_get_attr_executor(YogEnv*, YogVal, GetAttrExecutor);
void YogClass_define_method(YogEnv*, YogVal, YogVal, const char*, YogAPI);
void YogClass_define_method2(YogEnv*, YogVal, YogVal, const char*, void*, ...);
void YogClass_define_property(YogEnv*, YogVal, YogVal, const char*, YogAPI, YogAPI);
void YogClass_define_property2(YogEnv*, YogHandle*, YogHandle*, const char*, void*, void*);
YogVal YogClass_get_attr(YogEnv*, YogVal, ID);
YogVal YogClass_get_attr_and_defining_class(YogEnv*, YogVal, ID, YogVal*);
void YogClass_include_module(YogEnv*, YogVal, YogVal);
void YogClass_init(YogEnv*, YogVal, type_t, YogVal);
void YogClass_keep_children(YogEnv*, void*, ObjectKeeper, void*);
YogVal YogClass_new(YogEnv*, const char*, YogVal);

/* PROTOTYPE_END */

#endif
/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4
 */
