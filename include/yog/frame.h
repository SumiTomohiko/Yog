#if !defined(YOG_FRAME_H_INCLUDED)
#define YOG_FRAME_H_INCLUDED

#include "yog/yog.h"

enum YogFrameType {
    FRAME_C,
    FRAME_FINISH,
    FRAME_SCRIPT,
};

typedef enum YogFrameType YogFrameType;

struct YogFrame {
    YogVal prev;
    enum YogFrameType type;
};

typedef struct YogFrame YogFrame;

struct YogCFrame {
    struct YogFrame base;
    YogVal f;
    YogVal multi_val;
};

typedef struct YogCFrame YogCFrame;

struct YogScriptFrame {
    struct YogFrame base;

    uint_t stack_capacity;
    uint_t locals_num;
    uint_t outer_frames_num;

    pc_t pc;
    uint_t stack_size;

    YogVal code;
    YogVal globals;
    YogVal frame_to_long_return;
    YogVal frame_to_long_break;

    uint_t lhs_left_num;
    uint_t lhs_middle_num;
    uint_t lhs_right_num;

    /**
     * Becomes TRUE when YogFunction::outer_frame refers this frame. Once it is
     * TRUE, never returns to FALSE. Used frames are not reused.
     */
    BOOL used_by_func;

    /* Fields used for super */
    YogVal klass;
    ID name;

    /**
     * = Layout of Dynamically Sized Fields
     *
     * == For class statements and package level
     *
     * +--------+
     * :        : statically sized fields
     * +--------+
     * |        | ^ bottom
     * |        | |
     * :        : : stack (stack_capacity)
     * |        | |
     * |        | v top
     * +--------+
     * |        | locals (locals_num == 1) as YogTable
     * +--------+
     * |        |
     * :        : outer frames
     * |        |
     * +--------+
     *
     * == For methods and functions
     *
     * +--------+
     * :        : statically sized fields
     * +--------+
     * |        | ^ bottom
     * |        | |
     * :        : : stack (stack_capacity)
     * |        | |
     * |        | v top
     * +--------+
     * |        |
     * :        : locals (locals_num)
     * |        |
     * +--------+
     * |        |
     * :        : outer frames
     * |        |
     * +--------+
     */
    YogVal locals_etc[0];
};

typedef struct YogScriptFrame YogScriptFrame;

#define YogFinishFrame  YogScriptFrame

#define SCRIPT_FRAME(frame) PTR_AS(YogScriptFrame, (frame))
#define SCRIPT_FRAME_STACK_TOP(frame) (SCRIPT_FRAME((frame))->locals_etc + SCRIPT_FRAME((frame))->stack_size)
#define SCRIPT_FRAME_LOCALS(frame) (SCRIPT_FRAME((frame))->locals_etc + SCRIPT_FRAME((frame))->stack_capacity)
#define SCRIPT_FRAME_OUTER_FRAMES(frame) (SCRIPT_FRAME_LOCALS((frame)) + SCRIPT_FRAME((frame))->locals_num)

/* PROTOTYPE_START */

/**
 * DON'T EDIT THIS AREA. HERE IS GENERATED BY update_prototype.py.
 */
/* src/frame.c */
YOG_EXPORT YogVal YogCFrame_new(YogEnv*);
YOG_EXPORT void YogCFrame_return_multi_value(YogEnv*, YogVal, YogVal);
YOG_EXPORT void YogFinishFrame_clean(YogEnv*, YogVal);
YOG_EXPORT YogVal YogFinishFrame_new(YogEnv*);
YOG_EXPORT YogVal YogFrame_get_c_frame(YogEnv*);
YOG_EXPORT YogVal YogFrame_get_script_frame(YogEnv*, YogVal, uint_t);
YOG_EXPORT void YogScriptFrame_cleanup(YogEnv*, YogVal);
YOG_EXPORT YogVal YogScriptFrame_new(YogEnv*, YogFrameType, YogVal, uint_t, uint_t);
YOG_EXPORT void YogScriptFrame_push_stack(YogEnv*, YogVal, YogVal);

/* PROTOTYPE_END */

#endif
/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4
 */
