#if !defined(__YOG_STRING_H__)
#define __YOG_STRING_H__

#include "yog/object.h"
#include "yog/yog.h"

struct YogCharArray {
    uint_t size;
    char items[0];
};

typedef struct YogCharArray YogCharArray;

struct YogString {
    YOGBASICOBJ_HEAD;
    YogVal encoding;
    uint_t size;
    YogVal body;
};

typedef struct YogString YogString;

#define TYPE_STRING     ((type_t)YogString_new)

#define STRING_CSTR(s)      PTR_AS(YogCharArray, PTR_AS(YogString, s)->body)->items
#define STRING_SIZE(s)      PTR_AS(YogString, s)->size
#define STRING_ENCODING(s)  PTR_AS(YogString, s)->encoding

#include "yog/encoding.h"

/* PROTOTYPE_START */

/**
 * DON'T EDIT THIS AREA. HERE IS GENERATED BY update_prototype.py.
 */
#if defined(__cplusplus)
extern "C" {
#endif
/* src/string.c */
YogVal YogCharArray_new_str(YogEnv*, const char*);
void YogString_add(YogEnv*, YogVal, YogVal);
void YogString_add_cstr(YogEnv*, YogVal, const char*);
char YogString_at(YogEnv*, YogVal, uint_t);
void YogString_clear(YogEnv*, YogVal);
YogVal YogString_clone(YogEnv*, YogVal);
YogVal YogString_define_class(YogEnv*);
char* YogString_dup(YogEnv*, const char*);
void YogString_eval_builtin_script(YogEnv*, YogVal);
int_t YogString_hash(YogEnv*, YogVal);
ID YogString_intern(YogEnv*, YogVal);
YogVal YogString_multiply(YogEnv*, YogVal, int_t);
YogVal YogString_new(YogEnv*);
YogVal YogString_new_format(YogEnv*, const char*, ...);
YogVal YogString_new_range(YogEnv*, YogVal, const char*, const char*);
YogVal YogString_new_size(YogEnv*, uint_t);
YogVal YogString_new_str(YogEnv*, const char*);
void YogString_push(YogEnv*, YogVal, char);
uint_t YogString_size(YogEnv*, YogVal);
YogVal YogString_to_i(YogEnv*, YogVal);


#if defined(__cplusplus)
}
#endif
/* PROTOTYPE_END */

#endif
/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4
 */
