#if !defined(__YOG_GC_H__)
#define __YOG_GC_H__

#define ALLOC_OBJ_SIZE(env, keep_children, finalizer, size) \
    YogGC_alloc(env, keep_children, finalizer, size)
#define ALLOC_OBJ(env, keep_children, finalizer, type) \
    ALLOC_OBJ_SIZE(env, keep_children, finalizer, sizeof(type))
#define ALLOC_OBJ_ITEM(env, keep_children, finalizer, type, size, item_type) \
    ALLOC_OBJ_SIZE(env, keep_children, finalizer, sizeof(type) + size * sizeof(item_type))

#if defined(GC_COPYING)
#   define GC_TYPE  YogCopying
#elif defined(GC_MARK_SWEEP)
#   define GC_TYPE  YogMarkSweep
#elif defined(GC_MARK_SWEEP_COMPACT)
#   define GC_TYPE  YogMarkSweepCompact
#elif defined(GC_GENERATIONAL)
#   define GC_TYPE  YogGenerational
#elif defined(GC_BDW)
#   define GC_TYPE  YogBDW
#endif

#define FREE_FROM_GC(env)   YogGC_free_from_gc(env)
#define BIND_TO_GC(env)     YogGC_bind_to_gc(env)

#include <sys/types.h>
#include "yog/yog.h"

/* PROTOTYPE_START */

/**
 * DON'T EDIT THIS AREA. HERE IS GENERATED BY update_prototype.py.
 */
/* src/gc.c */
YOG_EXPORT YogVal YogGC_alloc(YogEnv*, ChildrenKeeper, Finalizer, size_t);
YOG_EXPORT void YogGC_bind_to_gc(YogEnv*);
YOG_EXPORT void YogGC_delete(YogEnv*);
YOG_EXPORT void YogGC_free_from_gc(YogEnv*);
YOG_EXPORT void YogGC_free_memory(YogEnv*, void*, size_t);
YOG_EXPORT void YogGC_keep(YogEnv*, YogVal*, ObjectKeeper, void*);
YOG_EXPORT void YogGC_perform(YogEnv*);
YOG_EXPORT void YogGC_perform_major(YogEnv*);
YOG_EXPORT void YogGC_perform_minor(YogEnv*);
YOG_EXPORT void YogGC_suspend(YogEnv*);

/* PROTOTYPE_END */

#endif
/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4
 */
