#if !defined(YOG_BINARY_H_INCLUDED)
#define YOG_BINARY_H_INCLUDED

#if defined(HAVE_STDINT_H)
#   include <stdint.h>
#endif
#include "yog/object.h"
#include "yog/yog.h"

struct YogByteArray {
    uint_t size;
    char items[0];
};

typedef struct YogByteArray YogByteArray;

struct YogBinary {
    YOGBASICOBJ_HEAD;
    uint_t size;
    YogVal body;
};

typedef struct YogBinary YogBinary;

#define TYPE_BINARY         TO_TYPE(YogBinary_new)
#define BINARY_BODY(bin)    PTR_AS(YogBinary, (bin))->body
#define BINARY_CSTR(bin)    PTR_AS(YogByteArray, BINARY_BODY(bin))->items
#define BINARY_SIZE(bin)    PTR_AS(YogBinary, (bin))->size

/* PROTOTYPE_START */

/**
 * DON'T EDIT THIS AREA. HERE IS GENERATED BY update_prototype.py.
 */
/* src/binary.c */
void YogBinary_add(YogEnv*, YogVal, const char*, uint_t);
void YogBinary_define_classes(YogEnv*, YogVal);
YogVal YogBinary_new(YogEnv*);
YogVal YogBinary_of_size(YogEnv*, uint_t);
void YogBinary_push_char(YogEnv*, YogVal, char);
void YogBinary_push_id(YogEnv*, YogVal, ID);
void YogBinary_push_pc(YogEnv*, YogVal, pc_t);
void YogBinary_push_uint(YogEnv*, YogVal, uint_t);
void YogBinary_push_uint8(YogEnv*, YogVal, uint8_t);
void YogBinary_shrink(YogEnv*, YogVal);
uint_t YogBinary_size(YogEnv*, YogVal);
YogVal YogBinary_to_s(YogEnv*, YogVal, YogVal);
YogVal YogByteArray_new(YogEnv*, uint_t);
uint_t YogByteArray_size(YogEnv*, YogVal);

/* PROTOTYPE_END */

#endif
/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4
 */
