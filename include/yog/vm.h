#if !defined(__YOG_VM_H__)
#define __YOG_VM_H__

#if HAVE_SYS_TYPES_H
#   include <sys/types.h>
#endif
#include "yog/yog.h"

#define SURVIVE_INDEX_MAX    8

struct YogVm {
    struct {
        BOOL print;
        unsigned int duration_total;
        unsigned int living_obj_num[SURVIVE_INDEX_MAX];
        unsigned int total_obj_num;
        unsigned int num_alloc;
        size_t total_allocated_size;
        unsigned int exec_num;
    } gc_stat;

    ID next_id;
    YogVal id2name;
    YogVal name2id;

    YogVal cObject;
    YogVal cKlass;
    YogVal cInt;
    YogVal cString;
    YogVal cRegexp;
    YogVal cMatch;
    YogVal cPackage;
    YogVal cBool;
    YogVal cBuiltinBoundMethod;
    YogVal cBoundMethod;
    YogVal cBuiltinUnboundMethod;
    YogVal cUnboundMethod;
    YogVal cPackageBlock;
    YogVal cNil;
    YogVal cFloat;

    YogVal eException;
    YogVal eBugException;
    YogVal eTypeError;
    YogVal eIndexError;

    YogVal pkgs;

    YogVal encodings;

    YogVal main_thread;
    YogVal threads;
};

typedef struct YogVm YogVm;

/* PROTOTYPE_START */

/**
 * DON'T EDIT THIS AREA. HERE IS GENERATED BY update_prototype.py.
 */

/* src/vm.c */
void YogVm_boot(YogEnv*, YogVm*);
void YogVm_delete(YogEnv*, YogVm*);
void YogVm_gc(YogEnv*, YogVm*);
const char* YogVm_id2name(YogEnv*, YogVm*, ID);
void YogVm_init(YogVm*);
ID YogVm_intern(YogEnv*, YogVm*, const char*);
void YogVm_keep_children(YogEnv*, void*, ObjectKeeper);
void YogVm_register_package(YogEnv*, YogVm*, const char*, YogVal);

/* PROTOTYPE_END */

#include "yog/env.h"

#define INTERN(s)   YogVm_intern(env, env->vm, s)
#define BUILTINS    "builtins"

#endif
/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4
 */
