#if !defined(__YOG_VM_H__)
#define __YOG_VM_H__

#include "yog/yog.h"

#if GC_COPYING
#   include "yog/gc/copying.h"
#elif GC_MARK_SWEEP
#   include "yog/gc/mark-sweep.h"
#elif GC_MARK_SWEEP_COMPACT
#   include "yog/gc/mark-sweep-compact.h"
#elif GC_GENERATIONAL
#   include "yog/gc/generational.h"
#endif

#define SURVIVE_INDEX_MAX    8

struct YogVm {
    BOOL gc_stress;

    void* (*alloc_mem)(struct YogEnv*, struct YogVm*, ChildrenKeeper, Finalizer, size_t);
    void (*free_mem)(struct YogEnv*, struct YogVm*);
    union {
#if GC_COPYING
        YogCopying copying;
#elif GC_MARK_SWEEP
        YogMarkSweep mark_sweep;
#elif GC_MARK_SWEEP_COMPACT
        YogMarkSweepCompact mark_sweep_compact;
#elif GC_GENERATIONAL
        YogGenerational generational;
#endif
    } gc;
    struct {
        BOOL print;
        unsigned int duration_total;
        unsigned int living_obj_num[SURVIVE_INDEX_MAX];
        unsigned int total_obj_num;
        unsigned int num_alloc;
        size_t total_allocated_size;
        unsigned int exec_num;
    } gc_stat;

    ID next_id;
    YogVal id2name;
    YogVal name2id;

    YogVal cObject;
    YogVal cKlass;
    YogVal cInt;
    YogVal cString;
    YogVal cRegexp;
    YogVal cMatch;
    YogVal cPackage;
    YogVal cBool;
    YogVal cBuiltinBoundMethod;
    YogVal cBoundMethod;
    YogVal cBuiltinUnboundMethod;
    YogVal cUnboundMethod;
    YogVal cPackageBlock;
    YogVal cNil;
    YogVal cFloat;

    YogVal eException;
    YogVal eBugException;
    YogVal eTypeError;
    YogVal eIndexError;

    YogVal pkgs;

    YogVal encodings;

    struct YogThreadCtx* thread;
};

typedef struct YogVm YogVm;

/* PROTOTYPE_START */

/**
 * DON'T EDIT THIS AREA. HERE IS GENERATED BY update_prototype.py.
 */

/* src/vm.c */
YogVal YogVm_alloc(YogEnv*, YogVm*, ChildrenKeeper, Finalizer, size_t);
void YogVm_boot(YogEnv*, YogVm*);
void YogVm_config_copying(YogEnv*, YogVm*, unsigned int);
void YogVm_config_generational(YogEnv*, YogVm*, size_t, size_t, size_t, unsigned int);
void YogVm_config_mark_sweep(YogEnv*, YogVm*, size_t);
void YogVm_config_mark_sweep_compact(YogEnv*, YogVm*, size_t, size_t);
void YogVm_delete(YogEnv*, YogVm*);
void YogVm_gc(YogEnv*, YogVm*);
const char* YogVm_id2name(YogEnv*, YogVm*, ID);
void YogVm_init(YogVm*);
ID YogVm_intern(YogEnv*, YogVm*, const char*);
void YogVm_register_package(YogEnv*, YogVm*, const char*, YogVal);

/* PROTOTYPE_END */

#include "yog/env.h"

#define ALLOC_OBJ_SIZE(env, keep_children, finalizer, size) \
    YogVm_alloc(env, env->vm, keep_children, finalizer, size)
#define ALLOC_OBJ(env, keep_children, finalizer, type) \
    ALLOC_OBJ_SIZE(env, keep_children, finalizer, sizeof(type))
#define ALLOC_OBJ_ITEM(env, keep_children, finalizer, type, size, item_type) \
    ALLOC_OBJ_SIZE(env, keep_children, finalizer, sizeof(type) + size * sizeof(item_type))
#define REALLOC_OBJ(env, ptr, size) \
    YogVm_realloc(env, ENV_VM(env), ptr, size)

#define INTERN(s)   YogVm_intern(env, env->vm, s)
#define BUILTINS    "builtins"

#endif
/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4
 */
