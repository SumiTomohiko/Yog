#if !defined(__YOG_VM_H__)
#define __YOG_VM_H__

#include <pthread.h>
#include <semaphore.h>
#if HAVE_SYS_TYPES_H
#   include <sys/types.h>
#endif
#include "yog/gc.h"
#if defined(GC_COPYING)
#   include "yog/gc/copying.h"
#elif defined(GC_MARK_SWEEP)
#   include "yog/gc/mark-sweep.h"
#elif defined(GC_MARK_SWEEP_COMPACT)
#   include "yog/gc/mark-sweep-compact.h"
#elif defined(GC_GENERATIONAL)
#   include "yog/gc/generational.h"
#elif defined(GC_BDW)
#   include "yog/gc/bdw.h"
#endif
#include "yog/yog.h"

#define SURVIVE_INDEX_MAX    8

struct YogVm {
    BOOL gc_stress;

    struct {
        BOOL print;
        unsigned int duration_total;
        unsigned int living_obj_num[SURVIVE_INDEX_MAX];
        unsigned int total_obj_num;
        unsigned int num_alloc;
        size_t total_allocated_size;
        unsigned int exec_num;
    } gc_stat;

    ID next_id;
    YogVal id2name;
    YogVal name2id;

    YogVal cObject;
    YogVal cKlass;
    YogVal cInt;
    YogVal cString;
    YogVal cRegexp;
    YogVal cMatch;
    YogVal cPackage;
    YogVal cBool;
    YogVal cBuiltinBoundMethod;
    YogVal cBoundMethod;
    YogVal cBuiltinUnboundMethod;
    YogVal cUnboundMethod;
    YogVal cPackageBlock;
    YogVal cNil;
    YogVal cFloat;
    YogVal cThread;

    YogVal eException;
    YogVal eBugException;
    YogVal eTypeError;
    YogVal eIndexError;

    YogVal pkgs;

    YogVal encodings;

    YogVal main_thread;
    YogVal running_threads;

    pthread_mutex_t global_interp_lock;
    struct GC_TYPE* heaps;
    struct GC_TYPE* last_heap;
    pthread_cond_t vm_finish_cond;
    sem_t suspend_sem;
};

typedef struct YogVm YogVm;

/* PROTOTYPE_START */

/**
 * DON'T EDIT THIS AREA. HERE IS GENERATED BY update_prototype.py.
 */

/* src/vm.c */
void YogVm_add_heap(YogEnv*, YogVm*, GC_TYPE*);
void YogVm_add_thread(YogEnv*, YogVm*, YogVal);
void YogVm_aquire_global_interp_lock(YogEnv*, YogVm*);
void YogVm_boot(YogEnv*, YogVm*);
unsigned int YogVm_count_running_threads(YogEnv*, YogVm*);
void YogVm_delete(YogEnv*, YogVm*);
void YogVm_gc(YogEnv*, YogVm*);
const char* YogVm_id2name(YogEnv*, YogVm*, ID);
void YogVm_init(YogEnv*, YogVm*);
ID YogVm_intern(YogEnv*, YogVm*, const char*);
void YogVm_keep_children(YogEnv*, void*, ObjectKeeper, void*);
void YogVm_register_package(YogEnv*, YogVm*, const char*, YogVal);
void YogVm_release_global_interp_lock(YogEnv*, YogVm*);
void YogVm_remove_thread(YogEnv*, YogVm*, YogVal);
void YogVm_set_main_thread(YogEnv*, YogVm*, YogVal);
void YogVm_wait_finish(YogEnv*, YogVm*);

/* PROTOTYPE_END */

#include "yog/env.h"

#define INTERN(s)   YogVm_intern(env, env->vm, s)
#define BUILTINS    "builtins"

#endif
/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4
 */
