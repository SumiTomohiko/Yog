#ifndef __YOG_PARSER_H__
#define __YOG_PARSER_H__

#include <stdio.h>
#include "yog/yog.h"

enum YogNodeType {
    NODE_ASSIGN, 
    NODE_ATTR, 
    NODE_BLOCK_ARG, 
    NODE_BLOCK_PARAM, 
    NODE_BREAK, 
    NODE_COMMAND_CALL, 
    NODE_EXCEPT, 
    NODE_EXCEPT_BODY, 
    NODE_FINALLY, 
    NODE_FUNC_CALL, 
    NODE_FUNC_DEF, 
    NODE_IF, 
    NODE_KLASS, 
    NODE_KW_PARAM, 
    NODE_LITERAL, 
    NODE_METHOD_CALL, 
    NODE_NEXT, 
    NODE_PARAM, 
    NODE_RETURN, 
    NODE_SUBSCRIPT, 
    NODE_VARIABLE, 
    NODE_VAR_PARAM, 
    NODE_WHILE, 
};

typedef enum YogNodeType YogNodeType;

struct YogNode {
    YogNodeType type;
    unsigned int lineno;
    union {
        struct {
            struct YogNode* left;
            struct YogNode* right;
        } assign;
        struct {
            struct YogNode* obj;
            ID name;
        } attr;
        struct {
            struct YogArray* params;
            struct YogArray* stmts;
        } blockarg;
        struct {
            struct YogNode* expr;
        } break_;
        struct {
            ID name;
            struct YogArray* args;
            struct YogNode* blockarg;
        } command_call;
        struct {
            struct YogArray* head;
            struct YogArray* excepts;
            struct YogArray* else_;
        } except;
        struct {
            struct YogNode* type;
            ID var;
            struct YogArray* stmts;
        } except_body;
        struct {
            struct YogArray* head;
            struct YogArray* body;
        } finally;
        struct {
            struct YogNode* callee;
            struct YogArray* args;
            struct YogNode* blockarg;
        } func_call;
        struct {
            ID name;
            struct YogArray* params;
            struct YogArray* stmts;
        } funcdef;
        struct {
            struct YogNode* test;
            struct YogArray* stmts;
            struct YogArray* tail;
        } if_;
        struct {
            ID name;
            struct YogNode* super;
            struct YogArray* stmts;
        } klass;
        struct {
            struct YogVal val;
        } literal;
        struct {
            struct YogNode* recv;
            ID name;
            struct YogArray* args;
            struct YogNode* blockarg;
        } method_call;
        struct {
            struct YogNode* expr;
        } next;
        struct {
            ID name;
            struct YogNode* default_;
        } param;
        struct {
            struct YogNode* expr;
        } return_;
        struct {
            struct YogNode* prefix;
            struct YogNode* index;
        } subscript;
        struct {
            ID id;
        } variable;
        struct {
            struct YogNode* test;
            struct YogArray* stmts;
        } while_;
    } u;
};

#define NO_EXC_VAR  (UINT_MAX)

typedef struct YogNode YogNode;

enum YogLexerState {
    LS_EXPR, 
    LS_NAME, 
    LS_OP, 
};

typedef enum YogLexerState YogLexerState;

struct YogLexer {
    enum YogLexerState state;
    struct YogEnv* env;
    FILE* fp;
    struct YogString* line;
    unsigned int next_index;
    struct YogString* buffer;
};

typedef struct YogLexer YogLexer;

struct YogParser {
    struct YogEnv* env;
    struct YogLexer* lexer;
    struct YogArray* stmts;
    int lineno;
};

typedef struct YogParser YogParser;

/* PROTOTYPE_START */

/**
 * DON'T EDIT THIS AREA. HERE IS GENERATED BY update_prototype.py.
 */

/* src/lexer.c */
YogLexer* YogLexer_new(YogEnv*);
void YogLexer_read_encoding(YogEnv*, YogLexer*);
int yylex(YogLexer*);

/* src/parser.y */
void YogParser_initialize(YogEnv*, YogParser*);
void YogParser_keep_children(YogEnv*, void*, ObjectKeeper);
YogArray* YogParser_parse_file(YogEnv*, YogParser*, const char*);

/* PROTOTYPE_END */

#endif
/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4
 */
