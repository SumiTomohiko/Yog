#ifndef __YOG_PARSER_H__
#define __YOG_PARSER_H__

#include <stdio.h>
#include "yog/yog.h"

enum YogNodeType {
    NODE_ASSIGN, 
    NODE_ATTR, 
    NODE_BLOCK_ARG, 
    NODE_BLOCK_PARAM, 
    NODE_BREAK, 
    NODE_COMMAND_CALL, 
    NODE_EXCEPT, 
    NODE_EXCEPT_BODY, 
    NODE_FINALLY, 
    NODE_FUNC_CALL, 
    NODE_FUNC_DEF, 
    NODE_IF, 
    NODE_KLASS, 
    NODE_KW_PARAM, 
    NODE_LITERAL, 
    NODE_METHOD_CALL, 
    NODE_NEXT, 
    NODE_PARAM, 
    NODE_VARIABLE, 
    NODE_VAR_PARAM, 
    NODE_WHILE, 
};

typedef enum YogNodeType YogNodeType;

struct YogNode {
    YogNodeType type;
    unsigned int lineno;
    union {
        ID id;
        YogVal val;
        struct YogNode* nd;
        struct YogArray* array;
    } u1;
    union {
        ID id;
        struct YogNode* nd;
        struct YogArray* array;
    } u2;
    union {
        struct YogArray* array;
    } u3;
    union {
        struct YogNode* nd;
        struct YogArray* array;
    } u4;
};

#define NODE_LEFT(node)     (node)->u1.id
#define NODE_RIGHT(node)    (node)->u2.nd

#define NODE_ID(node)       (node)->u1.id

#define NODE_VAL(node)      (node)->u1.val

#define NODE_RECEIVER(node) (node)->u1.nd
#define NODE_METHOD(node)   (node)->u2.id
#define NODE_COMMAND(node)  (node)->u2.id
#define NODE_CALLEE(node)   (node)->u1.nd
#define NODE_ARGS(node)     (node)->u3.array
#define NODE_BLOCK(node)    (node)->u4.nd

#define NODE_NAME(node)     (node)->u1.id
#define NODE_PARAMS(node)   (node)->u2.array
#define NODE_STMTS(node)    (node)->u3.array
#define NODE_DEFAULT(node)  (node)->u2.nd

#define NODE_HEAD(node)     (node)->u1.array
#define NODE_BODY(node)     (node)->u3.array
#define NODE_EXCEPTS(node)  (node)->u2.array
#define NODE_ELSE(node)     (node)->u3.array
#define NODE_EXC_TYPE(node) (node)->u1.nd
#define NODE_EXC_VAR(node)  (node)->u2.id
#define NO_EXC_VAR          (UINT_MAX)

#define NODE_TEST(node)     (node)->u1.nd

#define NODE_EXPR(node)     (node)->u1.nd

#define NODE_IF_TEST(node)  (node)->u1.nd
#define NODE_IF_STMTS(node) (node)->u2.array
#define NODE_IF_TAIL(node)  (node)->u3.array

#define NODE_OBJ(node)      (node)->u2.nd

#define NODE_SUPER(node)    (node)->u2.nd

typedef struct YogNode YogNode;

struct YogLexer {
    struct YogEnv* env;
    struct YogEncoding* encoding;
    FILE* fp;
    struct YogString* line;
    unsigned int next_index;
    struct YogString* buffer;
};

typedef struct YogLexer YogLexer;

struct YogParser {
    struct YogEnv* env;
    struct YogLexer* lexer;
    struct YogArray* stmts;
};

typedef struct YogParser YogParser;

/* $PROTOTYPE_START$ */

/**
 * DON'T EDIT THIS AREA. HERE IS GENERATED BY update_prototype.py.
 */

/* src/lexer.c */
YogLexer* YogLexer_new(YogEnv*);
void YogLexer_read_encoding(YogEnv*, YogLexer*);
int yylex(YogLexer*);

/* src/parser.y */
YogParser* YogParser_new(YogEnv*);
YogArray* YogParser_parse_file(YogEnv*, YogParser*, const char*);

/* $PROTOTYPE_END$ */

#endif
/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4
 */
