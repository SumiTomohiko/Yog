/**
 * This file was generated by "../tools/inst.py insts.def .." automatically.
 * DO NOT TOUCH!!
 */
#if !defined(__YOG_INST_H__)
#define __YOG_INST_H__

#include "yog/opcodes.h"
#include "yog/yog.h"

enum InstType {
    INST_ANCHOR,
    INST_LABEL,
    INST_OP,
};

typedef enum InstType InstType;

struct YogInst {
    YogVal next;

    enum InstType type;
    enum OpCode opcode;
    union {

        struct {
            ID id;
        } load_special;
        struct {
        } pop;
        struct {
            uint8_t index;
        } push_const;
        struct {
            uint8_t index;
        } make_string;
        struct {
            ID id;
        } store_name;
        struct {
            uint8_t index;
        } store_local;
        struct {
        } make_function;
        struct {
            uint8_t argc;
            uint8_t kwargc;
            uint8_t blockargc;
            uint8_t varargc;
            uint8_t varkwargc;
        } call_function;
        struct {
            ID id;
        } load_global;
        struct {
            ID id;
        } load_name;
        struct {
            uint8_t index;
        } load_local;
        struct {
            YogVal dest;
        } jump;
        struct {
            YogVal dest;
        } jump_if_true;
        struct {
            YogVal dest;
        } jump_if_false;
        struct {
        } dup;
        struct {
        } make_klass;
        struct {
        } push_self_name;
        struct {
        } ret;
        struct {
            uint8_t level;
            uint8_t index;
        } store_nonlocal;
        struct {
            uint8_t level;
            uint8_t index;
        } load_nonlocal;
        struct {
            ID name;
        } store_global;
        struct {
            ID name;
        } load_attr;
        struct {
            uint8_t size;
        } make_array;
        struct {
        } finish;
        struct {
        } print_top;
        struct {
            ID name;
        } store_attr;
        struct {
        } not;
    } u;

    uint_t lineno;
    pc_t pc;
    uint_t size;
};

#define INST_OPCODE(v)  (INST(v)->opcode)

#define LOAD_SPECIAL_ID(inst) (INST(inst)->u.load_special.id)
#define PUSH_CONST_INDEX(inst) (INST(inst)->u.push_const.index)
#define MAKE_STRING_INDEX(inst) (INST(inst)->u.make_string.index)
#define STORE_NAME_ID(inst) (INST(inst)->u.store_name.id)
#define STORE_LOCAL_INDEX(inst) (INST(inst)->u.store_local.index)
#define CALL_FUNCTION_ARGC(inst) (INST(inst)->u.call_function.argc)
#define CALL_FUNCTION_KWARGC(inst) (INST(inst)->u.call_function.kwargc)
#define CALL_FUNCTION_BLOCKARGC(inst) (INST(inst)->u.call_function.blockargc)
#define CALL_FUNCTION_VARARGC(inst) (INST(inst)->u.call_function.varargc)
#define CALL_FUNCTION_VARKWARGC(inst) (INST(inst)->u.call_function.varkwargc)
#define LOAD_GLOBAL_ID(inst) (INST(inst)->u.load_global.id)
#define LOAD_NAME_ID(inst) (INST(inst)->u.load_name.id)
#define LOAD_LOCAL_INDEX(inst) (INST(inst)->u.load_local.index)
#define JUMP_DEST(inst) (INST(inst)->u.jump.dest)
#define JUMP_IF_TRUE_DEST(inst) (INST(inst)->u.jump_if_true.dest)
#define JUMP_IF_FALSE_DEST(inst) (INST(inst)->u.jump_if_false.dest)
#define STORE_NONLOCAL_LEVEL(inst) (INST(inst)->u.store_nonlocal.level)
#define STORE_NONLOCAL_INDEX(inst) (INST(inst)->u.store_nonlocal.index)
#define LOAD_NONLOCAL_LEVEL(inst) (INST(inst)->u.load_nonlocal.level)
#define LOAD_NONLOCAL_INDEX(inst) (INST(inst)->u.load_nonlocal.index)
#define STORE_GLOBAL_NAME(inst) (INST(inst)->u.store_global.name)
#define LOAD_ATTR_NAME(inst) (INST(inst)->u.load_attr.name)
#define MAKE_ARRAY_SIZE(inst) (INST(inst)->u.make_array.size)
#define STORE_ATTR_NAME(inst) (INST(inst)->u.store_attr.name)

typedef struct YogInst YogInst;

#define INST(v)     PTR_AS(YogInst, (v))

/* PROTOTYPE_START */

/**
 * DON'T EDIT THIS AREA. HERE IS GENERATED BY update_prototype.py.
 */

/* src/inst.c */
uint_t Yog_get_inst_size(OpCode);

/* PROTOTYPE_END */

#endif
/**
 * vim: tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=c
 */
