
from c import Macro, parse, parse_macro
from c.grammar import ArrayNode, BinopNode, BitFieldNode, CallNode, ConstantNode, EnumNode, ExprNode, PointerNode, ProtoNode, SizeofNode, StructBaseNode, StructNode, TypedefNode, UnaryNode, VarNode, get_typedef_name

def build_command(headers, opts)
  cmd = ["/usr/bin/gcc", "-E"] + opts
  headers.each() do [header]
    cmd.extend(["-include", header])
  end
  cmd << "-"
  return cmd
end

class H2YogError > Exception
end

def run_gcc(headers, opts, &block=nil)
  cmd = build_command(headers, opts)
  status, stdout, _ = run_command(*cmd, &block)
  #puts("{0}:{1} cmd={2}".format(__FILE__, __LINE__, cmd))
  #puts("{0}:{1} status={2}".format(__FILE__, __LINE__, status))
  #puts("{0}:{1} stdout={2}".format(__FILE__, __LINE__, stdout))
  #puts("{0}:{1} stderr={2}".format(__FILE__, __LINE__, _))
  if status != 0
    raise H2YogError.new("failed: {0}".format(cmd.join(" ")))
  end
  return stdout
end

def parse_to_nodes(headers, typedef_names, verbose, &block)
  nodes, macros = parse(run_gcc(headers, ["-dD"]), typedef_names, verbose)
  return nodes.select(&block), macros.select(&block)
end

def get_macros_implementation(headers, macros)
  if macros.empty?
    return []
  end
  stdout = run_gcc(headers, []) do [stdin]
    macros.each() do [macro]
      args = macro.args != nil ? "({0})".format(macro.args) : ""
      stdin.write("{0}{1}\n".format(macro.name, args))
    end
  end
  mark = "# 1 \"<stdin>\"\n"
  pos = stdout.find(mark, stdout.find("\n"))
  impls = stdout.slice(pos + mark.size).split("\n")
  return impls.slice(0, impls.size - 1) # remove last empty string
end

def spec2yog(spec)
  if spec.kind_of?(StructBaseNode)
    return spec.name.to_s()
  end

  unsigned? = false
  short? = false
  long? = false
  long_long? = false
  basic = 'int
  spec.each() do [sym]
    if sym == 'void
      return 'void.inspect()
    end
    if sym == 'unsigned
      unsigned? = true
    elif sym == 'short
      short? = true
    elif sym == 'long
      if long?
        long_long? = true
      else
        long? = true
      end
    elif sym == 'char
      basic = 'char
    elif sym == 'float
      return 'float.inspect()
    elif sym == 'double
      basic = 'double
    elif !['int, 'signed].include?(sym)
      return sym.to_s()
    end
  end
  if basic == 'char
    return (unsigned? ? 'uchar : 'char).inspect()
  end
  if basic == 'double
    return (long? ? 'longdouble : 'double).inspect()
  end
  if short?
    return (unsigned? ? 'ushort : 'short).inspect()
  end
  if long_long?
    return (unsigned? ? 'ulonglong : 'longlong).inspect()
  end
  if long?
    return (unsigned? ? 'ulong : 'long).inspect()
  end
  return (unsigned? ? 'uint : 'int).inspect()
end

# FIXME: DON'T DO IT
defined_structs = Set.new()

def get_struct_name_for_pointer(spec)
  name = spec2yog(spec)
  return defined_structs.include?(name.to_sym()) ? name : 'void.inspect()
end

def find_char(spec)
  if spec.size == 0
    return false
  end
  if spec[0] == 'char
    return true
  end
  return find_char(spec.slice(1))
end

def char?(spec)
  if !spec.kind_of?(Array)
    return false
  end
  return find_char(spec)
end

def pointer2yog(spec, decl)
  if !decl.kind_of?(PointerNode)
    return spec2yog(spec)
  end
  if char?(spec)
    # TODO: Improved to be able to specify an encoding.
    return "['string, ENCODINGS[{0}]]".format("ascii".inspect())
  end
  return "['pointer, {0}]".format(get_struct_name_for_pointer(spec))
end

def get_array_size(decl)
  if decl.kind_of?(ArrayNode)
    return decl.size
  end
  if decl.kind_of?(PointerNode)
    return get_array_size(decl.node)
  end
  if decl.kind_of?(ProtoNode)
    return get_array_size(decl.name)
  end
  return nil
end

def make_type_text_of_scalar(spec, decl)
  if decl.kind_of?(ProtoNode) && decl.name.kind_of?(PointerNode)
    return "[{0}, {1}]".format('pointer.inspect(), 'void.inspect())
  end
  return pointer2yog(spec, decl)
end

def make_type_text(spec, decl)
  type = make_type_text_of_scalar(spec, decl)
  size = get_array_size(decl)
  return size == nil ? type : "[{0}, {1}]".format(type, node2yog(size))
end

def enum2yog(node, name)
  yog = name ? "{0} = 'int\n".format(name) : ""

  FMT = "{0} = {1}"
  content = node.contents[0]
  yog << FMT.format(content.name, node2yog(content.expr) || 0) << "\n"
  prev = content.name

  yog << node.contents.slice(1).map() do [content]
    value = node2yog(content.expr) || "{0} + 1".format(prev)
    s = FMT.format(content.name, value)
    prev = content.name
    next s
  end.join("\n")

  return yog
end

def struct_content2yog(contents)
  return contents.map() do [content]
    next content.names.map() do [name]
      type = make_struct_field_type(content.type, name)
      next <<EOF.rtrim().format(type, get_typedef_name(name).inspect())
  [{0}, {1}]
EOF
    end.join(",\n")
  end.join(",\n")
end

def find_basic_type(type)
  if (basic = type_map.get(type)) == nil
    return type
  end
  return find_basic_type(basic)
end

def unsigned_bit?(type)
  if type.size == 0
    return false
  end
  sym = type[0]
  if sym == 'signed
    return false
  end
  if sym == 'unsigned
    return true
  end
  basic = find_basic_type(sym.to_s())
  UNSIGNED_TYPES = {
    "'uchar", "'ushort", "'uint", "'ulonglong", "'uint8", "'uint16", "'uint32",
    "'uint64" }
  if UNSIGNED_TYPES.include?(basic)
    return true
  end
  SIGNED_TYPES = {
    "'char", "'short", "'int", "'longlong", "'int8", "'int16", "'int32",
    "'int64" }
  if SIGNED_TYPES.include?(basic)
    return false
  end
  return unsigned_bit?(type.slice(1))
end

def make_struct_field_type(type, name)
  if name.kind_of?(BitFieldNode)
    sym = unsigned_bit?(type) ? 'ubit : 'bit
    return "[{0}, {1}]".format(sym.inspect(), node2yog(name.width))
  end
  if !type.kind_of?(StructBaseNode) || (type.contents == nil)
    return make_type_text(type, name)
  end
  tag = type.kind_of?(StructNode) ? 'struct : 'union
  return "[{0}, [{1}]]".format(tag.inspect(), struct_content2yog(type.contents))
end

def struct_base2yog(node, klass, name)
  defined_structs << name

  head = <<EOF.format(name, name.to_s().inspect(), klass)
{0} = {2}.new({1})
{0}.define_fields([
EOF
  return head + struct_content2yog(node.contents).rtrim() + "])\n"
end

def struct2yog(node, name)
  return struct_base2yog(node, "StructClass", name)
end

def union2yog(node, name)
  return struct_base2yog(node, "UnionClass", name)
end

def unsigned?(type)
  if (type.size == 0) || (type[0] == 'signed)
    return false
  end
  if type[0] == 'unsigned
    return true
  end
  return unsigned?(type.slice(1))
end

# FIXME: Make class and move type_map to it.
type_map = {}

def register_type_map(name, type)
  type_map[name.to_s()] = type.to_s()
end

def typedef2yog(type, init_decl)
  decl = init_decl.declarator
  name = get_typedef_name(decl)
  f = partial("{0} = {1}\n".format, name)
  attrs = init_decl.attrs
  if !attrs.empty? && ((attr = attrs[0]).name == '__mode__)
    MODE2YOG = {
      'DI: "int64", 'SI: "int32", 'HI: "int16", 'QI: "int8", 'byte: "int8",
      'word: "int16", 'pointer: "int32", 'SF: "float", 'DF: "longdouble" }
    base_type = MODE2YOG[attr.args[0].to_s().gsub("__", "").to_sym()]
    act_type = ((unsigned?(type) ? "u" : "") + base_type).to_sym()
    register_type_map(name, act_type)
    return f(act_type.inspect())
  end

  txt = make_type_text(type, decl)
  register_type_map(name, txt)
  return f(txt)
end

def params2yog(params)
  if params.size == 1
    param = params[0]
    spec = param.spec
    if spec.kind_of?(Array) && (spec.size == 1) && (spec[0] == 'void)
      if !param.declarator.kind_of?(PointerNode)
        return ""
      end
    end
  end
  return params.map() do [param]
    next make_type_text(param.spec, param.declarator)
  end.join(", ")
end

def proto2yog(type, decl)
  fmt = "{0} = lib.load_func({1}, [{2}], {3})"
  body = get_pointer_body(decl)
  name = body.name
  params = params2yog(body.params)
  rettype = make_type_text(type, decl)
  return fmt.format(name, name.to_s().inspect(), params, rettype)
end

def init_declators2yog(node, f)
  type = node.spec.type
  return node.init_declarators.map() do [init_decl]
    next f(type, init_decl.declarator)
  end.join("")
end

def node2yog(node)
  if node == nil
    return nil
  end
  if node.kind_of?(BinopNode)
    left = node2yog(node.left)
    right = node2yog(node.right)
    return "({0} {1} {2})".format(left, node.op.to_s(), right)
  end
  if node.kind_of?(SizeofNode)
    # TODO: Implement here
    return "0"
  end
  if node.kind_of?(CallNode)
    args = node.args.map() do [arg]
      next node2yog(arg)
    end
    return "{0}({1})".format(node2yog(node.name), args.join(", "))
  end
  if node.kind_of?(ConstantNode)
    return node.value.inspect()
  end
  if node.kind_of?(VarNode)
    return node.name.to_s()
  end
  if node.kind_of?(UnaryNode)
    return "{0}({1})".format(node.op, node2yog(node.expr))
  end
  spec = node.spec
  if spec.kind_of?(TypedefNode)
    type = spec.type
    if type.kind_of?(StructBaseNode) && (type.contents != nil)
      f = type.kind_of?(StructNode) ? struct2yog : union2yog
      return init_declators2yog(node, f)
    end
    if type.kind_of?(EnumNode)
      return init_declators2yog(node, enum2yog)
    end
    return node.init_declarators.map(&partial(typedef2yog, type)).join("")
  end
  if spec.kind_of?(StructBaseNode)
    if spec.contents != nil
      f = spec.kind_of?(StructNode) ? struct2yog : union2yog
      return f(spec, spec.name)
    elif node.init_declarators.empty?
      return "{0} = {1}\n".format(spec.name, 'void.inspect())
    end
  end
  if spec.kind_of?(EnumNode)
    return enum2yog(spec, spec.name)
  end
  return node.init_declarators.map() do [init_decl]
    decl = init_decl.declarator
    if decl.kind_of?(ProtoNode)
      next proto2yog(spec, decl)
    end
    if decl.kind_of?(PointerNode) && decl.node.kind_of?(ProtoNode)
      next proto2yog(spec, decl)
    end
    next ""
  end.join("")
end

def get_pointer_body(node)
  return node.kind_of?(PointerNode) ? node.node : node
end

class MacroImpl
  def init(macro, impl)
    self.macro = macro
    self.impl = impl
  end

  def get_lineno()
    return self.macro.lineno
  end

  lineno = property(get_lineno)
end

def h2yog(yog, headers, so, predefined={}, verbose=false, &block)
  typedef_names = Set.new()
  nodes, macros = parse_to_nodes(headers, typedef_names, verbose) do [node]
    if node == nil
      next false
    end
    if node.kind_of?(Macro)
      next block(node.filename, node.name)
    end
    spec = node.spec
    if spec.kind_of?(StructBaseNode) || spec.kind_of?(EnumNode)
      next block(spec.filename, spec.name)
    end
    next node.init_declarators.select() do [init_decl]
      decl = init_decl.declarator
      if spec.kind_of?(TypedefNode)
        next block(spec.filename, get_typedef_name(decl))
      end
      if (proto = get_pointer_body(decl)).kind_of?(ProtoNode)
        if proto.name.kind_of?(PointerNode)
          next false
        end
        next block(decl.filename, proto.name)
      end
      next false
    end.size != 0
  end
  impls = macros.zip(get_macros_implementation(headers, macros)).map() do [args]
    next MacroImpl.new(args[0], args[1])
  end

  # FIXME: Is defined_structs deplicated with typedef_names?
  defined_structs.extend(predefined.values.reduce(Set.new()) do [init, val]
    next init + val.to_set()
  end)
  File.open(yog, "w") do [fp]
    predefined.each() do [key, value]
      fp.write("from {0} import {1}\n".format(key, value.map() do [sym]
        next sym.to_s()
      end.join(", ")))
    end
    fp.write("lib = load_lib({0})\n".format(so.inspect()))
    (nodes + impls).sort() do [a, b]
      next a.lineno <=> b.lineno
    end.each() do [obj]
      if !obj.kind_of?(MacroImpl)
        fp.write("{0}\n".format(node2yog(obj)))
        next
      end
      node, _ = parse_macro(obj.impl + ";", typedef_names, verbose)
      if (node == nil) || node.empty?
        next
      end
      macro = obj.macro
      n = node[0]
      if macro.args == nil
        if (src = node2yog(n)) != nil
          fp.write("{0} = {1}\n".format(macro.name, src))
        end
        next
      end
      if !n.kind_of?(ExprNode)
        next
      end
      if (src = node2yog(n)) != nil
        fp.write(<<EOF.format(macro.name, macro.args, src))
def {0}({1})
  return {2}
end
EOF
      end
    end
  end
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
