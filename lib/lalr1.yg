
ROOT_RULE = 0

class Token
  def init(type, value=nil)
    self.type = type
    self.value = value
  end

  def to_s()
    return "<Token type={0} value={1}>".format(self.type, self.value)
  end
end

def nop(s)
end

def get_token_internal(get_token, logger)
  token = get_token()
  logger("Read token: {0}".format(token))
  return token
end

def log_state_stack(stack, logger)
  logger("State stack: {0}".format(stack.join(" ")))
end

class Parser
  def init()
    self.state_stack = [0]
    self.stack = []
  end

  def reduce(gram, rule, __data__, log)
    log("Reduced using rule {0}".format(rule))
    log(gram.get_rule(rule))
    size = gram.get_rule_size(rule)
    obj = gram.invoke(rule, size == 0 ? [] : self.stack.slice(- size), __data__)
    self.stack = self.stack.slice(0, self.stack.size - size) + [obj]
    self.state_stack = self.state_stack.slice(0, self.state_stack.size - size)
    next_state = gram.get_next_state(self.state_stack[-1], rule)
    self.state_stack << next_state
    log("New state is {0}".format(next_state))
    log_state_stack(self.state_stack, log)
  end

  def process_reduce_only_states(gram, __data__, log)
    rule = gram.get_reduce_only_rule(self.state_stack[-1])
    if (rule == nil) || (rule == ROOT_RULE)
      return
    end
    self.reduce(gram, rule, __data__, log)
    self.process_reduce_only_states(gram, __data__, log)
  end
end

def parse(gram, get_token, __data__, logger=nil)
  log = logger || nop

  parser = Parser.new()
  token = get_token_internal(get_token, log)
  loop() do
    state = parser.state_stack[-1]
    type = token != nil ? token.type : "$".to_sym()
    act, subinfo = gram.get_action(state, type)
    if act == 'error
      log("Error")
      return nil
    end
    if act == 'shift
      parser.state_stack << subinfo
      log("Shifted to state {0}".format(subinfo))
      log_state_stack(parser.state_stack, log)
      parser.stack << token
      log("Process reduce only states")
      parser.process_reduce_only_states(gram, __data__, log)
      token = get_token_internal(get_token, log)
      next
    end
    # reduce
    if subinfo == ROOT_RULE
      log("Accepted")
      return parser.stack[-1]
    end
    parser.reduce(gram, subinfo, __data__, log)
    log("Process reduce only states")
    parser.process_reduce_only_states(gram, __data__, log)
  end
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
