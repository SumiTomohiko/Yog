
class Token
  def init(type, value=nil)
    self.type = type
    self.value = value
  end

  def to_s()
    return "<Token type={0} value={1}>".format(self.type, self.value)
  end
end

def parse(gram, get_token)
  state_stack = [0]
  stack = []
  token = get_token()
  loop() do
    state = state_stack[-1]
    type = token != nil ? token.type : "$".to_sym()
    act, subinfo = gram.get_action(state, type)
    if act == 'shift
      state_stack << subinfo
      stack << token
      token = get_token()
      next
    end
    if subinfo == 0
      return stack[-1]
    end
    size = gram.get_rule_size(subinfo)
    obj = gram.invoke(subinfo, size == 0 ? [] : stack.slice(- size))
    stack = stack.slice(0, stack.size - size) + [obj]
    state_stack = state_stack.slice(0, state_stack.size - size)
    state_stack << gram.get_next_state(state_stack[-1], subinfo)
  end
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
