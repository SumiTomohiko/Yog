
def find_libc()
  try
    File.open("/proc/self/maps", "r") do [fp]
      while line = fp.readline()
        path = line.trim().split().get(5, "")
        if path =~ /\blibc\b/
          return path
        end
      end
    end
  except SystemError
  end
end

lib = load_lib(find_libc())
free = lib.load_func("free", ['pointer])

socket = lib.load_func("socket", ['int, 'int, 'int], 'int)
PF_UNSPEC = 0
PF_LOCAL = 1
PF_UNIX = PF_LOCAL
PF_FILE = PF_LOCAL
PF_INET = 2
PF_AX25 = 3
PF_IPX = 4
PF_APPLETALK = 5
PF_NETROM = 6
PF_BRIDGE = 7
PF_ATMPVC = 8
PF_X25 = 9
PF_INET6 = 10
PF_ROSE = 11
PF_DECnet = 12
PF_NETBEUI = 13
PF_SECURITY = 14
PF_KEY = 15
PF_NETLINK = 16
PF_ROUTE = PF_NETLINK
PF_PACKET = 17
PF_ASH = 18
PF_ECONET = 19
PF_ATMSVC = 20
PF_SNA = 22
PF_IRDA = 23
PF_PPPOX = 24
PF_WANPIPE = 25
PF_BLUETOOTH = 31
PF_IUCV = 32
PF_RXRPC = 33
PF_MAX = 34
AF_UNSPEC	= PF_UNSPEC
AF_LOCAL = PF_LOCAL
AF_UNIX = PF_UNIX
AF_FILE = PF_FILE
AF_INET = PF_INET
AF_AX25 = PF_AX25
AF_IPX = PF_IPX
AF_APPLETALK = PF_APPLETALK
AF_NETROM = PF_NETROM
AF_BRIDGE = PF_BRIDGE
AF_ATMPVC = PF_ATMPVC
AF_X25 = PF_X25
AF_INET6 = PF_INET6
AF_ROSE = PF_ROSE
AF_DECnet = PF_DECnet
AF_NETBEUI = PF_NETBEUI
AF_SECURITY = PF_SECURITY
AF_KEY = PF_KEY
AF_NETLINK = PF_NETLINK
AF_ROUTE = PF_ROUTE
AF_PACKET = PF_PACKET
AF_ASH = PF_ASH
AF_ECONET = PF_ECONET
AF_ATMSVC = PF_ATMSVC
AF_SNA = PF_SNA
AF_IRDA = PF_IRDA
AF_PPPOX = PF_PPPOX
AF_WANPIPE = PF_WANPIPE
AF_BLUETOOTH = PF_BLUETOOTH
AF_IUCV = PF_IUCV
AF_RXRPC = PF_RXRPC
AF_MAX = PF_MAX
SOCK_STREAM = 1
SOCK_DGRAM = 2
SOCK_RAW = 3
SOCK_RDM = 4
SOCK_SEQPACKET = 5
SOCK_PACKET = 10
send = lib.load_func("send", ['int, Buffer, 'uint, 'int], 'uint)
sockaddr = StructClass.new("sockaddr", [
  ['ushort, 'sa_family],
  [['char, 14], 'sa_data]])
connect = lib.load_func("connect", ['int, sockaddr, 'uint], 'int)

close = lib.load_func("close", ['int], 'int)

if ARGV.get(0) == __FILE__
  s = socket(AF_INET, SOCK_STREAM, 0)
  close(s)
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
