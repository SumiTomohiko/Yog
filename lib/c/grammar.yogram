
# This grammar came from gcc-4.2-4.2.4/gc-4.2-20070719/gcc/c-parser.c.

%{
class Node
  def init(filename, lineno)
    self.filename = filename
    self.lineno = lineno
  end
end

class InitDeclaratorNode > Node
  def init(filename, lineno, declarator, attrs=[])
    super(filename, lineno)
    self.declarator = declarator
    self.attrs = attrs
  end
end

class AttributeNode > Node
  def init(filename, lineno, name, args)
    super(filename, lineno)
    self.name = name
    self.args = args
  end
end

class SizeofNode > Node
  def init(filename, lineno, expr)
    super(filename, lineno)
    self.expr = expr
  end
end

class UnaryNode > Node
  def init(filename, lineno, op, expr)
    super(filename, lineno)
    self.op = op
    self.expr = expr
  end
end

class ArrayNode > Node
  def init(filename, lineno, decl, size)
    super(filename, lineno)
    self.decl = decl
    self.size = size
  end
end

class VarNode > Node
  def init(filename, lineno, name)
    super(filename, lineno)
    self.name = name
  end
end

class BinopNode > Node
  def init(filename, lineno, left, op, right)
    # Bug: Cannot call Node#init
    #super(filename, lineno)
    self.filename = filename
    self.lineno = lineno

    self.left = left
    self.op = op
    self.right = right
  end

  def to_s()
    return "<BinopNode op={0}>".format(self.op)
  end
end

class EnumFieldNode > Node
  def init(filename, lineno, name, expr=nil)
    super(filename, lineno)
    self.name = name
    self.expr = expr
  end
end

class ParameterDeclarationNode > Node
  def init(filename, lineno, spec, declarator)
    super(filename, lineno)
    self.spec = spec
    self.declarator = declarator
  end
end

class DeclarationNode > Node
  def init(filename, lineno, spec, init_declarators=[])
    super(filename, lineno)
    self.spec = spec
    self.init_declarators = init_declarators
  end
end

class PointerNode > Node
  def init(filename, lineno)
    super(filename, lineno)
    self.num = 1
    self.node = nil
  end
end

class ConstantNode > Node
  def init(filename, lineno, value)
    super(filename, lineno)
    self.value = value
  end
end

class TypedefNode > Node
  def init(filename, lineno, type)
    super(filename, lineno)
    self.type = type
  end
end

class StructFieldNode > Node
  def init(filename, lineno, type, names=nil)
    super(filename, lineno)
    self.type = type
    self.names = names
  end

  def to_s()
    return "<StructFieldNode type={0} names={1}".format(self.type, self.names)
  end
end

class StructBaseNode > Node
  def init(filename, lineno, name, contents=nil)
    # Bug: super cannot call Node#init
    #super(filename, lineno)
    self.filename = filename
    self.lineno = lineno

    self.name = name
    self.contents = contents
  end
end

class StructNode > StructBaseNode
end

class UnionNode > StructBaseNode
end

class BitFieldNode > Node
  def init(filename, lineno, name, width)
    super(filename, lineno)
    self.name = name
    self.width = width
  end
end

class EnumNode > Node
  def init(filename, lineno, name, contents=nil)
    super(filename, lineno)
    self.name = name
    self.contents = contents
  end
end

class ProtoNode > Node
  def init(filename, lineno, name, params)
    super(filename, lineno)
    self.name = name
    self.params = params
  end
end

def get_typedef_name(decl)
  if decl.kind_of?(Symbol)
    return decl
  end
  if decl.kind_of?(PointerNode)
    return get_typedef_name(decl.node)
  end
  if decl.kind_of?(ProtoNode) || decl.kind_of?(BitFieldNode)
    return get_typedef_name(decl.name)
  end
  if decl.kind_of?(ArrayNode)
    return get_typedef_name(decl.decl)
  end
  raise SyntaxError.new("Unsupported typedef")
end

def create_array(obj)
  return obj != nil ? [obj] : []
end
%}

translation_unit  : external_declarations {
  return external_declarations
}
                  | <macro_mark> block_item_list {
  return block_item_list
}
                  | (: empty :) {
  return []
}
;

external_declarations : external_declaration {
  if external_declaration == nil
    return []
  end
  return [external_declaration]
}
                      | external_declarations external_declaration {
  if external_declaration == nil
    return external_declarations
  end
  return external_declarations + [external_declaration]
}
;

external_declaration  : function_definition {
}
                      | declaration {
  return declaration
}
                      | asm_definition {
}
                      | <semicolon> {
}
                      | <__extension__> external_declaration {
  return external_declaration
}
;

(:
 : The rule of function_definition in GCC has declaration_list_opt in it. But
 : this causes shift/reduce confict. This grammar aims to parse SDL/SDL.h which
 : doesn't need declaration_list_opt. So declaration_list_opt is ignored here.
 :
 : c-wrapper 0.6.1 for Gauche seems to ignore __attribute__ to avoid this
 : conflict (see src/c-lex.c and lib/c-wrapper/c-lex.scm in c-wrapper).
 :)
function_definition : declaration_specifiers declarator (: declaration_list_opt :) compound_statement {
}
                    | declarator (: declaration_list_opt :) compound_statement {
}
;

declaration : declaration_specifiers init_declarator_list <semicolon> {
  if declaration_specifiers.kind_of?(TypedefNode)
    init_declarator_list.each() do [init_decl]
      __data__.typedef_names << get_typedef_name(init_decl.declarator)
    end
  end
  return DeclarationNode.new(__data__.filename, __data__.lineno, declaration_specifiers, init_declarator_list)
}
            | declaration_specifiers <semicolon> {
  return DeclarationNode.new(__data__.filename, __data__.lineno, declaration_specifiers)
}
;

asm_definition  : simple_asm_expr <semicolon> {
}
;

declaration_specifiers_opt  : (: empty :) {
}
                            | declaration_specifiers {
  return declaration_specifiers
}
;

declarator_opt  : (: empty :) {
}
                | declarator {
  return declarator
}
;

declarator  : pointer_opt direct_declarator {
  if pointer_opt == nil
    return direct_declarator
  end
  pointer_opt.node = direct_declarator
  return pointer_opt
}
;

compound_statement  : <lbrace> block_item_list_opt <rbrace> {
}
                    | <lbrace> label_declarations block_item_list <rbrace> {
}
;

declaration_specifiers  : storage_class_specifier declaration_specifiers_opt {
  if declaration_specifiers_opt == nil
    return nil
  end
  if { 'extern, 'static, 'auto, 'register }.include?(storage_class_specifier)
    return declaration_specifiers_opt
  end
  return TypedefNode.new(__data__.filename, __data__.lineno, declaration_specifiers_opt)
}
                        | type_specifier declaration_specifiers_opt {
  if type_specifier.kind_of?(Symbol)
    return [type_specifier] + (declaration_specifiers_opt || [])
  end
  return type_specifier
}
                        | type_qualifier declaration_specifiers_opt {
  return declaration_specifiers_opt
}
                        | function_specifier declaration_specifiers_opt {
  return declaration_specifiers_opt
}
                        | attributes declaration_specifiers_opt {
  return declaration_specifiers_opt
}
;

declaration_list_opt  : (: empty :) {
}
                      | declaration_list {
  return declaration_list
}
;

declaration_list  : declaration {
}
                  | declaration_list declaration {
}
;

init_declarator_list_opt  : (: empty :) {
  return []
}
                          | init_declarator_list {
  return init_declarator_list
}
;

init_declarator_list  : init_declarator {
  return [init_declarator]
}
                      | init_declarator_list <comma> init_declarator {
  return init_declarator_list + [init_declarator]
}
;

init_declarator_head  : declarator {
  return InitDeclaratorNode.new(__data__.filename, __data__.lineno, declarator)
}
                      | declarator simple_asm_expr {
  return InitDeclaratorNode.new(__data__.filename, __data__.lineno, declarator)
}
                      | declarator attributes {
  return InitDeclaratorNode.new(__data__.filename, __data__.lineno, declarator, attributes)
}
                      | declarator simple_asm_expr attributes {
  return InitDeclaratorNode.new(__data__.filename, __data__.lineno, declarator, attributes)
}
;

init_declarator : init_declarator_head {
  return init_declarator_head
}
                | init_declarator_head <equal> initializer {
  return init_declarator_head
}
;

nested_function_definition  : declaration_specifiers declarator declaration_list_opt compound_statement {
}
;

storage_class_specifier : <typedef> {
  return 'typedef
}
                        | <extern> {
  return 'extern
}
                        | <static> {
  return 'static
}
                        | <auto> {
  return 'auto
}
                        | <register> {
  return 'register
}
;

function_specifier  : <inline> {
}
;

type_specifier  : <void> {
  return 'void
}
                | <char> {
  return 'char
}
                | <short> {
  return 'short
}
                | <int> {
  return 'int
}
                | <long> {
  return 'long
}
                | <float> {
  return 'float
}
                | <double> {
  return 'double
}
                | <signed> {
  return 'signed
}
                | <unsigned> {
  return 'unsigned
}
                | <_Bool> {
  return '_Bool
}
                | <_Complex> {
  return '_Complex
}
                | struct_or_union_specifier {
  return struct_or_union_specifier
}
                | enum_specifier {
  return enum_specifier
}
                | <typedef_name> {
  return typedef_name.value
}
;

type_qualifier_opt  : (: empty :) {
}
                    | type_qualifier {
}
;

type_qualifier  : <const> {
  return 'const
}
                | <restrict> {
  return 'restrict
}
                | <volatile> {
  return 'volatile
}
;

storage_class_specifier : <__thread> {
}
;

type_specifier  : typeof_specifier {
  return typeof_specifier
}
                | <_Decimal32> {
}
                | <_Decimal64> {
}
                | <_Decimal128> {
}
;

enum_specifier  : <enum> attributes_opt identifier_opt <lbrace> enumerator_list <rbrace> attributes_opt {
  return EnumNode.new(__data__.filename, __data__.lineno, identifier_opt, enumerator_list)
}
                | <enum> attributes_opt identifier_opt <lbrace> enumerator_list <comma> <rbrace> attributes_opt {
  return EnumNode.new(__data__.filename, __data__.lineno, identifier_opt, enumerator_list)
}
                | <enum> attributes_opt <identifier> {
  return EnumNode.new(__data__.filename, __data__.lineno, identifier.value)
}
;

identifier_opt  : (: empty :) {
}
                | <identifier> {
  return identifier.value
}
;

enumerator_list : enumerator {
  return [enumerator]
}
                | enumerator_list <comma> enumerator {
  return enumerator_list + [enumerator]
}
;

enumerator  : enumeration_constant {
  return EnumFieldNode.new(__data__.filename, __data__.lineno, enumeration_constant)
}
            | enumeration_constant <equal> constant_expression {
  return EnumFieldNode.new(__data__.filename, __data__.lineno, enumeration_constant, constant_expression)
}
;

enumeration_constant  : <identifier> {
  return identifier.value
}
;

struct_or_union_specifier : struct_or_union attributes_opt identifier_opt <lbrace> struct_contents <rbrace> attributes_opt {
  return struct_or_union.new(__data__.filename, __data__.lineno, identifier_opt, struct_contents)
}
                          | struct_or_union attributes_opt <identifier> {
  return struct_or_union.new(__data__.filename, __data__.lineno, identifier.value)
}
                          | struct_or_union attributes_opt <typedef_name> {
  return struct_or_union.new(__data__.filename, __data__.lineno, typedef_name.value)
}
;

struct_or_union : <struct> {
  return StructNode
}
                | <union> {
  return UnionNode
}
;

struct_contents : struct_declaration_list {
  return struct_declaration_list
}
;

struct_declaration_list : struct_declaration <semicolon> {
  return [struct_declaration]
}
                        | struct_declaration_list struct_declaration <semicolon> {
  return struct_declaration_list + [struct_declaration]
}
                        | <semicolon> {
  return []
}
;

struct_declaration  : specifier_qualifier_list struct_declarator_list {
  return StructFieldNode.new(__data__.filename, __data__.lineno, specifier_qualifier_list, struct_declarator_list)
}
                    | <__extension__> struct_declaration {
  return struct_declaration
}
                    | specifier_qualifier_list {
  return StructFieldNode.new(__data__.filename, __data__.lineno, specifier_qualifier_list)
}
;

specifier_qualifier_list_opt  : (: empty :) {
}
                              | specifier_qualifier_list {
  return specifier_qualifier_list
}
;

specifier_qualifier_list  : type_specifier specifier_qualifier_list_opt {
  if type_specifier.kind_of?(Symbol)
    return [type_specifier] + (specifier_qualifier_list_opt || [])
  end
  return type_specifier
}
                          | type_qualifier specifier_qualifier_list_opt {
  return specifier_qualifier_list_opt
}
                          | attributes specifier_qualifier_list_opt {
  return specifier_qualifier_list_opt
}
;

struct_declarator_list  : struct_declarator {
  return [struct_declarator]
}
                        | struct_declarator_list <comma> attributes_opt struct_declarator {
  return struct_declarator_list + [struct_declarator]
}
;

struct_declarator : declarator attributes_opt {
  return declarator
}
                  | declarator_opt <colon> constant_expression attributes_opt {
  return BitFieldNode.new(__data__.filename, __data__.lineno, declarator_opt, constant_expression)
}
;

typeof_specifier  : <typeof> <lpar> expression <rpar> {
}
                  | <typeof> <lpar> type_name <rpar> {
}
;

assignment_expression_opt : (: empty :) {
}
                          | assignment_expression {
  return assignment_expression
}
;

array_declarator  : <lbracket> assignment_expression_opt <rbracket> {
  return assignment_expression_opt
}
;

direct_declarator : <identifier> {
  return identifier.value
}
                  | <lpar> attributes_opt declarator <rpar> {
  return declarator
}
                  | direct_declarator array_declarator {
  return ArrayNode.new(__data__.filename, __data__.lineno, direct_declarator, array_declarator)
}
                  | direct_declarator <lpar> parameter_type_list <rpar> {
  return ProtoNode.new(__data__.filename, __data__.lineno, direct_declarator, parameter_type_list)
}
                  | direct_declarator <lpar> identifier_list_opt <rpar> {
  params = identifier_list_opt.map() do
    next ['int]
  end
  return ProtoNode.new(__data__.filename, __data__.lineno, direct_declarator, params)
}
                  | direct_declarator <lpar> parameter_forward_declarations parameter_type_list_opt <rpar> {
  return direct_declarator
}
;

pointer_opt : (: empty :) {
}
            | pointer {
  return pointer
}
;

pointer : <star> type_qualifier_list_opt {
  return PointerNode.new(__data__.filename, __data__.lineno)
}
        | <star> type_qualifier_list_opt pointer {
  pointer.num += 1
  return pointer
}
;

type_qualifier_list_opt : (: empty :) {
}
                        | type_qualifier_list {
}
;

type_qualifier_list : type_qualifier {
}
                    | attributes {
}
                    | type_qualifier_list type_qualifier {
}
                    | type_qualifier_list attributes {
}
;

parameter_type_list_opt : (: empty :) {
}
                        | parameter_type_list {
}
;

parameter_type_list : parameter_list {
  return parameter_list
}
                    | parameter_list <comma> <dots> {
  return parameter_list
}
;

parameter_list  : parameter_declaration {
  return [parameter_declaration]
}
                | parameter_list <comma> parameter_declaration {
  return parameter_list + [parameter_declaration]
}
;

parameter_declaration : declaration_specifiers declarator attributes_opt {
  return ParameterDeclarationNode.new(__data__.filename, __data__.lineno, declaration_specifiers, declarator)
}
                      | declaration_specifiers abstract_declarator_opt attributes_opt {
  return ParameterDeclarationNode.new(__data__.filename, __data__.lineno, declaration_specifiers, abstract_declarator_opt)
}
;

identifier_list_opt : (: empty :) {
  return []
}
                    | identifier_list {
  return identifier_list
}
;

identifier_list : <identifier> {
  return [identifier.value]
}
                | identifier_list <colon> <identifier> {
  return identifier_list + [identifier.value]
}
;

abstract_declarator_opt : (: empty :) {
}
                        | abstract_declarator {
  return abstract_declarator
}
;

abstract_declarator : pointer {
  return pointer
}
                    | pointer_opt direct_abstract_declarator {
  return pointer_opt
}
;

direct_abstract_declarator_opt  : (: empty :) {
}
                                | direct_abstract_declarator {
}
;

direct_abstract_declarator  : <lpar> attributes_opt abstract_declarator <rpar> {
}
                            | direct_abstract_declarator_opt array_declarator {
}
                            | direct_abstract_declarator_opt <lpar> parameter_type_list_opt <rpar> {
}
                            | direct_abstract_declarator_opt <lpar> parameter_forward_declarations parameter_type_list_opt <rpar> {
}
;

parameter_forward_declarations  : parameter_list <semicolon> {
}
                                | parameter_forward_declarations parameter_list <semicolon> {
}
;

string_literals : <string_literal> {
}
                | string_literals <string_literal> {
}
;

asm_string_literal  : string_literals {
}
;

simple_asm_expr_opt : (: empty :) {
}
                    | simple_asm_expr {
}
;

simple_asm_expr : <asm> <lpar> asm_string_literal <rpar> {
}
;

attributes_opt  : (: empty :) {
}
                | attributes {
}
;

attributes  : attribute {
  return attribute
}
            | attributes attribute {
  return attributes + attribute
}
;

attribute : <__attribute__> <lpar> <lpar> attribute_list <rpar> <rpar> {
  return attribute_list
}
;

attribute_list  : attrib {
  return create_array(attrib)
}
                | attribute_list <comma> attrib {
  return attribute_list + create_array(attrib)
}
;

attrib  : (: empty :) {
}
        | any_word {
  return AttributeNode.new(__data__.filename, __data__.lineno, any_word, [])
}
        | any_word <lpar> <identifier> <rpar> {
  return AttributeNode.new(__data__.filename, __data__.lineno, any_word, [identifier.value])
}
        | any_word <lpar> <identifier> <comma> nonempty_expr_list <rpar> {
  return AttributeNode.new(__data__.filename, __data__.lineno, any_word, [identifier.value] + nonempty_expr_list)
}
        | any_word <lpar> expr_list <rpar> {
  return AttributeNode.new(__data__.filename, __data__.lineno, any_word, expr_list)
}
;

any_word : <static> {
  return 'static
}
            | <unsigned> {
  return 'unsigned
}
            | <long> {
  return 'long
}
            | <const> {
  return 'const
}
            | <extern> {
  return 'extern
}
            | <register> {
  return 'register
}
            | <typedef> {
  return 'typedef
}
            | <short> {
  return 'short
}
            | <inline> {
  return 'inline
}
            | <volatile> {
  return 'volatile
}
            | <signed> {
  return 'signed
}
            | <auto> {
  return 'auto
}
            | <restrict> {
  return 'restrict
}
            | <_Complex> {
  return '_Complex
}
            | <__thread> {
  return '__thread
}
            | <int> {
  return 'int
}
            | <char> {
  return 'char
}
            | <float> {
  return 'float
}
            | <double> {
  return 'double
}
            | <void> {
  return 'void
}
            | <_Decimal32> {
  return '_Decimal32
}
            | <_Decimal64> {
  return '_Decimal64
}
            | <_Decimal128> {
  return '_Decimal128
}
            | <_Bool> {
  return '_Bool
}
            | <identifier> {
  return identifier.value
}
;

type_name : specifier_qualifier_list abstract_declarator_opt {
}
;

initializer : assignment_expression {
}
            | <lbrace> initializer_list <rbrace> {
}
            | <lbrace> initializer_list <comma> <rbrace> {
}
            | <lbrace> <rbrace> {
}
;

initializer_list  : designation_opt initializer {
}
                  | initializer_list <comma> designation_opt initializer {
}
;

designation_opt : (: empty :) {
}
                | designation {
  return designation
}
;

designation : designator_list <equal> {
}
;

designator_list : designator {
  return [designator]
}
                | designator_list designator {
  return designator_list + [designator]
}
;

designator  : array_designator {
}
            | <dot> <identifier> {
}
;

array_designator  : <lbracket> constant_expression <rbracket> {
}
;

designation : array_designator {
}
            | <identifier> <semicolon> {
}
;

array_designator  : <lbracket> constant_expression <dots> constant_expression <rbracket> {
}
;

block_item_list_opt : (: empty :) {
}
                    | block_item_list {
}
;

block_item_list : block_item {
  return [block_item]
}
                | block_item_list block_item {
  return block_item_list + [block_item]
}
;

block_item  : nested_declaration {
}
            | statement {
  return statement
}
;

nested_declaration  : declaration {
}
                    | <__extension__> nested_declaration {
}
                    | nested_function_definition {
}
;

label_declarations  : label_declaration {
}
                    | label_declarations label_declaration {
}
;

label_declaration : <__label__> identifier_list <semicolon> {
}
;

label : <identifier> <colon> attributes_opt {
}
      | <case> constant_expression <colon> {
}
      | <case> constant_expression <dots> constant_expression <colon> {
}
      | <default> <colon> {
}
;

constant_expression : assignment_expression {
  return assignment_expression
}
;

statement : labeled_statement {
}
          | compound_statement {
}
          | expression_statement {
  return expression_statement
}
          | selection_statement {
}
          | iteration_statement {
}
          | jump_statement {
}
          | asm_statement {
}
;

labeled_statement : label statement {
}
;

expression_statement  : expression_opt <semicolon> {
  return expression_opt
}
;

selection_statement : if_statement {
}
                    | switch_statement {
}
;

iteration_statement : while_statement {
}
                    | do_statement {
}
                    | for_statement {
}
;

jump_statement  : <goto> <identifier> <semicolon> {
}
                | <continue> <semicolon> {
}
                | break_@<break> <semicolon> {
}
                | return_@<return> expression_opt <semicolon> {
}
;

jump_statement  : <goto> <star> expression <semicolon> {
}
;

condition : <lpar> expression <rpar> {
}
;

if_statement  : if_@<if> <lpar> expression <rpar> statement {
}
              | if_@<if> <lpar> expression <rpar> statement else_@<else> statement {
}
;

switch_statement  : <switch> <lpar> expression <rpar> statement {
}
;

while_statement : while_@<while> <lpar> expression <rpar> statement {
}
;

do_statement  : do_@<do> statement while_@<while> <lpar> expression <rpar> <semicolon> {
}
;

for_statement : <for> <lpar> expression_opt <semicolon> expression_opt <semicolon> expression_opt <rpar> statement {
}
              | <for> <lpar> nested_declaration expression_opt <semicolon> expression_opt <rpar> statement {
}
;

asm_statement : <asm> type_qualifier_opt <lpar> asm_argument <rpar> <semicolon> {
}
;

asm_argument  : asm_string_literal {
}
              | asm_string_literal <colon> asm_operands_opt {
}
              | asm_string_literal <colon> asm_operands_opt <colon> asm_operands_opt {
}
              | asm_string_literal <colon> asm_operands_opt <colon> asm_operands_opt <colon> asm_clobbers {
}
;

asm_operands_opt  : (: empty :) {
}
                  | asm_operands {
}
;

asm_operands  : asm_operand {
}
              | asm_operands <comma> asm_operand {
}
;

asm_operand : asm_string_literal <lpar> expression <rpar> {
}
            | <lbracket> <identifier> <rbracket> asm_string_literal <lpar> expression <rpar> {
}
;

asm_clobbers  : asm_string_literal {
}
              | asm_clobbers <comma> asm_string_literal {
}
;

assignment_expression : conditional_expression {
  return conditional_expression
}
                      | unary_expression assignment_operator assignment_expression {
}
;

assignment_operator : <equal> {
}
                    | <star_equal> {
}
                    | <div_equal> {
}
                    | <percent_equal> {
}
                    | <plus_equal> {
}
                    | <minus_equal> {
}
                    | <lshift_equal> {
}
                    | <rshift_equal> {
}
                    | <and_equal> {
}
                    | <xor_equal> {
}
                    | <or_equal> {
}
;

conditional_expression  : logical_or_expression {
  return logical_or_expression
}
                        | logical_or_expression <question> expression <colon> conditional_expression {
}
                        | logical_or_expression <question> <colon> conditional_expression {
}
;

multiplicative_expression : cast_expression {
  return cast_expression
}
                          | multiplicative_expression <star> cast_expression {
  return BinopNode.new(__data__.filename, __data__.lineno, multiplicative_expression, star.value, cast_expression)
}
                          | multiplicative_expression <div> cast_expression {
}
                          | multiplicative_expression <percent> cast_expression {
}
;

additive_expression : multiplicative_expression {
  return multiplicative_expression
}
                    | additive_expression <plus> multiplicative_expression {
}
                    | additive_expression <minus> multiplicative_expression {
  return BinopNode.new(__data__.filename, __data__.lineno, additive_expression, minus.value, multiplicative_expression)
}
;

shift_expression  : additive_expression {
  return additive_expression
}
                  | shift_expression <lshift> additive_expression {
  return BinopNode.new(__data__.filename, __data__.lineno, shift_expression, lshift.value, additive_expression)
}
                  | shift_expression <rshift> additive_expression {
}
;

relational_expression : shift_expression {
  return shift_expression
}
                      | relational_expression <less> shift_expression {
}
                      | relational_expression <greater> shift_expression {
}
                      | relational_expression <less_equal> shift_expression {
}
                      | relational_expression <greater_equal> shift_expression {
}
;

equality_expression : relational_expression {
  return relational_expression
}
                    | equality_expression <equal_equal> relational_expression {
  return BinopNode.new(__data__.filename, __data__.lineno, equality_expression, equal_equal.value, relational_expression)
}
                    | equality_expression <not_equal> relational_expression {
}
;

and_expression  : equality_expression {
  return equality_expression
}
                | and_expression <and> equality_expression {
}
;

exclusive_or_expression : and_expression {
  return and_expression
}
                        | exclusive_or_expression <xor> and_expression {
}
;

inclusive_or_expression : exclusive_or_expression {
  return exclusive_or_expression
}
                        | inclusive_or_expression <or> exclusive_or_expression {
  return BinopNode.new(__data__.filename, __data__.lineno, inclusive_or_expression, or.value, exclusive_or_expression)
}
;

logical_and_expression  : inclusive_or_expression {
  return inclusive_or_expression
}
                        | logical_and_expression <and_and> inclusive_or_expression {
}
;

logical_or_expression : logical_and_expression {
  return logical_and_expression
}
                      | logical_or_expression <or_or> logical_and_expression {
}
;

cast_expression : unary_expression {
  return unary_expression
}
                | <lpar> type_name <rpar> unary_expression {
  return unary_expression
}
;

unary_expression  : postfix_expression {
  return postfix_expression
}
                  | <plus_plus> unary_expression {
}
                  | <minus_minus> unary_expression {
}
                  | unary_operator cast_expression {
  return UnaryNode.new(__data__.filename, __data__.lineno, unary_operator, cast_expression)
}
                  | <sizeof> unary_expression {
}
                  | <sizeof> <lpar> type_name <rpar> {
  return SizeofNode.new(__data__.filename, __data__.lineno, type_name)
}
                  | <__alignof__> unary_expression {
}
                  | <__alignof__> <lpar> type_name <rpar> {
}
                  | <and_and> <identifier> {
}
;

unary_operator  : <and> {
}
                | <star> {
}
                | <plus> {
}
                | <minus> {
  return minus.value
}
                | <tilda> {
  return tilda.value
}
                | <not> {
}
                | <__extension__> {
}
                | <__real__> {
}
                | <__imag__> {
}
;

postfix_expression  : primary_expression {
  return primary_expression
}
                    | postfix_expression <lbracket> expression <rbracket> {
}
                    | postfix_expression <lpar> argument_expression_list_opt <rpar> {
}
                    | postfix_expression <dot> <identifier> {
}
                    | postfix_expression <arrow> <identifier> {
}
                    | postfix_expression <plus_plus> {
}
                    | postfix_expression <minus_minus> {
}
                    | <lpar> type_name <rpar> <lbracket> initializer_list <rbracket> {
}
                    | <lpar> type_name <rpar> <lbracket> initializer_list <comma> <rbracket> {
}
;

argument_expression_list_opt  : (: empty :) {
}
                              | argument_expression_list {
}
;

argument_expression_list  : argument_expression {
}
                          | argument_expression_list <comma> argument_expression {
}
;

argument_expression : expression {
}
;

primary_expression  : <identifier> {
  return VarNode.new(__data__.filename, __data__.lineno, identifier.value)
}
                    | <constant> {
  return ConstantNode.new(__data__.filename, __data__.lineno, constant.value)
}
                    | string_literals {
}
                    | <lpar> expression <rpar> {
  return expression
}
                    | <__func__> {
}
                    | <__FUNCTION__> {
}
                    | <__PRETTY_FUNCTION__> {
}
                    | <lpar> compound_statement <rpar> {
}
                    | <__builtin_va_arg> <lpar> assignment_expression <comma> type_name <rpar> {
}
                    | <__builtin_offsetof> <lpar> type_name <comma> offsetof_member_designator <rpar> {
}
                    | <__builtin_choose_expr> <lpar> assignment_expression <comma> assignment_expression <comma> assignment_expression <rpar> {
}
                    | <__builtin_types_compatible_p> <lpar> type_name <comma> type_name <rpar> {
}
;

offsetof_member_designator  : <identifier> {
}
                            | offsetof_member_designator <dot> <identifier> {
}
                            | offsetof_member_designator <lbracket> expression <rbracket> {
}
;

expression_opt  : (: empty :) {
}
                | expression {
  return expression
}
;

expression  : assignment_expression {
  return assignment_expression
}
            | expression <comma> assignment_expression {
}
;

expr_list : (: empty :) {
  return []
}
          | nonempty_expr_list {
  return nonempty_expr_list
}
;

nonempty_expr_list  : assignment_expression {
  return [assignment_expression]
}
                    | nonempty_expr_list <comma> assignment_expression {
  return nonempty_expr_list + [assignment_expression]
}
;

(:
 : vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
 :)
