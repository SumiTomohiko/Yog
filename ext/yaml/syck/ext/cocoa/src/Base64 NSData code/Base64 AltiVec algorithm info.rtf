{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww16320\viewh13880\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f0\b\fs24 \cf0 A study of encoding data to Base64 using AltiVec.\

\f1\b0 By Kyle Hammond.
\f0\b \
\
Speed comparisons of the Base64 encoding schemes.\
\

\f1\b0 This was done using a sample file of approximately 1700 data objects averaging 1900 bytes of data each.  Line endings were NOT added.  The more data you will be encoding in one chunk, the better ratio you will achieve with AltiVec.\
\
Original (non-AltiVec)	Cleaned Up (non-AltiVec)		AltiVec		Ratio\
3560.09 ms			61.2994 ms				30.502 ms		79 : 2 : 1\
\
The huge speedup we see between the original and the cleaned up code is due to allocating the memory for all the outbound data prior to the encoding loop.  The original non-AltiVec code allocated memory in small chunks every time through the loop, which is horrendously slow.\

\f0\b \
Speed comparisons of the Base64 decoding schemes (using same sample file as encoding comparison).
\f1\b0 \
\
This was done using a sample file of approximately 1700 data objects averaging 1900 bytes of data each.  Line endings were NOT present.  The more data you will be decoding in one chunk, the better ratio you will achieve with AltiVec.\
\
Original (non-AltiVec)	Cleaned Up (non-AltiVec)		AltiVec		Ratio\
321.089 ms			235.016 ms				118.533 ms		2.7 : 2 : 1\

\f0\b \
Note:
\f1\b0  If you don't have the original code that I had left posted on the 'net for almost four years, don't worry about it.  It was slow (as you can see above) and not particularly pretty.  The new code is very much faster and works quite well.  About the only speedups left are to do the encode/decode in multiple threads (only on a multi-processor system) and/or some AltiVec improvements that may be available.  I'm no AltiVec expert, but I can blunder through something as simple (simplicity is all relative, of course) as this algorithm.
\f0\b \
\
hex	== decimal	==	binary\

\f2\b0\fs22 0xFC	== 252	==	1 1 1 1 1 1 0 0\
0x03	== 3		==	0 0 0 0 0 0 1 1\
0x30	== 48		==	0 0 1 1 0 0 0 0\
\
0xF0	== 240	==	1 1 1 1 0 0 0 0\
0x0F	== 15		==	0 0 0 0 1 1 1 1\
0x3C	== 60		==	0 0 1 1 1 1 0 0\
\
0xC0	== 192	==	1 1 0 0 0 0 0 0\
0x3F	== 63		==	0 0 1 1 1 1 1 1\
\

\f1\fs24 Non-AltiVec implementation code: \
\

\f2\fs22 outBuf[ 0 ] = (inbuf[0] & 0xFC) >> 2		// top six bits of inbuf[0] shifted right two\
outBuf[ 1 ] = (inbuf[0] & 0x03) << 4		// bottom two bits of inbuf[0] shifted left four\
			| (inbuf[1] & 0xF0) >> 4; 	// top four bits of inbuf[1] shifted right four\
outBuf[ 2 ] = (inbuf[1] & 0x0F) << 2		// bottom four bits of inbuf[1] shifted left two\
			| (inbuf[2] & 0xC0) >> 6;		// top two bits of inbuf[2] shifted right six\
outBuf[ 3 ] = inbuf[2] & 0x3F;				// bottom six bits of inbuf[2]\
\

\f1\fs24 Every three bytes of inBuf are translated into four characters in outBuf.  The translated four characters in outBuf then range from 0 to 63 and are replaced using the lookup table for Base64.\
\
End result must be multiple of four characters.  If not exactly enough data (incoming data length not a multiple of 3), extra bits of last data character filled with zero and fill remaining characters (multiple of 4 remember?) with '='.\
\

\f0\b AltiVec implementation:\

\f1\b0 \
AltiVec can work on 4 groups of 3 incoming bytes at a time.  That is, each iteration through the loop will convert twelve data bytes into sixteen Base64 characters.  This means that the AltiVec implementation needs to have multiples of twelve data bytes.  If there is not an exact multiple of twelve data bytes, then use the standard CPU implementation of Base64 encoding for the remainder.\
\
Assume initial data stream is this: "abcdefghijkl" (that's twelve bytes)\
\

\f0\b First, fill initial vector with:\

\f1\b0 \
abccdeffghiijkll\
\
We need to do this because the fourth outbound character only takes data from the third inbound byte.  Could we use vec_perm here?  No, we can't directly because we skip ahead only 12 bytes for inbound data; AltiVec likes to work on 16 byte boundaries.  We could copy the twelve bytes into a vector and then use vec_perm to shift them up though.  However, since we're copying the twelve bytes into a vector anyway, we may as well put them in the correct place while copying.\

\f2\fs22 \
unsigned char kPermuteInbound[ 16 ] = \{ 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 11 \};\
\
for ( workLoopIndex = 0; workLoopIndex < 16; workLoopIndex++ )\
	((unsigned char *)&workingVec)[ workLoopIndex ] = inBytes[ kPermuteInbound[ workLoopIndex ] ];\
\

\f0\b\fs24 Shift some bits to the right:\

\f1\b0 \
workingVec[ 0, 4, 8, 12 ] must be shifted right two bits. (fill with zero)\
workingVec[ 1, 5, 9, 13 ] must be shifted right four bits. (fill with zero)\
workingVec[ 2, 6, 10, 14 ] must be shifted right six bits. (fill with zero)\
\
Accomplish this by the following:\

\f2\fs22 \
vector unsigned char kShiftRight = \{ 2, 4, 6, 0, 2, 4, 6, 0, 2, 4, 6, 0, 2, 4, 6, 0 \};\
\
shiftedRight = vec_sr( workingVec, kShiftRight );\

\f1\fs24 \

\f0\b Now shift some bits to the left:\

\f1\b0 \
workingVec[ 0, 4, 8, 12 ] must be shifted left four (fill with zero)\
workingVec[ 1, 5, 9, 13 ] must be shifted left two (fill with zero)\
\
Accomplish this by the following:\

\f2\fs22 \
vector unsigned char kShiftLeft = \{ 4, 2, 0, 0, 4, 2, 0, 0, 4, 2, 0, 0, 4, 2, 0, 0 \};\
\
shiftedLeft = vec_sl( workingVec, kShiftLeft );\

\f1\fs24 \
The relevant shifted left bits will end up in different bytes, so we need to move the shifted left bytes into the byte position that they should be in.  Note that the byte positions that are not needed are filled with zero.\
\

\f2\fs22 vector unsigned char kPermuteShiftedLeft = \{ 16, 0, 1, 16, 16, 4, 5, 16, 16, 8, 9, 16, 16, 12, 13, 16 \};\
shiftedLeft = vec_perm( shiftedLeft, zero, kPermuteShiftedLeft );\
\

\f1\fs24 Now the results need to be combined into the output data.  Need to select just the bits we want from both the left shifted and the right shifted data vectors.  Here we do require and make use of a zero vector.  Note that we take most of the shiftedRight vector because when the data shifts off to the right within each byte, it fills in with zeros.\
\

\f2\fs22 vector unsigned char kSelectShiftedRight = \{ 255, 255, 255, 63, 255, 255, 255, 63, 255, 255, 255, 63, 255, 255, 255, 63 \};\
outputVec = vec_sel( zero, shiftedRight, kSelectShiftedRight );\
\
vector unsigned char kSelectShiftedLeft = \{ 0, 48, 60, 0, 0, 48, 60, 0, 0, 48, 60, 0, 0, 48, 60, 0 \};\
outputVec = vec_sel( outputVec, shiftedLeft, kSelectShiftedLeft );\
\

\f1\fs24 We now have the output vector almost completed.  We've done the bulk of the work and each byte of the outputVec contains an index from 0 to 63.  We need to look up this index in the Base64 lookup table to find the actual character we're going to have in the output data.  We do this by splitting the Base64 lookup table into two 32 byte lookup tables consisting of two 16 byte vectors each, then making use of the vec_perm instruction to look up the relevant characters in each half of the lookup table.\
\

\f2\fs22 vector unsigned char kBase64LookupTable0 = \{ \CocoaLigature0 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P'\CocoaLigature1  \};\
vector unsigned char kBase64LookupTable1 = \{ \CocoaLigature0 'Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f'\CocoaLigature1  \};\
vector unsigned char kBase64LookupTable2 = \{ \CocoaLigature0 'g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v'\CocoaLigature1  \};\
vector unsigned char kBase64LookupTable3 = \{ \CocoaLigature0 'w','x','y','z','0','1','2','3','4','5','6','7','8','9','+','/'\CocoaLigature1  \};\
vector unsigned char kWhichTable = \{ \CocoaLigature0 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32\CocoaLigature1  \};\
\
// Determine which indices will use the lower half of the table and which the upper half.\
comparison = vec_cmplt( outputVec, kWhichTable );\
\
// Do the lookup for the indices 0 to 31.\
finishedLower = vec_perm( kBase64LookupTable0, kBase64LookupTable1, outputVec );\
\
// Lookup the indices 32 to 63 (note that these are the same as above except with the '32' place bit set which is ignored by vec_perm).\
finishedUpper = vec_perm( kBase64LookupTable2, kBase64LookupTable3, outputVec );\
\
// Recombine the characters from the upper and lower half lookups.\
outputVec = vec_sel( finishedUpper, finishedLower, comparison );\
\

\f1\fs24 And that's it.  The outputVec now contains only characters from the Base64 lookup table.  The only thing left is to increment the inbound data pointer and the output vector pointer.\
\

\f2\fs22 outputVec++;		// Assuming this is of type 'vector unsigned char *'\
inboundPtr += 12;	// Assuming this is of type 'unsigned char *' or 'char *'\

\f0\b\fs24 \
Decoding Base64
\f1\b0 \
\
Decoding Base64 data is a two step process.\
\
In the first step, the data is scanned for all relevant bytes and reduced to values of 0 to 63.  When a stop byte is found (the '=' character), a stop value of 255 is inserted.  This process eliminates all ignorable characters (line endings in particular) and produces a buffer of data with no bubbles that can easily be further decoded.\
\
In the second step, each series of four bytes in Base64 is converted into three full data bytes.  This uses the following algorithm:\
\
outBuf[ 0 ] = ( inBuf[ 0 ] << 2 ) |			// bottom six bits of inBuf[ 0 ] shifted left two\
		( ( inbuf[ 1 ] & 0x30) >> 4 );		// two bits of inBuf[ 1 ] shifted right four (filling two lowest bits of outBuf[ 0 ])\
\
outBuf[ 1 ] = ( ( inBuf[ 1 ] &0x0F ) << 4 ) |			// bottom four bits of inBuf[ 1 ] shifted left four (fills top half of bits)\
			( ( inbuf[ 2 ] & 0x3C) >> 2 );	// middle four bits of inBuf[ 2 ] shifted right two (fills bottom half of bits)\
\pard\tx480\tx960\tx1440\tx1920\tx2400\tx2880\tx3360\tx3840\tx4320\tx4800\tx5280\tx5760\tx6240\tx6720\tx7200\tx7680\tx8160\tx8640\tx9120\tx9600\tx10080\tx10560\tx11040\tx11520\tx12000\tx12480\tx12960\tx13440\tx13920\tx14400\tx14880\tx15360\tx15840\tx16320\tx16800\tx17280\tx17760\tx18240\tx18720\tx19200\tx19680\tx20160\tx20640\tx21120\tx21600\tx22080\tx22560\tx23040\tx23520\tx24000\tx24480\tx24960\tx25440\tx25920\tx26400\tx26880\tx27360\tx27840\tx28320\tx28800\tx29280\tx29760\tx30240\tx30720\tx31200\tx31680\tx32160\tx32640\tx33120\tx33600\tx34080\tx34560\tx35040\tx35520\tx36000\tx36480\tx36960\tx37440\tx37920\tx38400\tx38880\tx39360\tx39840\tx40320\tx40800\tx41280\tx41760\tx42240\tx42720\tx43200\tx43680\tx44160\tx44640\tx45120\tx45600\tx46080\tx46560\tx47040\tx47520\tx48000\ql\qnatural

\f2\fs20 \cf0 \CocoaLigature0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural

\f1\fs24 \cf0 \CocoaLigature1 outBuf[ 2 ] = ( ( inBuf[ 2 ] & 0x03 ) << 6 ) |	// bottom two bits of inBuf[ 2 ] shifted left six\
			inbuf[ 3 ];			// all bits of inbuf[ 3 ] (only has bottom six bits)\
\

\f0\b AltiVec implementation:
\f1\b0 \
\
AltiVec can work on four groups of four incoming data bytes at a time to produce four groups of three outbound bytes.  That is, 16 incoming Base64 bytes are translated into 12 outbound data bytes.\
\

\f0\b Shift some left:\

\f1\b0 \
inBuf[ 0 ] needs to be shifted left two bits	(fill with zero)\
inBuf[ 1 ] needs to be shifted left four bits	(fill with zero)\
inBuf[ 2 ] needs to be shifted left six bits		(fill with zero)\
\
Accomplish this by the following:\

\f2\fs22 \
vector unsigned char kShiftLeft = \{ 2, 4, 6, 0, 2, 4, 6, 0, 2, 4, 6, 0, 2, 4, 6, 0 \};\
\
shiftedLeft = vec_sl( workingVec, kShiftLeft );\

\f0\b\fs24 \
Shift some right:\

\f1\b0 \
inBuf[ 1 ] needs to be shifted right four bits. (fill with zero) \
inBuf[ 2 ] needs to be shifted right two bits. (fill with zero)\
\
Accomplish this by the following:\

\f2\fs22 \
vector unsigned char kShiftRight = \{ 0, 4, 2, 0, 0, 4, 2, 0, 0, 4, 2, 0, 0, 4, 2, 0 \};\
\
shiftedRight = vec_sr( workingVec, kShiftRight );
\f1\fs24 \
\
Now permute some of the bytes so they can easily be combined into the output vector.\
\
Move shifted right byte 1 to byte 0.  Move shifted right byte 2 to byte 1.  Move shifted right byte 3 to byte 2.\
\

\f2\fs22 vector unsigned char kPermuteShiftedRight = \{ 1, 2, 3, 16, 5, 6, 7, 16, 9, 10, 11, 16, 13, 14, 15, 16 \};\
shiftedRight = vec_perm( shiftedRight, zero, kPermuteShiftedRight );\
\

\f1\fs24 Now the results need to be combined into the output data.  Need to select just the bits we want from both the left shifted and the right shifted data vectors.  We can do this in one simple statement because we have all relevant bits lined up and all extra bits are zero.\
\

\f2\fs22 outputVec = vec_or( shiftedRight, shiftedLeft );\
\

\f1\fs24 Finally, we need to pull out only the relevant twelve bytes of data.\
\

\f2\fs22 unsigned char kPermuteRelevantData[ 12 ] = \{ 0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14 \};\
for ( i = 0; i < 12; i++ )\
	outputBuffer[ i ] = outputVec[ kPermuteRelevantData[ i ] ];}