#!/usr/bin/env yog-generational
# -*- coding: utf-8 -*-

class Token
  def init(type, value=nil)
    self.type = type
    self.value = value
  end
end

class Lexer
  def init(fp)
    self.fp = fp
    self.line = ""
    self.pos = 0
    self.lineno = 0
    self.ungotten_token = nil
  end

  def read_code()
    code = self.line.slice(self.pos)
    while ((line = self.read_line()) != nil) && (line.trim() != "%}")
      code += line
    end
    self.read_line()
    return code
  end

  def increment_lineno()
    self.lineno += 1
  end

  def read_line()
    line = self.fp.readline()
    self.increment_lineno()
    if (line != nil) && (line.ltrim().get(0) == "#")
      return self.read_line()
    end

    self.line = line
    self.pos = 0
    return line
  end

  def skip_whitespace()
    m = /\s*/.match(self.line, self.pos)
    if m == nil
      return
    end
    self.pos = m.end()
  end

  def read_action()
    action = ""
    while ((line = self.fp.readline()) != nil) && (line.rtrim() != "}")
      self.increment_lineno()
      action += line
    end
    self.increment_lineno()
    self.read_line()
    return action
  end

  def unget_token(token)
    self.ungotten_token = token
  end

  def skip_comment()
    if (m = /:\)/.search(self.line, self.pos)) == nil
      self.read_line()
      return self.skip_comment()
    end
    self.pos = m.end()
  end

  def get_next_token()
    if self.ungotten_token != nil
      token = self.ungotten_token
      self.ungotten_token = nil
      return token
    end
    if self.line == nil
      return nil
    end
    self.skip_whitespace()
    if self.line.size <= self.pos
      self.read_line()
      return self.get_next_token()
    end

    if (m = /[A-Za-z_][A-Za-z0-9_]*/.match(self.line, self.pos)) != nil
      self.pos = m.end()
      size = m.end() - m.start()
      return Token.new('nonterminal, self.line.slice(m.start(), size).to_sym())
    end
    if (m = /<[A-Za-z_][A-Za-z0-9_]*>/.match(self.line, self.pos)) != nil
      self.pos = m.end()
      size = m.end() - m.start() - 2
      return Token.new('terminal, self.line.slice(m.start() + 1, size).to_sym())
    end
    tokens = { ":": 'colon, "@": 'at, ";": 'semicolon, "|": 'bar }
    tokens.each() do [key, value]
      if self.line.slice(self.pos, key.size) != key
        next
      end
      self.pos += key.size
      return Token.new(value)
    end
    if self.line[self.pos] == "{"
      return Token.new('action, self.read_action())
    end
    if (m = /\(\:/.match(self.line, self.pos)) != nil
      self.pos = m.end()
      self.skip_comment()
      return self.get_next_token()
    end
    if self.line[self.pos] == "%"
      self.pos += 1
      if self.line[self.pos] == "{"
        self.pos += 1
        return Token.new('decl, "{".to_sym())
      end
    end
    raise SyntaxError.new("Invalid syntax: line {0}".format(self.lineno))
  end
end

class GrammarSymbol
  def init(sym)
    self.id = nil
    self.sym = sym
  end
end

class NonTerminal > GrammarSymbol
  def init(sym)
    super(sym)
    self.nullable? = false
    self.first = Set.new()
  end

  def to_s()
    return self.sym.to_s()
  end
end

class Terminal > GrammarSymbol
  def to_s()
    return "<{0}>".format(self.sym)
  end
end

class Rule
  def init(lhs)
    self.id = nil
    self.lhs = lhs
    self.rhs = []
    self.alias = []
    self.action = nil
  end

  def to_s()
    return "<Rule {0}: {1}>".format(self.lhs, self.rhs.join(" "))
  end
end

class Parser
  def init(lexer)
    self.lexer = lexer
    self.terminals = {}
    self.nonterminals = {}
    self.rules = nil
    self.code = ""
  end

  def unget_token(token)
    self.lexer.unget_token(token)
  end

  def get_next_token(*expected)
    token = self.lexer.get_next_token()
    if (token == nil) || expected.include?(token.type)
      return token
    end
    fmt = "Invalid syntax: {0} expected, but {1} at line {2}"
    raise SyntaxError.new(fmt.format(expected, token.type, self.lexer.lineno))
  end

  def get_symbol(sym, dict, klass)
    try
      return dict[sym]
    except KeyError
    end
    obj = klass.new(sym)
    dict[sym] = obj
    return obj
  end

  def get_nonterminal(sym)
    return self.get_symbol(sym, self.nonterminals, NonTerminal)
  end

  def get_terminal(sym)
    return self.get_symbol(sym, self.terminals, Terminal)
  end

  def parse_rhs(rule)
    expected = ['terminal, 'nonterminal, 'action, 'bar]
    loop() do
      token = self.get_next_token(*expected)
      if token.type == 'terminal
        rule.rhs << self.get_terminal(token.value)
        rule.alias << nil
        next
      end
      if token.type == 'nonterminal
        next_token = self.get_next_token(*(['at] + expected))
        if next_token.type != 'at
          self.unget_token(next_token)
          rule.rhs << self.get_nonterminal(token.value)
          rule.alias << nil
          next
        end
        rule.alias << token.value
        token = self.get_next_token('terminal, 'nonterminal)
        type = token.type
        getter = type == 'terminal ? self.get_terminal : self.get_nonterminal
        rule.rhs << getter(token.value)
        next
      end
      if token.type == 'action
        rule.action = token.value
        return
      end
      self.unget_token(token)
      return
    end
  end

  def parse_rule()
    lhs = self.get_nonterminal(self.get_next_token('nonterminal).value)
    self.get_next_token('colon)
    rules = []
    loop() do
      rule = Rule.new(lhs)
      self.parse_rhs(rule)
      rules << rule
      token = self.get_next_token('semicolon, 'bar)
      if token.type == 'semicolon
        return rules
      end
    end
  end

  def parse()
    rules = []
    while (token = self.get_next_token('decl, 'nonterminal)) != nil
      if token.type == 'decl
        if token.value == "{".to_sym()
          self.code = self.lexer.read_code()
          next
        end
        raise SyntaxError.new("Invalid declaration: {0}".format(token.value))
      end
      self.unget_token(token)
      rules.extend(self.parse_rule())
    end
    self.rules = rules
  end
end

class Item
  def init()
    self.rule = nil
    self.pos = 0
    self.lookahead = Set.new()
    self.shifted_from = nil
  end
end

@include(Comparable)
class State
  def init()
    self.id = nil
    self.items = []
    self.shifts = {}
  end

  def get_thru()
    item = self.items[0]
    return item.rule.rhs[item.pos - 1]
  end

  thru = property(get_thru)

  def <=>(state)
    if state == nil
      return 1
    end
    diff = self.items.size - state.items.size
    if diff != 0
      return diff
    end
    self.items.zip(state.items).each() do [items]
      (:
      diff = items[0].rule.id - items[1].rule.id
      if diff != 0
        return diff
      end
      :)
      diff = items[0].pos - items[1].pos
      if diff != 0
        return diff
      end
    end
    return 0
  end
end

def make_empty_items_of_rule(rule, pos, nonterm2rules)
  if rule.rhs.size <= pos
    return []
  end
  sym = rule.rhs[pos]
  if sym.kind_of?(Terminal)
    return []
  end
  items = []
  nonterm2rules[sym].each() do [r]
    if 0 < r.rhs.size
      items.extend(make_empty_items_of_rule(r, 0, nonterm2rules))
      next
    end
    i = Item.new()
    i.rule = r
    items << i
  end
  return items
end

def make_empty_items(items, nonterm2rules)
  empty_items = []
  items.each() do [item]
    a = make_empty_items_of_rule(item.rule, item.pos, nonterm2rules)
    empty_items.extend(a)
  end
  return empty_items
end

def make_state(items, nonterm2rules)
  state = State.new()
  state.items.extend(items)
  state.items.extend(make_empty_items(items, nonterm2rules))
  return state
end

def make_first_state(rule, eof, nonterm2rules)
  item = Item.new()
  item.rule = rule
  item.lookahead.add(eof)
  return make_state([item], nonterm2rules)
end

def compute_item_from_kernel(item)
  if item.rule.rhs.size <= item.pos
    return nil
  end
  i = Item.new()
  i.rule = item.rule
  i.pos = item.pos + 1
  i.shifted_from = 'kernel
  return i
end

def compute_items_from_nonkernel(item, nonterm2rules)
  sym = item.rule.rhs[item.pos - 1]
  if sym.kind_of?(Terminal)
    return []
  end
  items = []
  nonterm2rules[sym].each() do [rule]
    if rule.rhs.size < 1
      next
    end
    i = Item.new()
    i.rule = rule
    i.pos = 1
    i.shifted_from = 'nonkernel
    items << i
  end
  return items
end

def group_items_by_sym(items, d)
  items.each() do [item]
    sym = item.rule.rhs[item.pos - 1]
    try
      d[sym] << item
    except KeyError
      d[sym] = [item]
    end
  end
end

def compute_lr(state, nonterm2rules)
  queue = []
  state.items.each() do [item]
    i = compute_item_from_kernel(item)
    if i == nil
      next
    end
    queue << i
  end
  sym2items = {}
  group_items_by_sym(queue, sym2items)
  while 0 < queue.size
    a = compute_items_from_nonkernel(queue.shift(), nonterm2rules)
    group_items_by_sym(a, sym2items)
    queue.extend(a)
  end
  states = []
  sym2items.values.each() do [items]
    states << make_state(items, nonterm2rules)
  end
  return states
end

def find_state(sym2states, state)
  try
    states = sym2states[state.thru]
  except KeyError
    return nil
  end
  states.each() do [s]
    if s != state
      next
    end
    return s
  end
  return nil
end

def compute_states(state, nonterm2rules)
  sym2states = {}
  states = [state]
  pos = 0
  while pos < states.size
    children = []
    parent = states[pos]
    pos += 1
    compute_lr(parent, nonterm2rules).each() do [s]
      t = find_state(sym2states, s)
      if t != nil
        children << t
        next
      end
      children << s
      states << s
      sym = s.thru
      try
        sym2states[sym] << s
      except KeyError
        sym2states[sym] = [s]
      end
    end
    children.each() do [s]
      parent.shifts[s.thru] = s
    end
  end
  return states
end

def dump_item(item)
  rule = item.rule
  print("  {0} ->".format(rule.lhs.sym))
  rule.rhs.each_with_index() do [i, sym]
    print("{0} {1}".format(i == item.pos ? " ." : "", sym))
  end
  print(item.rule.rhs.size == item.pos ? " ." : "")
  puts(", {0}".format(item.lookahead.to_a().join("/")))
end

def dump_state(state)
  puts("state {0}".format(state.id))
  state.items.each(&dump_item)
  puts("")
  puts("  shift:")
  state.shifts.each() do [sym, state]
    puts("    {0}: {1}".format(sym, state.id))
  end
end

def dump_states(states)
  states.each() do [state]
    dump_state(state)
  end
end

def number_array_elements(a)
  a.each_with_index() do [index, elem]
    elem.id = index
  end
end

def compute_first_of_rule(rule, pos)
  first = Set.new()
  n = pos
  rhs = rule.rhs
  while n < rhs.size
    sym = rhs[n]
    if sym.kind_of?(Terminal)
      first.add(sym)
      return first
    end
    first.extend(sym.first)
    if !sym.nullable?
      return first
    end
    n += 1
  end
  return first
end

def nullable?(rule, pos)
  rule.rhs.slice(pos).each() do [sym]
    if sym.kind_of?(Terminal) || !sym.nullable?
      return false
    end
  end
  return true
end

def add_follow(follow, nonterm, terms)
  try
    prev_num = follow[nonterm].size
    follow[nonterm].extend(terms)
    return prev_num != follow[nonterm].size
  except KeyError
    follow[nonterm] = terms.copy()
    return true
  end
end

def compute_follow(state)
  follow = {}
  state.items.each() do [item]
    rule = item.rule
    rhs = rule.rhs
    pos = item.pos
    if rhs.size <= pos
      next
    end
    if !nullable?(rule, pos + 1)
      next
    end
    add_follow(follow, rhs[pos], item.lookahead)
  end
  states = state.shifts.values
  states.each() do [s]
    sym = s.thru
    if sym.kind_of?(Terminal)
      next
    end
    s.items.each() do [item]
      syms = compute_first_of_rule(item.rule, item.pos)
      add_follow(follow, sym, syms)
    end
  end
  updated? = true
  while updated?
    updated? = false
    states.each() do [s]
      sym = s.thru
      if sym.kind_of?(Terminal)
        next
      end
      s.items.each() do [item]
        if item.shifted_from == 'kernel
          next
        end
        rule = item.rule
        if !nullable?(rule, item.pos)
          next
        end
        if add_follow(follow, sym, follow.get(rule.lhs, Set.new()))
          updated? = true
        end
      end
    end
  end
  return follow
end

def find_next_item(state, item)
  if item.rule.rhs.size <= item.pos
    return nil
  end
  s = state.shifts[item.rule.rhs[item.pos]]
  s.items.each() do [i]
    if (i.rule != item.rule) || (i.pos - 1 != item.pos)
      next
    end
    return i
  end
end

def update_set(set1, set2)
  prev_num = set1.size
  set1.extend(set2)
  return set1.size != prev_num
end

def compute_lookahead(states)
  updated? = true
  while updated?
    updated? = false
    states.each() do [state]
      state.items.each() do [item]
        next_item = find_next_item(state, item)
        if next_item == nil
          next
        end
        if update_set(next_item.lookahead, item.lookahead)
          updated? = true
        end
      end
      follow = compute_follow(state)
      state.shifts.values.each() do [s]
        s.items.each() do [item]
          if item.shifted_from == 'kernel
            next
          end
          if update_set(item.lookahead, follow[item.rule.lhs])
            updated? = true
          end
        end
      end
      state.items.each() do [item]
        if 0 < item.rule.rhs.size
          next
        end
        item.lookahead.extend(follow[item.rule.lhs])
      end
    end
  end
end

def compute_nullable(rules)
  updated? = true
  while updated?
    updated? = false
    rules.each() do [rule]
      nullable? = true
      rule.rhs.each() do [sym]
        if sym.kind_of?(NonTerminal) && sym.nullable?
          next
        end
        nullable? = false
        break
      end
      if !nullable? || rule.lhs.nullable?
        next
      end
      rule.lhs.nullable? = true
      updated? = true
    end
  end
end

def compute_first_of_nonterminals(rules)
  updated? = true
  while updated?
    updated? = false
    rules.each() do [rule]
      rule.rhs.each() do [sym]
        first = rule.lhs.first
        if sym.kind_of?(Terminal)
          if !first.include?(sym)
            first.add(sym)
            updated? = true
          end
          break
        end
        sym.first.each() do [term]
          if first.include?(term)
            next
          end
          first.add(term)
          updated? = true
        end
        if !sym.nullable?
          break
        end
      end
    end
  end
end

def dump_nonterminals(nonterms)
  puts("NonTerminal")
  nonterms.each() do [nonterm]
    puts("{0}:".format(nonterm))
    puts("  nullable?: {0}".format(nonterm.nullable?))
    puts("  first: {0}".format(nonterm.first.to_a().join(" ")))
    puts("")
  end
end

def make_initial_rule(nonterm)
  rule = Rule.new(NonTerminal.new("S'".to_sym()))
  rule.rhs << nonterm
  rule.alias << nil
  return rule
end

def make_nonterm2rules(rules)
  nonterm2rules = {}
  rules.each() do [rule]
    sym = rule.lhs
    try
      nonterm2rules[sym] << rule
    except KeyError
      nonterm2rules[sym] = [rule]
    end
  end
  return nonterm2rules
end

class Action
  def init(type, subinfo=nil)
    self.type = type
    self.subinfo = subinfo
  end

  def encode()
    return (self.type == 'shift ? 1 : 0) + (self.subinfo << 1)
  end
end

def compute_tables(states, rules, terms, nonterms)
  term2act = Array.new(states.size)
  nonterm2act = Array.new(states.size)
  states.each() do [state]
    term2act_state = Array.new(terms.size)
    nonterm2act_state = Array.new(nonterms.size)
    state.items.each() do [item]
      if item.pos < item.rule.rhs.size
        next
      end
      item.lookahead.each() do [term]
        term2act_state[term.id] = Action.new('redule, item.rule.id)
      end
    end
    state.shifts.each() do [sym, dest]
      act = Action.new('shift, dest.id)
      tbl = sym.kind_of?(Terminal) ? term2act_state : nonterm2act_state
      tbl[sym.id] = act
    end
    term2act[state.id] = term2act_state
    nonterm2act[state.id] = nonterm2act_state
  end
  return term2act, nonterm2act
end

def make_table_for_states(a, &block)
  return a.map() do [state2act]
    next "[" + state2act.map(&block).join(", ") + "]"
  end.join(",\n")
end

def make_func_name(rule)
  return "action_on_reduce_at_rule{0}".format(rule.id)
end

def decide_arg_pos(rule)
  names = Set.new()
  pos = []
  rule.rhs.size.times() do [i]
    name = rule.alias[i] != nil ? rule.alias[i] : rule.rhs[i]
    if names.include?(name)
      pos << nil
      next
    end
    pos << names.size
    names << name
  end
  return pos
end

def decide_arg_names(rule)
  names = Set.new()
  args = []
  rule.rhs.size.times() do [i]
    name = rule.alias[i] != nil ? rule.alias[i] : rule.rhs[i].sym
    if names.include?(name)
      next
    end
    names << name
    args << name
  end
  return args.map() do [arg]
    next arg.to_s()
  end
end

def make_dict_entries(syms)
  return syms.map() do [sym]
    next "{0}.to_sym(): {1}".format(sym.sym.to_s().inspect(), sym.id)
  end.join(", ")
end

def output_grammar(dest, terms, nonterms, term2act, nonterm2act, rules, code)
  s = make_table_for_states(term2act) do [act]
    next (act != nil ? act.encode() : nil).to_s()
  end
  t = make_table_for_states(nonterm2act) do [act]
    next (act != nil ? act.subinfo : nil).to_s()
  end
  u = rules.map() do [rule]
    next rule.rhs.size.to_s()
  end.join(", ")
  v = make_dict_entries(terms)
  w = rules.map() do [rule]
    next rule.lhs.id.to_s()
  end.join(", ")
  x = rules.map(&make_func_name).join(",\n")
  y = rules.map() do [rule]
    args = decide_arg_names(rule)
    body = rule.action != nil ? rule.action : "return nil"
    next <<EOF.format(make_func_name(rule), args.join(", "), body)
def {0}({1})
  {2}
end
EOF
  end.join("")
  z = rules.map() do [rule]
    pos = decide_arg_pos(rule)
    next "[" + pos.map() do [n]
      next n.to_s()
    end.join(", ") + "]"
  end.join(",\n")
  a = make_dict_entries(nonterms)
  b = code != nil ? code : ""
  File.open(dest, "w") do [fp]
    fp.write(<<EOF.format(s, t, u, v, w, x, y, z, a, b))
{9}

term2act = [
{0}
]
nonterm2act = [
{1}
]
rule_size = [
{2}
]
terms = {{
{3}
}}
nonterms = {{
{8}
}}
lhs = [
{4}
]

{6}

funcs = [
{5}
]

pos = [
{7}
]

def get_action(state, type)
  index = terms.get(type)
  if index != nil
    act = term2act[state][index]
    return act & 1 == 1 ? 'shift : 'reduce, act >> 1
  end
  return 'reduce, nonterm2act[state][nonterms[type]]
end

def get_rule_size(rule)
  return rule_size[rule]
end

def get_next_state(state, rule)
  return nonterm2act[state][lhs[rule]]
end

def invoke(rule, args)
  params = []
  args.each_with_index() do [index, arg]
    if pos[rule][index] == nil
      next
    end
    params << arg
  end
  return funcs[rule](*params)
end
EOF
  end
end

def main(dest, src)
  parser = File.open(src) do [fp]
    parser = Parser.new(Lexer.new(fp))
    parser.parse()
    next parser
  end
  rules = parser.rules
  rules.unshift(make_initial_rule(rules[0].lhs))
  compute_nullable(rules)
  compute_first_of_nonterminals(rules)
  nonterm2rules = make_nonterm2rules(rules)
  #dump_nonterminals(nonterm2rules.keys)
  eof = Terminal.new("$".to_sym())
  first_state = make_first_state(rules[0], eof, nonterm2rules)
  states = compute_states(first_state, nonterm2rules)
  number_array_elements(states)
  number_array_elements(rules)
  terms = [eof] + parser.terminals.values
  number_array_elements(terms)
  nonterms = parser.nonterminals.values
  number_array_elements(nonterms)
  compute_lookahead(states)
  #dump_states(states)
  term2act, nonterm2act = compute_tables(states, rules, terms, nonterms)
  output_grammar(dest, terms, nonterms, term2act, nonterm2act, rules, parser.code)
end

if __FILE__ == ARGV.get(0)
  main(ARGV[1], ARGV[2])
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
