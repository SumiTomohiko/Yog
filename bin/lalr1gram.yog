#!/usr/bin/env yog-generational
# -*- coding: utf-8 -*-

class Token
  def init(type, value=nil)
    self.type = type
    self.value = value
  end
end

class Lexer
  def init(fp)
    self.fp = fp
    self.line = ""
    self.pos = 0
    self.lineno = 0
    self.ungotten_token = nil
  end

  def increment_lineno()
    self.lineno += 1
  end

  def read_line()
    self.line = self.fp.readline()
    self.pos = 0
    self.increment_lineno()
  end

  def skip_whitespace()
    m = /\s*/.match(self.line, self.pos)
    if m == nil
      return
    end
    self.pos = m.end()
  end

  def read_action()
    action = ""
    while ((line = self.fp.readline()) != nil) && (line.rtrim() != "}")
      self.increment_lineno()
      action += line
    end
    self.increment_lineno()
    self.read_line()
    return action
  end

  def unget_token(token)
    self.ungotten_token = token
  end

  def get_next_token()
    if self.ungotten_token != nil
      token = self.ungotten_token
      self.ungotten_token = nil
      return token
    end
    if self.line == nil
      return nil
    end
    self.skip_whitespace()
    if self.line.size <= self.pos
      self.read_line()
      return self.get_next_token()
    end

    if (m = /[a-z_]+/.match(self.line, self.pos)) != nil
      self.pos = m.end()
      size = m.end() - m.start()
      return Token.new('nonterminal, self.line.slice(m.start(), size).to_sym())
    end
    if (m = /<[a-z_]+>/.match(self.line, self.pos)) != nil
      self.pos = m.end()
      size = m.end() - m.start() - 2
      return Token.new('terminal, self.line.slice(m.start() + 1, size).to_sym())
    end
    tokens = { "->": 'arrow, "@": 'at, ";": 'semicolon, "|": 'bar }
    tokens.each() do [key, value]
      if self.line.slice(self.pos, key.size) != key
        next
      end
      self.pos += key.size
      return Token.new(value)
    end
    if self.line[self.pos] == "{"
      return Token.new('action, self.read_action())
    end
    raise SyntaxError.new("Invalid syntax: line {0}".format(self.lineno))
  end
end

class GrammarSymbol
  def init(sym)
    self.sym = sym
  end
end

class NonTerminal > GrammarSymbol
  def init(sym)
    super(sym)
    self.nullable? = false
    self.first = Set.new()
  end

  def to_s()
    return self.sym.to_s()
  end
end

class Terminal > GrammarSymbol
  def to_s()
    return "<{0}>".format(self.sym)
  end
end

class Rule
  def init(lhs)
    self.lhs = lhs
    self.rhs = []
    self.action = nil
  end
end

class Parser
  def init(lexer)
    self.lexer = lexer
    self.terminals = {}
    self.nonterminals = {}
  end

  def unget_token(token)
    self.lexer.unget_token(token)
  end

  def get_next_token(*expected)
    token = self.lexer.get_next_token()
    if (token == nil) || expected.include?(token.type)
      return token
    end
    fmt = "Invalid syntax: {0} expected, but {1} at line {2}"
    raise SyntaxError.new(fmt.format(expected, token.type, self.lexer.lineno))
  end

  def get_symbol(sym, dict, klass)
    try
      return dict[sym]
    except KeyError
    end
    obj = klass.new(sym)
    dict[sym] = obj
    return obj
  end

  def get_nonterminal(sym)
    return self.get_symbol(sym, self.nonterminals, NonTerminal)
  end

  def get_terminal(sym)
    return self.get_symbol(sym, self.terminals, Terminal)
  end

  def parse_rhs(rule)
    loop() do
      token = self.get_next_token('terminal, 'nonterminal, 'action, 'bar)
      if token.type == 'terminal
        rule.rhs << self.get_terminal(token.value)
        next
      end
      if token.type == 'nonterminal
        rule.rhs << self.get_nonterminal(token.value)
        next
      end
      if token.type == 'action
        rule.action = token.value
        return
      end
      self.unget_token(token)
      return
    end
  end

  def parse_rule()
    lhs = self.get_nonterminal(self.get_next_token('nonterminal).value)
    self.get_next_token('arrow)
    rules = []
    loop() do
      rule = Rule.new(lhs)
      self.parse_rhs(rule)
      rules << rule
      token = self.get_next_token('semicolon, 'bar)
      if token.type == 'semicolon
        return rules
      end
    end
  end

  def parse()
    rules = []
    while (token = self.get_next_token('nonterminal)) != nil
      self.unget_token(token)
      rules.extend(self.parse_rule())
    end
    return rules
  end
end

class Item
  def init()
    self.rule = nil
    self.pos = 0
    self.lookahead = Set.new()
  end
end

@include(Comparable)
class State
  def init()
    self.items = []
    self.shifts = {}
    self.id = nil
  end

  def get_thru()
    item = self.items[0]
    return item.rule.rhs[item.pos - 1]
  end

  thru = property(get_thru)

  def <=>(state)
    if self.items.size != state.items.size
      return false
    end
    self.items.size.times() do [i]
      if self.items[i].rule != state.items[i].rule
        return false
      end
    end
    return true
  end
end

def make_first_state(rule)
  item = Item.new()
  item.rule = rule
  state = State.new()
  state.items << item
  return state
end

def compute_item_from_kernel(item)
  if item.rule.rhs.size <= item.pos
    return nil
  end
  i = Item.new()
  i.rule = item.rule
  i.pos = item.pos + 1
  return i
end

def compute_items_from_nonkernel(item, nonterm2rules)
  sym = item.rule.rhs[item.pos - 1]
  if sym.kind_of?(Terminal)
    return []
  end
  items = []
  nonterm2rules[sym].each() do [rule]
    if rule.rhs.size < 1
      next
    end
    i = Item.new()
    i.rule = rule
    i.pos = 1
    items << i
  end
  return items
end

def group_items_by_sym(items, d)
  items.each() do [item]
    sym = item.rule.rhs[item.pos - 1]
    try
      d[sym] << item
    except KeyError
      d[sym] = [item]
    end
  end
end

def compute_lr(state, nonterm2rules)
  queue = []
  state.items.each() do [item]
    i = compute_item_from_kernel(item)
    if i == nil
      next
    end
    queue << i
  end
  sym2items = {}
  group_items_by_sym(queue, sym2items)
  while 0 < queue.size
    a = compute_items_from_nonkernel(queue.shift(), nonterm2rules)
    group_items_by_sym(a, sym2items)
    queue.extend(a)
  end
  states = []
  sym2items.each() do [_, items]
    state = State.new()
    state.items = items
    states << state
  end
  return states
end

def find_state(sym2states, state)
  try
    states = sym2states[state.thru]
  except KeyError
    return nil
  end
  states.each() do [s]
    if s != state
      next
    end
    return s
  end
  return nil
end

def compute_states(state, nonterm2rules)
  sym2states = {}
  states = [state]
  pos = 0
  while pos < states.size
    children = []
    parent = states[pos]
    pos += 1
    compute_lr(parent, nonterm2rules).each() do [s]
      t = find_state(sym2states, s)
      if t != nil
        children << t
        next
      end
      children << s
      states << s
      sym = s.thru
      try
        sym2states[sym] << s
      except KeyError
        sym2states[sym] = [s]
      end
    end
    children.each() do [s]
      parent.shifts[s.thru] = s
    end
  end
  return states
end

def dump_state(state)
  puts("state {0}".format(state.id))
  state.items.each() do [item]
    rule = item.rule
    print("  {0} ->".format(rule.lhs.sym))
    rule.rhs.each_with_index() do [i, sym]
      print("{0} {1}".format(i == item.pos ? " ." : "", sym))
    end
    print(item.rule.rhs.size == item.pos ? " ." : "")
  end
  puts("")
  puts("  shift:")
  state.shifts.each() do [sym, state]
    puts("    {0}: {1}".format(sym, state.id))
  end
end

def dump_states(states)
  states.each() do [state]
    dump_state(state)
  end
end

def number_states(states)
  id = 0
  states.each() do [state]
    state.id = id
    id += 1
  end
end

def compute_lookahead(states)
  updated = true
  while updated
    updated = false
    states.each() do [state]
      # TODO
    end
  end
end

def compute_nullable(rules)
  updated? = true
  while updated?
    updated? = false
    rules.each() do [rule]
      nullable? = true
      rule.rhs.each() do [sym]
        if sym.kind_of?(NonTerminal) && sym.nullable?
          next
        end
        nullable? = false
        break
      end
      if !nullable? || rule.lhs.nullable?
        next
      end
      rule.lhs.nullable? = true
      updated? = true
    end
  end
end

def compute_first(rules)
  updated? = true
  while updated?
    updated? = false
    rules.each() do [rule]
      rule.rhs.each() do [sym]
        first = rule.lhs.first
        if sym.kind_of?(Terminal)
          if !first.include?(sym)
            first.add(sym)
            updated? = true
          end
          break
        end
        sym.first.each() do [term]
          if first.include?(term)
            next
          end
          first.add(term)
          updated? = true
        end
        if !sym.nullable?
          break
        end
      end
    end
  end
end

def dump_nonterminals(nonterms)
  puts("NonTerminal")
  nonterms.each() do [nonterm]
    puts("{0}:".format(nonterm))
    puts("  nullable?: {0}".format(nonterm.nullable?))
    puts("  first: {0}".format(nonterm.first.to_a().join(" ")))
    puts("")
  end
end

def make_initial_rule(nonterm)
  rule = Rule.new(NonTerminal.new("S'".to_sym()))
  rule.rhs << nonterm
  return rule
end

def make_nonterm2rules(rules)
  nonterm2rules = {}
  rules.each() do [rule]
    sym = rule.lhs
    try
      nonterm2rules[sym] << rule
    except KeyError
      nonterm2rules[sym] = [rule]
    end
  end
  return nonterm2rules
end

def main(dest, src)
  rules = File.open(src) do [fp]
    next Parser.new(Lexer.new(fp)).parse()
  end
  rules.unshift(make_initial_rule(rules[0].lhs))
  compute_nullable(rules)
  compute_first(rules)
  nonterm2rules = make_nonterm2rules(rules)
  dump_nonterminals(nonterm2rules.keys)
  states = compute_states(make_first_state(rules[0]), nonterm2rules)
  number_states(states)
  dump_states(states)
  compute_lookahead(states)
end

if __FILE__ == ARGV.get(0)
  main(ARGV[1], ARGV[2])
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
