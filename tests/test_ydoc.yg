
import ydoc

class Generator > ydoc.Generator
  def make_typewriter(s)
    return "+{0}+".format(s)
  end

  def make_link(ydoc, text, url)
    return "{{{0}}}[{1}]".format(text, url)
  end

  def make_newline()
    return "\n"
  end

  def write_attribute(ydoc, attr, type)
    self.s << <<EOF.format(type, attr.name, attr.type, attr.desc)
  {0}: {1}
    type: {2}
    {3}
EOF
  end

  def make_param(param)
    return param
  end

  def write_method(ydoc, meth, type)
    self.s << <<EOF.format(meth.sig)
  method: {0}
    parameters:
EOF
    meth.params.each() do [param]
      self.s << <<EOF.format(param.name, param.desc)
      {0}: {1}
EOF
    end
    self.s << <<EOF.format(self.conv_str(meth.return_).rtrim())
    return: {0}
    exceptions:
EOF
    meth.excs.each() do [exc]
      self.s << <<EOF.format(exc.type, exc.desc)
      {0}: {1}
EOF
    end
    self.s << <<EOF.format(self.conv_str(meth.block), self.conv_str(meth.desc))
    block: {0}
    {1}
EOF
  end

  def conv_str(s)
    if s == nil
      return ""
    end
    return s
  end

  def write_class(ydoc, node)
    name = self.conv_str(node.name)
    base = self.conv_str(node.base)
    including = self.conv_str(node.including)
    desc = self.conv_str(node.desc)
    self.s << <<EOF.format(name, base, including, desc)
class: {0}
  base: {1}
  including: {2}
  {3}
EOF
    super(ydoc, node)
  end

  def write_text(ydoc, s)
    self.s << s
  end

  def write_title(ydoc, level, title)
    self.s << "{0} {1}".format("=" * (level + 1), title)
  end

  def start_pretty()
  end

  def end_pretty()
  end

  def write_pretty(s)
    self.s << s
  end

  def start_list()
    self.list_level += 1
  end

  def end_list()
    self.list_level -= 1
  end

  def start_ordered_list()
    self.list_level += 1
  end

  def end_ordered_list()
    self.list_level -= 1
  end

  def write_list_item(ydoc, s)
    self.s << <<EOF.format("  " * (self.list_level - 1), s)
{0}* {1}
EOF
  end

  def write_ordered_list_item(ydoc, s)
    self.s << <<EOF.format("  " * (self.list_level - 1), s)
{0}+ {1}
EOF
  end

  def end()
    return self.s
  end

  def write_data(ydoc, node)
    self.s << <<EOF.format(node.name, node.type, node.desc)
data: {0}
  type: {1}
  {2}
EOF
  end

  def start()
    self.s = ""
    self.list_level = 0
  end
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
