
= Built-in Functions

function: __recurse__(obj, f, g)
  parameters:
    obj: any object
    f: a function which is called when _obj_ is in +Thread#__recursive_stack__+
    g: a function which is called when _obj_ isn't in +Thread#__recursive_stack__+
  return: a return value of _f_ or _g_

  When _obj_ is in +Thread#__recursive_stack__+ of a current thread, calls _f_+(+_obj_+)+. Otherwise, pushes _obj_ to +Thread#__recursive_stack__+ and calls _g_+(+_obj_+)+.

function: bind(obj)
  parameters:
    obj: an object to bind
  return: a function which accepts a function to be bound

  Set +self+ in functions\:

    o = Object.new()

    @bind(o)
    def foo()
      return self
    end

    foo() # => o

function: classmethod(function)
  parameters:
    f: function
  return: class method for _function_

  Return a class method for _function_. To declare class method, use this function in the decorator form\:

    class Foo
      @classmethod
      def bar()
        # ...
      end
    end

function: copy_file(src, dest)
  parameters:
    src: a source file
    dest: a destination path
  return: +nil+

  Copies the _src_ file to _dest_.

function: dirname(path)
  parameters:
    path: a path
  return: a directory part of _path_

function: get_current_thread()
  return: a current thread

  Returns a current thread.

function: import_package(name)
  parameters:
    name: a dotted name (+"foo.bar.baz"+) of a package
  return: an imported package

  Import a package. If you want to import packages, use +import+ statement.

function: include(mod)
  parameters:
    mod: module to include
  return: a function to include a module

  +include+ is used to mix-in a class and modules as a decorator\:

    module Foo
      def bar()
        print(42)
      end
    end

    @include(Foo)
    class Baz
    end

  Calling +Baz.new().bar()+ prints +42+.

function: include_module(klass, mod)
  parameters:
    klass: a class to include _mod_
    mod: included module
  return: _klass_

  Mix-in _mod_ to _klass_. If you want to mix-in a class and modules, use +include+ function as a decorator.

function: join_path(head, tail)
  parameters:
    head: first part of a path
    tail: second part of a path
  return: +String+

  Joins _head_ and _tail_ separating +PATH_SEPARATOR+.

function: loop(&block)
  parameters:
    block: a block to execute
  return: +nil+. But this function never return.
  block: block(n)

  Execute _block_ eternally. +loop+ passes a loop counter to _block_.

function: make_dirs(path)
  parameters:
    path: a path of a directory
  return: +nil+

  Makes a directory including parents directory of _path_.

function: mkdir(path)
  parameters:
    path: a path of a directory
  exceptions:
    SystemError: when cannot make a directory
    TypeError: _path_ is not a +String+

  Makes a directory. The parent directory of _path_ must exist.

function: partial(f, *args, **kw, &block=nil)
  parameters:
    f: a callable object
    args: arguments to _f_
    kw: arguments to _f_
    block: a callable object
  return: a function

  +partial+ is a function for the partial application. A returned function accepts rest of arguments for _f_.

function: print(*args)
  parameters:
    args: objects to print standard output
  return: +nil+

  Prints _args_ to the standard output. If objects are not string, they are converted with +Object#to_s+. When no object are given, +print+ does nothing.

function: property(getter, setter=nil)
  parameters:
    getter: a function called on getting property
    setter: a function called on setting property
  return: a +Property+ object

  When a +Property+ object is gotten as an attribute, _getter_ is called without arguments. If an attirubte to be set is a +Property+ object, _setter_ is called with one argment. The _setter_'s argument is a new value of the attribute\:

    class Foo
      def init()
        self.baz = 42
      end

      def get_bar()
        return self.baz
      end

      def set_bar(baz)
        self.baz = baz
      end

      bar = property(get_bar, set_bar)
    end

    foo = Foo.new()
    foo.bar # => 42
    foo.bar = 26
    foo.bar # => 26

function: puts(*args)
  parameters:
    args: objects to print standard output
  return: +nil+

  Prints _args_ to the standard output with trailing newlines. If objects are not string, they are converted with +Object#to_s+. When no object are given, +print+ prints one newline.

function: raise_exception(e)
  parameters:
    e: an exception
  return: +nil+. But this function never return!

  Raise an exception. If you want to raise an exception, use the +raise+ statement.

function: root_dir?(path)
  parameters:
    path: path
  return: +true+ when _path_ represents a root directory, otherwise +false+

  In Windows, +C:\\+, +D:\\+ and so on are all root directories.

--
vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
